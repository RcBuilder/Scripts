<Application x:Class="Zaybu.Compare.UI.WPF.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Zaybu.Compare.UI.WPF" StartupUri="MainWindow.xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" d1p1:Ignorable="d" xmlns:d1p1="http://schemas.openxmlformats.org/markup-compatibility/2006">
  <Application.Resources>
    <ResourceDictionary>
      <vm:ViewModelLocator x:Key="Locator" d:IsDataSource="True" xmlns:vm="clr-namespace:Zaybu.Compare.UI.WPF.ViewModel" />
      <local:NullVisibilityConverter x:Key="NullToVisibilityConverter" />
      <local:InverseNullVisibilityConverter x:Key="InverseNullToVisibilityConverter" />
      <local:BooleanVisibilityConverter x:Key="BooleanToVisibilityConverter" />
      <local:LimitCharLengthConverter x:Key="LimitLengthConverter" />
      <Color x:Key="NoChangesText">Black</Color>
      <Color x:Key="ObjectChangedText">Orange</Color>
      <Color x:Key="ValueChangedText">Red</Color>
      <Color x:Key="ItemAddedText">Green</Color>
      <Color x:Key="ItemDeletedText">Red</Color>
      <Color x:Key="ItemIgnoredText">LightBlue</Color>
      <Color x:Key="ItemSkippedText">LightGray</Color>
      <Color x:Key="OriginalValueText">Blue</Color>
      <Color x:Key="ChangedToValueText">Blue</Color>
      <SolidColorBrush x:Key="NoChangesBrush" Color="{StaticResource NoChangesText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="ObjectChangedBrush" Color="{StaticResource ObjectChangedText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="ValueChangedBrush" Color="{StaticResource ValueChangedText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="ItemAddedBrush" Color="{StaticResource ItemAddedText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="ItemDeletedBrush" Color="{StaticResource ItemDeletedText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="ItemSkippedBrush" Color="{StaticResource ItemSkippedText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="ItemIgnoredBrush" Color="{StaticResource ItemIgnoredText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="OriginalValueBrush" Color="{StaticResource OriginalValueText}">
      </SolidColorBrush>
      <SolidColorBrush x:Key="ChangedToValueBrush" Color="{StaticResource ChangedToValueText}">
      </SolidColorBrush>
      <Style x:Key="TreeTextBlock" TargetType="TextBlock">
        <Setter Property="Padding" Value="3">
        </Setter>
        <Setter Property="FontSize" Value="12">
        </Setter>
      </Style>
      <Style x:Key="NoChanges" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource NoChangesBrush}">
        </Setter>
      </Style>
      <Style x:Key="ObjectChanged" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ObjectChangedBrush}">
        </Setter>
      </Style>
      <Style x:Key="ValueChanged" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ValueChangedBrush}">
        </Setter>
      </Style>
      <Style x:Key="ItemAdded" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ItemAddedBrush}">
        </Setter>
      </Style>
      <Style x:Key="ItemDeleted" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ItemDeletedBrush}">
        </Setter>
      </Style>
      <Style x:Key="ItemSkipped" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ItemSkippedBrush}">
        </Setter>
      </Style>
      <Style x:Key="ItemIgnored" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ItemIgnoredBrush}">
        </Setter>
      </Style>
      <Style x:Key="PropertyName" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="FontFamily" Value="Courier New">
        </Setter>
        <Setter Property="FontWeight" Value="Bold">
        </Setter>
        <Style.Triggers>
          <DataTrigger Binding="{Binding Status}" Value="0">
            <Setter Property="TextBlock.Foreground" Value="{StaticResource NoChangesBrush}">
            </Setter>
          </DataTrigger>
          <DataTrigger Binding="{Binding Status}" Value="2">
            <Setter Property="TextBlock.Foreground" Value="{StaticResource ItemAddedBrush}">
            </Setter>
          </DataTrigger>
          <DataTrigger Binding="{Binding Status}" Value="3">
            <Setter Property="TextBlock.Foreground" Value="{StaticResource ItemDeletedBrush}">
            </Setter>
          </DataTrigger>
          <DataTrigger Binding="{Binding Status}" Value="4">
            <Setter Property="TextBlock.Foreground" Value="{StaticResource ItemSkippedBrush}">
            </Setter>
          </DataTrigger>
          <DataTrigger Binding="{Binding Status}" Value="5">
            <Setter Property="TextBlock.Foreground" Value="{StaticResource ItemIgnoredBrush}">
            </Setter>
          </DataTrigger>
          <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
              <Condition Binding="{Binding Status}" Value="1" />
            </MultiDataTrigger.Conditions>
            <MultiDataTrigger.Setters>
              <Setter Property="TextBlock.Foreground" Value="{StaticResource ValueChangedBrush}">
              </Setter>
            </MultiDataTrigger.Setters>
          </MultiDataTrigger>
          <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
              <Condition Binding="{Binding Status}" Value="1" />
            </MultiDataTrigger.Conditions>
            <MultiDataTrigger.Setters>
              <Setter Property="TextBlock.Foreground" Value="{StaticResource ObjectChangedBrush}">
              </Setter>
            </MultiDataTrigger.Setters>
          </MultiDataTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="PropertyNameWithChanges" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource PropertyName}">
        <Style.Triggers>
          <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
              <Condition Binding="{Binding Status}" Value="1">
              </Condition>
              <Condition Binding="{Binding IsLeaf}" Value="True">
              </Condition>
            </MultiDataTrigger.Conditions>
            <MultiDataTrigger.Setters>
              <Setter Property="TextBlock.Text">
                <Setter.Value>
                  <MultiBinding StringFormat="{}'{0}' to '{1}'">
                    <Binding Path="OriginalValueAsString" Converter="{StaticResource LimitLengthConverter}" />
                    <Binding Path="ChangedToValueAsString" Converter="{StaticResource LimitLengthConverter}" />
                  </MultiBinding>
                </Setter.Value>
              </Setter>
              <Setter Property="TextBlock.Foreground" Value="{StaticResource ChangedToValueBrush}">
              </Setter>
            </MultiDataTrigger.Setters>
          </MultiDataTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="PropertyChanges" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TreeTextBlock}">
        <Setter Property="FontFamily" Value="Courier New">
        </Setter>
        <Setter Property="Foreground" Value="Gray">
        </Setter>
        <Setter Property="FontWeight" Value="Normal">
        </Setter>
        <Setter Property="TextBlock.Visibility" Value="Hidden">
        </Setter>
        <Style.Triggers>
          <DataTrigger Binding="{Binding Status}" Value="0">
            <Setter Property="Text" Value="">
            </Setter>
          </DataTrigger>
          <DataTrigger Binding="{Binding Status}" Value="4">
            <Setter Property="Text" Value="Ignored">
            </Setter>
          </DataTrigger>
          <DataTrigger Binding="{Binding Status}" Value="5">
            <Setter Property="Text" Value="Skipped">
            </Setter>
          </DataTrigger>
          <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
              <Condition Binding="{Binding Status}" Value="1">
              </Condition>
            </MultiDataTrigger.Conditions>
            <MultiDataTrigger.Setters>
              <Setter Property="TextBlock.Visibility" Value="Visible">
              </Setter>
            </MultiDataTrigger.Setters>
          </MultiDataTrigger>
        </Style.Triggers>
      </Style>
      <!-- TreeView control -->
      <local:TreeViewLineConverter x:Key="LineConverter" />
      <!-- Toggle Button -->
      <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="ToggleButton">
              <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                <!-- Rectangle 9x9 pixels -->
                <Rectangle Width="9" Height="9" Stroke="#919191" SnapsToDevicePixels="true">
                  <Rectangle.Fill>
                    <LinearGradientBrush EndPoint="0.5,2" StartPoint="0.5,0">
                      <GradientStop Color="White" Offset="0" />
                      <GradientStop Color="Silver" Offset="0.5" />
                      <GradientStop Color="LightGray" Offset="1" />
                    </LinearGradientBrush>
                  </Rectangle.Fill>
                </Rectangle>
                <!-- Vertical line inside rectangle -->
                <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="true" />
                <!-- Horizontal line inside rectangle -->
                <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="true" />
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsChecked" Value="True">
                  <Setter Property="Visibility" TargetName="ExpandPath" Value="Collapsed" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <!-- TreeViewItem -->
      <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TreeViewItem}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MinWidth="19" Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <!-- Connecting Lines -->
                <!-- Horizontal line -->
                <Rectangle x:Name="HorLn" Margin="9,1,0,0" Height="1" Stroke="#DCDCDC" SnapsToDevicePixels="True" />
                <!-- Vertical line -->
                <Rectangle x:Name="VerLn" Width="1" Stroke="#DCDCDC" Margin="0,0,1,0" Grid.RowSpan="2" SnapsToDevicePixels="true" Fill="White" />
                <!-- Insert Toggle Button -->
                <ToggleButton Margin="-1,0,0,0" x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />
                <Border Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                  <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20" />
                </Border>
                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" />
              </Grid>
              <ControlTemplate.Triggers>
                <!-- This trigger changes the connecting lines if the item is the last in the list -->
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">
                  <Setter TargetName="VerLn" Property="Height" Value="9" />
                  <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top" />
                </DataTrigger>
                <Trigger Property="HasItems" Value="false">
                  <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                </Trigger>
                <Trigger Property="IsExpanded" Value="false">
                  <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsSelected" Value="true">
                  <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </ResourceDictionary>
  </Application.Resources>
</Application>