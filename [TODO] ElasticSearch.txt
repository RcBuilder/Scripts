*** ElasticSearch ***
*********************
built on Apache Lucene. implemented in Java.
ElasticSearch is Rest-Service Based which provides real-time search and analytics engine.
it provides capability to store, index, search and analyze data in real-time.
Elasticsearch stores JSON documents.

site:
https://www.elastic.co

videos:
https://www.elastic.co/videos/

engine:
elasticsearch-7.2.0-windows-x86_64.zip
run: bin/elasticsearch		
run: bin/elasticsearch-cli 	// cli
run: bin/elasticsearch-sql-cli	// sql cli
run: config/elasticsearch.yml   // config
http://localhost:9200

(management studio)
manager & visualization:
kibana-7.2.0-windows-x86_64.zip
run: bin/kibana
run: config/kibana.yml		// config
http://localhost:5601


---

REST service listen on port 9200 (default) 
http://localhost:9200
stores documents as JSON format

api:
https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html

commands:
_doc		  // work with document
_mget	      	  // multiple GET
_update		  // partial update
-bulk		  // bulk operation
_search		  // search for data 
_sql		  // use sql-like queries
_mapping	  // use field mapping
_analyze	  // analyze text

bulk operations:
- index
- create
- delete
- update

search operations:
- match			// contains   
- match_phrase  	// contains phrase  
- range			// range (see 'search range operations')
- match_all
  
search group type:
- must
- must_not
- should

search range operations:
- gte
- lte
// TODO

notes:
- index name MUST be lowercase
- when searching for documents (_search command), each document in the result gets a score (score and max_score fields) which represents its search score
- when using bulk operations - we MUST add a \n at the end of the content! will not work without it and an 400 exception will be thrown

document structure:
{
    "_index": "<indexName>",
    "_type": "_doc",
    "_id": "<documentId>",
    "_version": <version>,
    "_seq_no": <seqNumber>,
    "_primary_term": 1,
    "found": <bool>,
    "_source": <documentJson>
}

using:
also see 'ElasticSearch LOCAL.postman_collection.json'

// system information
GET http://localhost:9200/

// create a new document 
// if no id has provided, a new identity is auto created
// each execution - new document! use PUT to update an existing documents
// syntax: POST /<index>/_doc/<docId>
// syntax: POST /<index>/_doc
POST http://localhost:9200/users_ix/_doc/100
H: Content-Type: application/json
{
    "firstName": "John",
    "lastName": "Doe",
    "createdDate": "2019-07-02T14:33:49"
}

// auto _id is created
POST http://localhost:9200/users_ix/_doc
H: Content-Type: application/json
{
    "firstName": "John",
    "lastName": "Doe",
    "createdDate": "2019-07-02T14:33:49"
}

// if not exists - create an index and add a new document 
// if exists - update a document 
// syntax: PUT /<index>/_doc/<docId>
PUT http://localhost:9200/users_ix/_doc/1
H: Content-Type: application/json
{
    "firstName": "Roby",
    "lastName": "Cohen",
    "createdDate": "2019-07-01T14:33:49"
}

/*	
	create an index syntax:
	PUT /<indexName>

	"settings": { <settings> },
	"mappings": { <mappings> }
*/

// create an index
// must provide some settings
PUT http://localhost:9200/products_ix
{ 
    "settings":{
        "index":{
           "number_of_shards":"1",
           "number_of_replicas":"0"
         }
    }
}

// update document
// id 1 exists
PUT http://localhost:9200/users_ix/_doc/1
H: Content-Type: application/json
{
    "firstName": "Roby Updated",
    "lastName": "Cohen",
    "createdDate": "2019-07-01T14:33:49"
}

// get index information 
// syntax: GET /<index>
GET http://localhost:9200/users_ix

// get document
// syntax: GET /<index>/_doc/<docId>
GET http://localhost:9200/users_ix/_doc/1

// update partial document (add or update specific field/s)
POST http://localhost:9200/users_ix/_update/1
H: Content-Type: application/json
{
    "doc" : {
        "age" : 40
    }
}

// delete document
// syntax: DELETE /<index>/_doc/<docId>
DELETE http://localhost:9200/users_ix/_doc/1

// get multiple documents 
GET http://localhost:9200/users_ix/_doc/_mget
H: Content-Type: application/json
{
    "ids" : ["1", "2"]
}

// get multiple documents (advanced)
GET http://localhost:9200/_mget
H: Content-Type: application/json
{
    "docs" : [
        {
            "_index" : "users_ix",
            "_type" : "_doc",
            "_id" : "1"
        },
        {
            "_index" : "users_ix",
            "_type" : "_doc",
            "_id" : "2"
        }
    ]
}

/*
    condition syntax:	
	{ "match": { <fieldName>: <value> } }	
	---
	{ "match_phrase": { <fieldName>: <value> }}
	---
	{ 
		"range": { 
			<fieldName>: { 
				<range operator>: <value> 
			} 
		}
	}

	---------------

	aggregation syntax:
	{
		"aggregations": {
			"<fieldName>": {
				"range": {
					"field": "<fieldName>",
					"ranges": [
						{ "key": "<text>", "from": <from>, "to": <to> },
						...
						...
					]
				}
			}
		}
	}

	---------------

	search syntax:
	GET /_search

	"query": { 
		"<search operation>":  <condition>
	}
	---
	"query": { 
		"<search operation>":  <condition>
	},
	"sort": [
		{ "<fieldName>": "<desc|asc>" }
	]
	---
	"query": { 
		"<search operation>":  <condition>
	}
	"aggregations": { <aggregation> }
	---
	"query": { 
		"bool": {
			"<group type>": [ 
				"<search operation>":  <condition>,
				"<search operation>":  <condition>
				...
			]
		}		
	}
*/

// search all
GET http://localhost:9200/_search

// search all (same as the above)
GET http://localhost:9200/_search
H: Content-Type: application/json
{
  "query": {
    "match_all": {}
  }
}

// search for documents (get all in the specified index)
GET http://localhost:9200/users_ix/_search

// search by criteria
GET http://localhost:9200/users_ix/_search
H: Content-Type: application/json
{
  "query": {
    "match": {
      "firstName": "Roby"
    }
  }
}

// search by multiple criterias
GET http://localhost:9200/users_ix/_search
H: Content-Type: application/json
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "firstName": "Roby"
          }
        },
        {
          "match": {
            "lastName": "Cohen"
          }
        }
      ]
    }
  }
}

// search by criteria (NOT) 
// first name is not "John"
GET http://localhost:9200/products_ix/_search
H: Content-Type: application/json
{
  "query": {
    "bool": {
      "must_not": [
        {
          "match": {
            "firstName": "John"
          }
        }
      ]
    }
  }
}

// search by criteria (range) 
GET http://localhost:9200/products_ix/_search
H: Content-Type: application/json
{
  "query": {
    "range": {
      "price": {
        "gte": 35
      }
    }
  }
}

// with sort
GET http://localhost:9200/products_ix/_search
H: Content-Type: application/json
{
  "query": {
    "range": {
      "price": {
        "gte": 25
      }
    }
  },
  "sort": [
    {
      "price": "asc"
    }
  ]
}

// with aggregations
GET http://localhost:9200/products_ix/_search
H: Content-Type: application/json
{
  "aggregations": {
    "price": {
      "range": {
        "field": "price",
        "ranges": [
          {
            "key": "0-40",
            "from": 0,
            "to": 40
          },
          {
            "key": "40-100",
            "from": 40,
            "to": 100
          },
          {
            "key": "100-400",
            "from": 100,
            "to": 400
          }
        ]
      }
    }
  }
}



// create bulk of documents 
/* 
	syntax: 
	POST /_bulk

	<action>\n
	<source>\n (optional)
	...
	...
*/
POST http://localhost:9200/products_ix/_bulk
H: Content-Type: application/json
{ "create": { "_id": 1000 } }
{ "name": "productA", "unitsInStock": 300, "price": 310 }
{ "create": { "_id": 1001 }}
{ "name": "productB", "unitsInStock": 988,"price": 29.90 }
...
...

// sql queries
/*
	syntax:
	POST /_sql

	query:
	SELECT <fields>
	FROM <index>
	WHERE <conditions>
	ORDER BY <fields>
	LIMIT <count>
	
	"query": "<query>"
*/

// get all fields from products sort by price
POST http://localhost:9200/_sql
H: Content-Type: application/json
{
	"query": "SELECT * FROM products_ix ORDER BY price ASC" 
}

// get specific fields + condition + sort 
POST http://localhost:9200/_sql
H: Content-Type: application/json
{
	"query": "SELECT price FROM products_ix WHERE price > 40 ORDER BY price ASC" 
}

// result as raw text (instead of JSON)
POST http://localhost:9200/_sql?format=txt
H: Content-Type: application/json
{
	"query": "SELECT price FROM products_ix WHERE price > 40 ORDER BY price ASC" 
}

/*
	mapping:
	by default, the ElasticSearch engine map each field based on an inner logic. 
	we can change/ update the fields mapping using the '_mapping' service.
	e.g: to set a field as type 'geo_point' (instead of the default float) 	

	note!
	we can't change an existing data type mapping!
	we have to create a new index with the new mapping and reindex the data.
*/

// get index mapping
GET http://localhost:9200/stores_ix/_mapping

---

// create an index with mappings
PUT http://localhost:9200/stores_ix
H: Content-Type: application/json
{
   "mappings": {
	  "properties": {
		"coordinates": {
		  "type": "geo_point"
		}
	  }
   }
}

// create some documents with 'point' type
POST http://localhost:9200/stores_ix/_doc
H: Content-Type: application/json
{
	"name": "some store 1",
	"category": "food",
	"coordinates": { "lat" : 34.988, "lon": 32.122 }
}

POST http://localhost:9200/stores_ix/_doc
H: Content-Type: application/json
{
	"name": "some store 2",
	"category": "video games",
	"coordinates": { "lat" : 31.123, "lon": -122.099 }
}

// get index documents 
POST http://localhost:9200/_sql
H: Content-Type: application/json
{ "query": "SELECT * FROM stores_ix" }

---

Kibana:

(Side Menu) Dev Tools
provides a console to interact with the Elasticsearch engine 

(Side Menu) Discover 
provides a UI for the storage with the ability to use filters, customize the presented fields and more (similar to the sumo-logic dashboard)
it also allows us to save searches for later use and create our own visual-dashboard.

---

ETL?
Extract, transform, load

Beats? Logstash?

Cloud? Shared hosting? server?

Elasticsearch as primary db?

ElasticSearch and NoSQL ?


Elasticsearch does not have support for MapReduce.

Elasticsearch is not generally used as a primary database it works alongside SQL & NoSQL databases as a secondary database
Elasticsearch is commonly used in addition to another database

---

geo-search

// sort stores based on their proximity to position 0,0
// use 'plane' mode
// provide each distance in km unit
GET http://localhost:9200/stores_ix/_search
H: Content-Type: application/json
{
    "sort": [
     { 
        "_geo_distance": {
              "coordinates": {  "lat": 0,  "lon": 0 },
              "order": "asc",
              "unit": "km",
              "distance_type": "plane"
         }
      }
    ]
}

---

// TODO 
ElasticSearch vs Redis

---

// TODO
elasticsearch cloud engine
elasticsearch cli 
elasticsearch sql cli

---

// TODO
_search:
highlight 

---

// TODO
_analyze 

tokenizers: 
standard
whitespace

filter:
lowercase       // lowercase the tokens 
unique		// distinct, remove duplicate tokens

// analyze text
GET http://localhost:9200/users_ix/_analyze
{
  "tokenizer": "whitespace",
  "filter": ["lowercase", "unique"],
  "text": "EMAIL is is rcbuilder@walla.com"
}

// response
{
    "tokens": [
        {
            "token": "email",
            "start_offset": 0,
            "end_offset": 5,
            "type": "word",
            "position": 0
        },
        {
            "token": "is",
            "start_offset": 6,
            "end_offset": 8,
            "type": "word",
            "position": 1
        },
        {
            "token": "rcbuilder@walla.com",
            "start_offset": 12,
            "end_offset": 31,
            "type": "word",
            "position": 2
        }
    ]
}

---

issue:
X-Pack is not supported and Machine Learning is not available for [windows-x86]
also see 'Elasticsearch not starting on windows'

reason:
only 64bit supported 

solution:
The default Java version on java.com is 32 bit. 
download the 64 bit version.
-
issue:
Elasticsearch not starting on windows. X-Pack issues.

solution:
disable xpack

how to:
- open 'config/elasticsearch.yml'
- xpack.ml.enabled: false
-
issue:
Malformed action/metadata line, expected START_OBJECT but found [VALUE_STRING]

reason:
the json payload MUST be as a singleline per item!

solution:
{ "create": { "_id": 1001 }}
{ "name": "productB", "unitsInStock": 988, "price": 29.90 }