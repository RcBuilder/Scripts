******************************
***** Visual Studio Code *****
******************************

==============================
what is Visual Studio Code? 
Support
Reference
Updates
Keyboard Shortcuts
Manage Extensions
Market
Extensions
Working With VS Code
Tasks
Git
==============================



what is Visual Studio Code? 
---------------------------
a lightweight source code Editor which runs on your desktop and is available for Windows, macOS and Linux!
VS Code is an open source project.

Support
-------
Visual Studio Code has a built-in support for JavaScript, TypeScript and Node.js
and a lot of extensions for other languages (C++, C#, Java, Python, PHP, NativeScript etc.)

Reference
---------
https://code.visualstudio.com/
https://code.visualstudio.com/docs

Updates
-------
VS Code releases a new version each month
https://code.visualstudio.com/updates

Keyboard Shortcuts
------------------
shortcuts:
- File > Preferences > Keyboard Shortcuts
- https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf

edit:
we can change each shortcut to be any keyboard combination we'd like! 
- open 'Visual Studio Code' Editor
- use the Edit icon to the left of each defined shortcut
- set a new shortcut

note:
the shortcuts map is saved to the keybindings.json file and can be managed from there as well.

keymap Extensions:
- File > Preferences > Keymap Extensions // list of popular keymap extensions
- allow us to Use the keyboard shortcuts of other editors in VS Code by installing a Keymap extension.
  a great feature which allows us to use our familiar shortcuts from our old editor instead of learn new shortcuts!

tip: we can search the extensions for more keymaps (see 'Manage Extensions')

Manage Extensions
-----------------
we can add extensions via the Editor or the Market 
for some common extensions see 'Extensions' 

Editor:
- open the 'Visual Studio Code' Editor  
- Settings Icon (the left-bottom cog-wheel)
  note: can use View > Extensions
- Manage Extensions
- Search for the desired extension > install 

- note
  Extensions represents the content of the market place, 
  so each search actually performs a search on the market from within the editor!

- tip
  we can reach the Extensions manager from the left menu (see 'Working With VS Code')
  we can reach it using the Ctrl + Shift + X shortcut

Market:
see 'Market' 

Market
------
https://marketplace.visualstudio.com/vscode

Extensions
----------
- vscode-icons
  an improved UI experience using icons set 
  https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons

- C# 
  support for C# code	
  https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp

- nativescript 
  support for nativescript apps
  https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript

- Debugger for Chrome
  debug JavaScript code in the Google Chrome browser
  https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome

- XML Tools
  XML Formatting, XQuery, and XPath Tools
  https://marketplace.visualstudio.com/items?itemName=DotJoshJohnson.xml

- ESLint
  JavaScript linting to improve our code
  https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint

- IIS Express
  allows us to run the current folder as a website in IIS Express
  https://marketplace.visualstudio.com/items?itemName=warren-buckley.iis-express

- GitHub
  Integrates GitHub and its workflows into vscode
  https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-github

- GitLab
  Integrates GitLab and its workflows into vscode
  https://marketplace.visualstudio.com/items?itemName=rrivera.vscode-gitlab-explorer

Working With VS Code
--------------------

open via the console:
to open vs-code from the console use the command 'code'
to open the current folder use 'code .'
> code .

activity bar:
at the left, we have a stripe menu with the following views:
- File Explorer
- Search 
- Source Code
- Debug 
- Extensions

---

Views:
use the 'open view' command to open a view (file explorer, debug, extensions etc.)

1. open the 'all commands list' terminal using the Ctrl + Shift + P shortcut.
2. > open view > enter
3. choose the view to open from the list 

---

shortcuts:
- all commands list
  Ctrl + Shift + P 

- go to file
  Ctrl + P 

- find in files
  Ctrl + Shift + F

- view Extensions
  Ctrl + Shift + X

- start debugging
  F5

- go to line number
  Ctrl + G

- undo cursor position
  Ctrl + U

- trim trailing whitespace
  Ctrl + K and then Ctrl + X

- code folding
  Ctrl + Shift + [ 
  Ctrl + Shift + ]
 
- select current line
  Ctrl + I

- IntelliSense
  Ctrl + Space

- peek definition
  Ctrl + Shift + F12

- go to definition
  F12

- find all references
  Shift + F12

---

Split Editor:
use the top-right button to split editors. each click adds another editor to the right. 
use Ctrl + 1,2,3 to switch between open editors (left-center-right) 

---

Themes:
- open 'all commands list' (Ctrl + Shift + P) 
- search per 'color theme'
- choose a theme from the list

---

Settings:
we open the editor settings using the UI in one of the following ways:
- Ctrl + Shift + P > Settings 
- File > Preferences > Settings
- left-bottom cog-wheel > Settings

or in json view 
- Ctrl + Shift + P > Settings (JSON)

at the left pane we'll find the default settings whereas in the right it's our customization.
we can override each of the default pre-defined settings (left pane) and even specifies a language-specific settings.

note
we can set a global or folder settings. all settings saved to settings.json file!
%APPDATA%\Code\User\settings.json

reference
https://code.visualstudio.com/docs/getstarted/settings

---

MS Syntax:
VS Code comes with a built-in MS-syntax feature. 
depending on the page type we are in, we get a powerful tool which makes our coding better and easier. 

e.g: for html type
write '!' and then click on 'tab' to generate a basic html page template
write tag name (h1 etc.) then 'tab' to create an html tag with it's enclosing tag (<h1></h1>)
write 'link' then 'tab' to get a link tag to a css file.

---

Search:
supports free-text or regEx patterns.
supports replace matches feature. 

---

Editors view type:
we can choose the way our editors are presented (single, two columns, grid etc.)
a grid view, for example, splits the editor area into 2x2 smaller areas which can fit to 4 different editors.

View > Editor Layout

e.g: 
View > Editor Layout > Grid (2x2)

---

Windows:
- OUTPUT (Ctrl + Shift + U)

- DEBUG CONSOLE (Ctrl + Shift + Y)
  this window show us the debbuger output.
  any output from the debbuging code will be written to this window.
  see 'Debug'

- TERMINAL
  an integrated terminal.
  in this window we can execute commands. 
  the output of the executed code will be written to this window.

  e.g: // execute a single js file using the node engine 
  > node test.js 

---

Debug:
- windows:
  click the 'debug' item on the activity bar to show the debugger related windows.
  we can find the following windows there: Variables, Watch, Call Stack and Breakpoints.

- Output:
  open the DEBUG CONSOLE window to see the debugging related output 
  can use the Ctrl + Shift + Y shortcut

- profiles/ configurations:
  with VS Code we can create our own debugging profiles!
  the profiles are json based and located within the '.vscode' folder. 
  the file name is 'launch.json' and it contains a 'configurations' section.

  once a profile has created, it will be automatically add to the dropdown menu of the Debug play button. 
  so we can create a few different profiles for different tasks/ apps and choose which one to execute.

  the profiles dropdown menu located near the debug play button at the top of the debug window. 

  to generate a new debug profile: 
  1. choose 'Add Configuration' option from the profiles dropdown menu > the launch.json file will be shown at the right pane.
  2. within the 'configurations' section - set the profile type, request, name and the command to execute.
     note: click the 'Add Configuration' big soft-blue button a the right-bottom.
  3. save     
  4. the profile will be added to the profiles dropdown menu!   

  // launch.json
  // in the below sample, two profiles has defined - App1 amd App2
  // we should see them both in the profiles dropdown menu
  e.g: 
  {
       "type": "node",
       "request": "attach",
       "name": "site1 (port 3000)",
       "port": 3000
  },
  {
      "type": "node",
      "request": "attach",
      "name": "pick process",
      "processId": "${command:PickProcess}"
  },
  {
      "type": "node",
      "request": "launch",
      "name": "app1",
      "program": "${workspaceFolder}/app\\app.js"
  },
  {
      "type": "node",
      "request": "launch",
      "name": "app2",
      "program": "${workspaceFolder}/app\\app2.js"
  }
  
  common debug profile request types:
  - Attach
  - Launch
  - Attach to Process 

Tasks
-----
// TODO

Git
---
- windows:
  click the 'Source Code' item on the activity bar to show the source code related windows.  

- Git Output:
  we can show the git output, which shows all git commands the VS Code uses to integrate with the git repositories.
  to bring-up the git output window: 
  1. open the 'Source Code' menu item 
  2. click the 3 dots at the top (...) 
  3. choose 'Show git output'

- Git Commands:  
  1. click Ctrl + Shift + P to brings-up the 'all commands list' terminal 
  2. use the git commands (e.g: git pull)

- Git Basic:
  1. open the 'Source Code' menu item 
  2. click the 3 dots at the top (...)
  3. we'll find there most of the familiar git commands .. 
     (undo last commit, pull, push, sync, commit, stage etc.)


