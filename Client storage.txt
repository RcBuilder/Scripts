Client storage
--------------

types:
1. localStorage
2. sessionStorage
3. webSQL
4. indexedDB

devTools:
we can see the content of the storage (all types) using the devTools (F12)
F12 > Application (tab) > Storage (left pane)

access data:
the storage is unique per origin which defined as protocol://host:port combination! 
all data is saved per origin and share the same segregation rules as the 'same origin policy'.
note that http and https have different storage!

---

1. localStorage:
   client db based on key-value pairs.
   it stores the data with no expiration date.
   limited to apprx. 5MB.
   localstorage is sync.

   methods:
   setItem(<key: string>, <value: any>);
   getItem(<key>);
   removeItem(<key>);
   clear();
   key(<index>);  // get key by index

   store objects:
   in order to store objects we must use the JSON.stringify() to serialize the object as string. 
   an attempt to store an object without stringify it - will save the string "[object Object]" 
   due to an auto-call to the toString method.
   use JSON.parse() to deserialize the string format back as an object!

   setItem(<key>, JSON.stringify(<object>));
   JSON.parse(getItem(<key>));

   sample: 
   localStorage.setItem("name", "roby");
   var name = localStorage.getItem("name");   
 
   localStorage.setItem("user", JSON.stringify({ id: 1, name: 'roby' }));
   var user = JSON.parse(localStorage.getItem("user"));     

   var keyName = localStorage.key(1);
  
---

2. sessionStorage:
   same as localstorage but only for one session. 
   data is lost when the browser tab is closed.

---

3. webSQL:
   client RDBMS which uses a common SQL syntax!
   it is NOT part of the HTML5 specification.
   webSQL is async.

   methods:
   database openDatabase(<name: string>, <version: int>, <description: string>, <size (bytes): int>);  // create/ open a database
   <database>.transaction(tx => { }) // open transaction
   <transaction>.executeSql(<query: string>, <params: [string]>, (tx, results) => {}) // execute an sql query 

   parameters:
   to pass parameters to the query, just use '?' within the query-text and add an array of variables in the 'params' argument of the 'executeSql' method. 
   the webSQL engine replaces the params array with the corresponding '?' sign.
   e.g: tx.executeSql('UPDATE USERS SET name = ? WHERE id = ?', ["avi-c", 2]); 

   using:
   var db = openDatabase(....);
   db.transaction(tx => { 
	tx.executeSql(....); 
	....
	....
   });

   browser support:
   check if the object is not null to confirm that the browser supports webSQL: 
   if(!openDatabase) return; // or window.openDatabase

   sample: 
   var db = openDatabase('users', 1, '', 1024 * 1024 * 2); // create users db of 2mb
   
   // create a table and add some rows
   db.transaction(tx => { 
	tx.executeSql('CREATE TABLE USERS (id unique, name)'); 
        tx.executeSql('INSERT INTO USERS (id, name) VALUES (1, "roby")'); 
        tx.executeSql('INSERT INTO USERS (id, name) VALUES (2, "avi")'); 
   });

   // update 
   db.transaction(tx => { 	        
        tx.executeSql('UPDATE USERS SET name = "avi-c" WHERE id = 2'); 
   });   

   // update using params
   db.transaction(tx => { 	        
        tx.executeSql('UPDATE USERS SET name = ? WHERE id = ?', ["avi-c", 2]); 
   });  

   // read 
   db.transaction(tx => { 	        
        tx.executeSql('SELECT * FROM USERS', [], (tx, results) => {
	    console.log(results.rows.length + ' rows');  // rowcount

	    for(var i=0; i < results.rows.length; i++)  // read received rows
		console.log(results.rows.item(i));  // user
	}); 
   });    

---

4. indexedDB:
   a low-level API for client-side storage.
   it uses indexes to enable high-performance searches of this data.
   indexedDB is async.

   methods:
   database open(<name: string>, <version: int>, <upgradeDB: function>);  // open or create a database
   <database>.createObjectStore(<table: string>, <options: storeOptions>); // create a table
   <database>.deleteObjectStore(<table: string>); // delete a table
   <database>.transaction(<tables: [string]>, <permissions: string>); // open transaction   
   <transaction>.objectStore(<table: string>); // get table (objectStore)
   <transaction>.objectStoreNames; // get table list
   <transaction>.objectStoreNames.contains(<table: string>); // check if table exists
   <objectStore>.<action>
   deleteDatabase(<name: string>);

   init:
   var db = null;
   var request = window.indexedDB.open(<databaseName>, <version>);
   request.onerror = function(event) { };         
   request.onsuccess = function(event) { db = request.result; };         
   request.onupgradeneeded = function(event) { 
		var db = event.target.result;
		// create your tables here ... 
   }

   storeOptions:
   keyPath: <key: string>
   autoIncrement: <bool>

   actions:
   CRUD (add, get, put, delete)
   getAll
   index
   createIndex

   permissions:
   readonly   
   readwrite

   create tables (schema):
   we cannot create tables after the initialization of the database! 
   we MUST create them on the 'onupgradeneeded' function.

   using:
   1. init   
   2. do some actions
      var table = db.transaction(<tables>, <permissions>).objectStore(<table>);      
      table.<action>  // see 'actions'

   browser compatibility:   
   window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
   window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
   window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

   browser support:
   check if the object is not null to confirm that the browser supports indexedDB   
   if(!indexedDB) return; // or window.indexedDB

   version:
   for any version change, the upgradeDB callback will be called.
   indexedDB.open('testDB', 2, function(upgradeDB){ ... });

   sample:    
   // browser compatibility 
   window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
   window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
   window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

   // open or create a database
   var db = null;
   var request = indexedDB.open('TestDB', 1);
   
   // register events 
   request.onerror = function(event) { console.log('could not open indexDB. error: ' + this.errorCode); };         
   request.onsuccess = function(event) { db = request.result; };         
   request.onupgradeneeded = function(event) {
		var db = event.target.result; 		
		db.createObjectStore('USERS', { keyPath: 'id' }); // create a table 
   }

   // get table list
   var tableList = db.transaction(['USERS'], "readonly").objectStoreNames;
   console.log(tableList); // {0: "USERS", length: 1}

   // add    
   var users = db.transaction(['USERS'], "readwrite").objectStore('USERS');
   users.add({ id: 10, name: 'Roby' }); 
   users.add({ id: 11, name: 'Avi' }); 
   
   // get
   var users = db.transaction(['USERS'], "readonly").objectStore('USERS');
   var request = users.get(11);
   request.onsuccess = function(event){
		var user = request.result;
		console.log(user);  // {id: 11, name: "Avi"}
   }

   // delete
   var users = db.transaction(['USERS'], "readwrite").objectStore('USERS');
   var request = users.delete(11);
   request.onsuccess = function(event){}

   // update 
   var users = db.transaction(['USERS'], "readwrite").objectStore('USERS');
   users.put({ id: 10, name: 'Roby-updated' });    

   // get all
   var users = db.transaction(['USERS'], "readwrite").objectStore('USERS');
   var request = users.openCursor();
   request.onsuccess = function(event){
		var dr = event.target.result;
		if(dr){
			console.log(dr.value);  // print current user
			dr.continue();
		}
   }