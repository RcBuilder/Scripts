var EMAIL = 'RcBuilder@walla.com';
var CLICKS = 2;
var CAMPAIGN_ID = 266841030;
var DATE_RANGE = 'LAST_30_DAYS'; // '20150101,20170101'

function main() {
  var htmlService = HTMLBuilderService();
  var adManagerService = AdManagerService();
    
  /*
  var textAd = AdsApp.ads()    
    .withCondition('Type IN [EXPANDED_TEXT_AD]')
    .withCondition('Status = ENABLED')
    .withLimit(1)
    .get().next().asType().expandedTextAd();
    
  var newAd = copyAd(adManagerService, textAd.getAdGroup(), textAd);
  return;
  */
  
  /*
  var campaign = AdWordsApp.campaigns().withIds([CAMPAIGN_ID]).get().next();
  var res = adManagerService.getAdGroupByName(campaign, 'another AdGroup');
  Logger.log(res.getId().toString());
  return;
  */
  
  var reportConfig = {
    includeZeroImpressions: false
  };
  var report = AdWordsApp.report(
   'SELECT Query,Clicks,Conversions,AverageCpc,AdGroupId,AdGroupName,CampaignId ' +
   'FROM SEARCH_QUERY_PERFORMANCE_REPORT ' +
   'WHERE Clicks > ' + CLICKS + ' ' +  
   'AND CampaignId = ' + CAMPAIGN_ID + ' ' +
   'DURING ' + DATE_RANGE, reportConfig);
 
  var matches = 0;  
  
  var rows = report.rows();  
  while(rows.hasNext()) {
    var row = rows.next();
    
    var clicks = row['Clicks'];    
	var adGroupId = row['AdGroupId'];
    var campaignId = row['CampaignId'];
        
    var query = row['Query'];
    Logger.log('[%s] %s clicks', query, clicks);
    
    var adGroup = adManagerService.getAdGroupById(adGroupId); 
    var campaign = adManagerService.getCampaignById(campaignId);    
    
    var newAdGroupName = adManagerService.clearKeywordSpacers(query);    
    var newAdGroupExists = adManagerService.checkIfAdGroupExistsByName(campaign, newAdGroupName);
    
    if(newAdGroupExists) {
      Logger.log('new adgroup already exists - skip query');
      continue;
    }
       
    var defaultBid = row['AverageCpc'];        
    var newAdGroup = adManagerService.createAdGroup(campaign, newAdGroupName, defaultBid);           
    if(!newAdGroup) {
      Logger.log('error while creating an adgroup - skip query');
      continue;
    }
    
    Logger.log('new adgroup created!');
    
    var textAd = adGroup.ads()    
    .withCondition('Type IN [EXPANDED_TEXT_AD]')
    .withCondition('Status = ENABLED')
    .withLimit(1)
    .get().next().asType().expandedTextAd();
    
    var newAd = copyAd(adManagerService, newAdGroup, textAd);
    if(!newAd) {
      Logger.log('error while coping the text ad - skip query');
      continue;
    }
         
    var keywords = [ 
      '[' + query + ']', 
      '"' + query + '"', 
      '+' + query.split(' ').join(' +'),      
    ];
    
    Logger.log(keywords);
    
    
    Logger.log('adding keywords to the new adgroup %s', newAdGroupName);
    adManagerService.createKeywords(newAdGroup, keywords);     
    
    var adGroupName = row['AdGroupName'];
    Logger.log('adding negative keywords to the old adgroup %s', adGroupName);
    adManagerService.createNegativeKeywords(adGroup, keywords); 
    
    matches++;            
    htmlService.add('<p>[' + query + '] ' + clicks + ' clicks -> newAdGroup: ' + newAdGroupName + '</p>');        
  }
  
  if(matches > 0){    
    MailApp.sendEmail(EMAIL, 'Queries 2 Keywords', '', { 
      htmlBody: htmlService.get() 
    });
  }
}
function copyAd(adManagerService, adGroup, textAd){
  var header1 = textAd.getHeadlinePart1();
	var header2 = textAd.getHeadlinePart2();
  var header3 = textAd.getHeadlinePart3();
	var description1 = textAd.getDescription1();
  var description2 = textAd.getDescription2();
	var destinationURL = textAd.urls().getFinalUrl();
	var partURL1 = textAd.getPath1();
	var partURL2 = textAd.getPath2();
  
	return adManagerService.createAd(
	  adGroup, 
	  header1, 
	  header2, 
    header3,
	  description1, 
    description2,
	  destinationURL, 
	  partURL1, 
	  partURL2
	);
}
function dateFormat(date){
  var year = date.getFullYear().toString();
  var month = (date.getMonth() + 1).toString();
  var day = date.getDate().toString();
  
  if(month.length == 1) month = '0' + month; // return yyyyMMdd
  if(day.length == 1) day = '0' + day;
  
  return year + month + day;
}

// ----------------------------------------------

// HTML BUILDER SERVICE
var HTMLBuilderService = function(){
  var _html = '';
  
  return {
    add: function(content){
      _html += content;
    },
    get: function(){
      return _html;
    }
  };
}

// AD MANAGER SERVICE
var AdManagerService = function() { 
  return{
    createAdGroup: function(campaign, adGroupName, defaultBid){
      var adGroupBuilder = campaign.newAdGroupBuilder();
      var operation = adGroupBuilder
      .withName(adGroupName)
      .withCpc(defaultBid)
      // .withStatus('ENABLED')
      .build();
      
      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },
    // createAd: function(adGroup, header1, header2, description, destinationURL, pathURL1, pathURL2)
    createAd: function(adGroup, header1, header2, header3, description1, description2, destinationURL, pathURL1, pathURL2){     
      if(this.countWithoutKeywordInsertion(header1) > 30)
        header1 = header1.substr(0, 29);
      if(this.countWithoutKeywordInsertion(header2) > 30)
        header2 = header2.substr(0, 29);
      if(this.countWithoutKeywordInsertion(description1) > 90)
        description1 = description1.substr(0, 89);
     
      var builder = adGroup.newAd().expandedTextAdBuilder()
      .withHeadlinePart1(header1) // 30 characters      
      .withHeadlinePart2(header2) // 30 characters
      .withDescription1(description1) // 90 characters      
      .withFinalUrl(destinationURL) // 255 characters    
      .withMobileFinalUrl(destinationURL);
      
      /* parameters:
      
         syntax:
         {param<num>:<default value>}
         
         e.g: 
         product {param1: 'some product'} for only {param2: 0} $ - buy now!
      */

      if(pathURL1 && this.countWithoutKeywordInsertion(pathURL1) <= 15)     
        builder.withPath1(pathURL1); // 15 characters (the first part after the siteURL) e.g: http://mydomain.com/pathURL1/pathURL2      
      
      if(pathURL2 && this.countWithoutKeywordInsertion(pathURL2) <= 15)
        builder.withPath2(pathURL2); // 15 characters (the second part after the siteURL)

      if(header3){
      	if(header3.length > 30)
        	header3 = header3.substr(0, 29);
        
        builder.withHeadlinePart3(header3) // 30 characters
      }
      
      if(description2){
      	if(description2.length > 90)
        description2 = description2.substr(0, 89);
        
        builder.withDescription2(description2) // 90 characters  
      }
      
      var operation = builder.build();
      
      if(!operation.isSuccessful())
      {
        Logger.log('createAd error: %s', operation.getErrors())
        return null;
      }
      
      return operation.getResult();
    },        
    createKeywords: function(adGroup, arrKeywods){
      
      /* types:
         BROAD, PHRASE, EXACT
         
         e.g:
         BROAD: 'word'
         PHRASE: '"word"'
         EXACT: '[word]'        
      */
      
      for(i in arrKeywods){
        var keyword = arrKeywods[i];                        
        var operation = adGroup.newKeywordBuilder()        
        .withText(keyword)       
        // .withCpc(1.0)
        .build();        
      }
    },
    createNegativeKeywords: function(adGroup, arrKeywods){
      for(i in arrKeywods){
        var keyword = arrKeywods[i];
        adGroup.createNegativeKeyword(keyword);
      }
    }, 
    countWithoutKeywordInsertion: function(input){      
      /*
        // the value does not include a keyword insertion - return it as is 
        if(input.indexOf('{') == -1 && input.indexOf('}') == -1) 
          return input;
      */
      
      var keywordInsertionPattern = /{\s*(KeyWord|param[1-3])\s*:(.*?)\s*}/ig;
      return input.replace(keywordInsertionPattern, '$2').length;      	
    },    
    /*
	   important! 
	   use it before you add your match type signs! (calling the createKeywords method)
	   in order to prevent a deletion of those legitimate chars which add to represent the keyword match type ("keyword", [keyword], +keyword)

       Logger.log(adManagerService.clearKeyword('A!@%,*B'));
       Logger.log(adManagerService.clearKeyword('12%34'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K L M N O P'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K    L M N      O       P', true));
    */
    clearKeyword: function(keyword, clearSpacers){
      var specialCharacters = ['!','@','%',',','*','(',')','.','&quot;','&','`',';','\'','-','"','+','[',']'];
      var maxWordsAllowed = 10;
      
      // non allowed characters
      // [error] Keywords cannot contain non-standard characters like: ! @ % , *
      for(i in specialCharacters)
      {
        var c = specialCharacters[i];
        if(keyword.indexOf(c) == -1) continue;
        keyword = keyword.split(c).join(''); // replace all
      }      
      
      // two many words
      // [error] Keywords cannot contain more than 10 words
      if(keyword.split(' ').length > maxWordsAllowed)
        keyword = keyword.split(' ').slice(0, 9).join(' '); // remove words
        
      if(clearSpacers == true)
        keyword = this.clearKeywordSpacers(keyword);
      
      return keyword;
    },
    clearKeywordSpacers : function (input){
		var arrWords = input.split(' ');
		if(arrWords.length == 1) {
		// Logger.log('single word: /%s/', input);
		return input;
		}

		// clear extra middle spaces ('A B C' -> 'A B C')
		var temp = [];
		for(i in arrWords){ 
		var word = arrWords[i].trim();
		if(word == '' || word.length == 1) continue; 
		// Logger.log('word: /%s/', word);
		temp.push(word); 
		} 

		var output = temp.join(' ');
		// Logger.log('input: /%s/', input);
		// Logger.log('output: /%s/', output);
		return output; 
	},
    setKeywordParams: function(keyword, param1Value, param2Value, param3Value){      
      if(param1Value)
        keyword.setAdParam(1, param1Value);
      
      if(param2Value)
        keyword.setAdParam(2, param2Value);
      
      if(param3Value)
        keyword.setAdParam(3, param3Value);
    },
    getAds: function(campaign){
      var ads = [];
      
      var adsIter = campaign.ads()
      .withCondition('Type = EXPANDED_TEXT_AD')
      .withCondition('Status IN [ENABLED,PAUSED]')
      .get();
      
      while(adsIter.hasNext())      
        ads.push(adsIter.next().asType().expandedTextAd());
      
      return ads;      
    },    
    checkIfAdExistsByTitle: function(campaign, adTitle){
      var ads = this.getAds(campaign);
      for(i in ads)
        if(ads[i].getHeadlinePart1() == adTitle)
          return true;
      return false;
    },
    checkIfAdGroupExistsByName: function(campaign, adGroupName){
      return this.getAdGroupByName(campaign, adGroupName) != null;
    },
    getAdGroupByName: function(campaign, adGroupName){
      var adgroup = campaign.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withCondition('Name = "' + adGroupName + '"')
      .get()
      
      if(adgroup.hasNext())
        return adgroup.next();
      return null;
    },
    getAdGroupById: function(adGroupId){            
      var adgroup = AdWordsApp.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([adGroupId])
      .get()
      
      if(adgroup.hasNext())
        return adgroup.next();
      return null;
    },
    getCampaignById: function(campaignId){            
      var campaign = AdWordsApp.campaigns()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([campaignId])
      .get()
      
      if(campaign.hasNext())
        return campaign.next();
      return null;
    },
    checkIfKeywordExists: function(campaign, keywordText){
      return campaign.keywords()
      .withCondition('Text = \'' + keywordText + '\'')
      .get()
      .hasNext();
    },
  };
}