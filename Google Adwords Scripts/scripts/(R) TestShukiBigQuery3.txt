var MODE = 1; // 1 for all-time data, 2 for yesterday

var YEARS = 30;
var PROJECT_ID = 'YOUR_PROJECT_ID'; // Replace with your GCP project ID
var DATASET_ID = 'YOUR_DATASET_ID'; // Replace with your BigQuery dataset ID
var TABLE_ID = ''; // keep empty, will be updated in the script 

var testMode = 0;  // 1 = ON, 0 = OFF

function main() {  
    var currentAcount = AdWordsApp.currentAccount();
    var accountName = currentAcount.getCustomerId();
    TABLE_ID = accountName;
    Logger.log("Account ID (Table ID): " + TABLE_ID); 
    
    var dateRange = getDateRange();
    var dateRangeArr = dateRange.split(','); 
    var dateFilter = '';
  
    if(MODE == 1) {
      dateFilter = `BETWEEN ${dateRangeArr[0]} AND ${dateRangeArr[1]}`;
    } else {
      dateFilter = 'DURING YESTERDAY';
    }
      
    var report = fetchReport(dateFilter);  
  
    if(testMode == '1')
      return;
      
    var tableReady = checkAndCreateTable(); 
    if (!tableReady) {
        Logger.log("Unable to proceed: Table is not ready.");
        return;
    }

    if (!report.rows().hasNext()) {
        Logger.log("Report has no rows");
    } else {
        Logger.log("Report has rows, preparing to push");
        var rows = getRowsFromReport(report);
        pushDataToBigQuery(rows);
    }
}

function fetchReport(dateFilter) {
    var reportConfig = {};    

    var reportQuery = 'SELECT ' +
                      'campaign.id, campaign.name, ad_group.id, ad_group.name, ad_group_criterion.criterion_id, ad_group_criterion.keyword.text, customer.descriptive_name, segments.date, ' +
                      'metrics.impressions, metrics.clicks, metrics.conversions, metrics.ctr, metrics.cost_per_conversion, metrics.cost_micros, metrics.conversions_value, ' +                      
                      'metrics.average_cpc, segments.device, metrics.search_impression_share ' +
                      'FROM keyword_view ' +
                      'WHERE ad_group_criterion.status = ENABLED ' +  
                      'AND ad_group_criterion.negative = FALSE ' +             
                      'AND segments.date ' + dateFilter;
  
    Logger.log(reportQuery);
  
    var report = AdWordsApp.report(reportQuery, reportConfig);    
    return report;
}

function getRowsFromReport(report) {
    var rows = [];
    var reportRows = report.rows();
    while (reportRows.hasNext()) {
        var row = reportRows.next();
        rows.push({
            campaignId: row['campaign.id'],
            campaignName: row['campaign.name'],
            adGroupId: row['ad_group.id'],
            adGroupName: row['ad_group.name'],
            keywordId: row['ad_group_criterion.criterion_id'],
            keyword: row['ad_group_criterion.keyword.text'],
            accountName: row['customer.descriptive_name'],
            date: row['segments.date'],
            impressions: row['metrics.impressions'],
            clicks: row['metrics.clicks'],
            conversions: row['metrics.conversions'],
            ctr: row['metrics.ctr'],
            cpa: row['metrics.cost_per_conversion'],
            cost: (parseFloat(row['metrics.cost_micros']) / 1000000).toFixed(2), // Convert micros to currency
            conversionValue: row['metrics.conversions_value'],
            averageCpc: row['metrics.average_cpc'],
            device: row['segments.device'],
            searchImpressionShare: row['metrics.search_impression_share']
        });
    }
    return rows;
}

function checkAndCreateTable() {
    try {
        var tables = BigQuery.Tables.list(PROJECT_ID, DATASET_ID);
        
        if (!tables || !tables.tables) {
            Logger.log("No tables found or unexpected response structure. Creating new table...");
            return createTable();
        }
        
        var tableExists = tables.tables.some(function(table) {
            return table.tableReference.tableId === TABLE_ID;
        });

        if (!tableExists) {
            Logger.log("Table does not exist. Creating table...");
            return createTable();
        } else {
            Logger.log("Table already exists.");
            return true;
        }
    } catch (e) {
        Logger.log("Error checking/creating table: " + e.toString());
        return false;
    }
}

function createTable() {
    var table = {
        tableReference: {
            projectId: PROJECT_ID,
            datasetId: DATASET_ID,
            tableId: TABLE_ID
        },
        schema: {
            fields: [
                {name: 'campaignId', type: 'STRING'},
                {name: 'campaignName', type: 'STRING'},
                {name: 'adGroupId', type: 'STRING'},
                {name: 'adGroupName', type: 'STRING'},
                {name: 'keywordId', type: 'STRING'},
                {name: 'keyword', type: 'STRING'},
                {name: 'accountName', type: 'STRING'},
                {name: 'date', type: 'STRING'},
                {name: 'impressions', type: 'STRING'},
                {name: 'clicks', type: 'STRING'},
                {name: 'conversions', type: 'STRING'},
                {name: 'ctr', type: 'STRING'},
                {name: 'cpa', type: 'STRING'},
                {name: 'cost', type: 'STRING'},
                {name: 'conversionValue', type: 'STRING'},
                {name: 'averageCpc', type: 'STRING'},
                {name: 'device', type: 'STRING'},
                {name: 'searchImpressionShare', type: 'STRING'}
            ]
        }
    };
    
    try {
        BigQuery.Tables.insert(table, PROJECT_ID, DATASET_ID);
        Logger.log("Table created successfully.");
        return true;
    } catch (e) {
        Logger.log("Error creating table: " + e.toString());
        return false;
    }
}

function pushDataToBigQuery(rows) {
    if (rows.length === 0) {
        Logger.log("No data to push");
        return;
    }

    Logger.log("Attempting to push " + rows.length + " rows to BigQuery");
    Logger.log("PROJECT_ID: " + PROJECT_ID);
    Logger.log("DATASET_ID: " + DATASET_ID);
    Logger.log("TABLE_ID: " + TABLE_ID);

    var data = [];
    for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        data.push({
            insertId: String(i),
            json: row
        });
    }

    var request = {
        rows: data
    };

    try {
        var response = BigQuery.Tabledata.insertAll(request, PROJECT_ID, DATASET_ID, TABLE_ID);

        if (response.insertErrors && response.insertErrors.length > 0) {
            Logger.log("Insert errors: " + JSON.stringify(response.insertErrors));
        } else {
            Logger.log("Data successfully inserted to BigQuery");
        }
    } catch (e) {
        Logger.log("Error inserting data: " + e.toString());
    }
}

function getDateRange() {
  var endDate = new Date();
  endDate.setDate(endDate.getDate() - 1);  // This sets the end date to yesterday
  var startDate = new Date();
  startDate.setFullYear(startDate.getFullYear() - YEARS);
  return formatDate(startDate) + ',' + formatDate(endDate);  
}

function formatDate(date) {
    var year = date.getFullYear();
    var month = ('0' + (date.getMonth() + 1)).slice(-2);
    var day = ('0' + date.getDate()).slice(-2);
    
    return year + month + day;
}

// Run the main function
main();