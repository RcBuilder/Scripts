// https://developers.google.com/adwords/api/docs/appendix/reports/keywords-performance-report

/*
    Type: 
    QualityScoreBucket

    Enum:
    UNKNOWN
    BELOW_AVERAGE  // Below average
    AVERAGE  // Average
    ABOVE_AVERAGE  // Above average

    Metrics:
    CreativeQualityScore // ad relevance
    SearchPredictedCtr // expected CTR
    PostClickQualityScore // landing page experience
*/

/*
    // convert text result to numeric weight 
    // type: QualityScoreBucket
    // Above average = 3, Average = 2, Below average = 1 
    result2weight(value);
*/

/*
    // totalPointsAvailable -> totals.rowCount * 3 = the max points available (100%)
    // e.g: (totals.predictedCtr / totalPointsAvailable) * 100
    var totalPointsAvailable = totals.rowCount * 3;
         
    var predictedCtr = (totals.predictedCtr / totalPointsAvailable) * 100
    var adRelevance = (totals.adRelevance / totalPointsAvailable) * 100
    var landingPageExperience = (totals.landingPageExperience / totalPointsAvailable) * 100
*/

var KW_MIN_IMPRESSIONS = 5;
var ACC_MIN_CLICKS = 1;
var SHEET_NAME = 'QualityScore_Elements_Monitor';
var LABEL_ACCOUNT = 'Primary';

function main() {  
  var sheetService = SpreadsheetLoader.loadSheetService(SHEET_NAME);
  var createNewSheet = !sheetService;
  if(createNewSheet)  
    sheetService = SpreadsheetLoader.createSheetService(SHEET_NAME);  
  
  var qualityScoreMonitorService = QualityScoreMonitorService(sheetService);
  if(createNewSheet)
    qualityScoreMonitorService.addHeader();
  
  // --
  
  var accounts = MccApp.accounts().withCondition("LabelNames CONTAINS '" + LABEL_ACCOUNT + "'").get();

  while (accounts.hasNext()) {
    var account = accounts.next();
    var accountName = account.getName() ? account.getName() : '--';
    Logger.log('account #%s %s', account.getCustomerId(), accountName);

    MccApp.select(account); 
    execute(qualityScoreMonitorService, account);   
    
    Logger.log('-----------------------');
  }
}

function execute(qualityScoreMonitorService, account) {
  var acc_clicks = getAccountClicks();
  if(acc_clicks < ACC_MIN_CLICKS)
  {
    Logger.log('ACC_MIN_CLICKS threshold: %s [%s]', acc_clicks, ACC_MIN_CLICKS);
    return;
  }
  
  var totals = calculateQSTotals();
    
  Logger.log(totals);       
  
  var accountId = account.getCustomerId();
  var accountName = account.getName();
  qualityScoreMonitorService.saveNewTotals(totals, accountId, accountName);
}

function getAccountClicks() {
  try{
    var stats = AdWordsApp.currentAccount().getStatsFor('LAST_30_DAYS');
    if(!stats)
      return 0;
    return stats.getClicks();
  }
  catch(ex){
    Logger.log('[exception] %s', ex.message);
    return 0;
  }
}

function calculateQSTotals() {
  
  var totals = { 
    rowCount: 0, QualityScore: 0, predictedCtr: 0, adRelevance: 0, landingPageExperience: 0 
  };
  
  var rows = getKeywordsReport();
  
  while (rows.hasNext())
  {
    var row = rows.next();
    
    var id = row['Id'];
    var text = row['Criteria'];
    var qs = parseInt(row['QualityScore']);
    
    //Logger.log('[#%s] "%s" QS: %s', id, text, qs);    
    //Logger.log('predictedCtr: %s, adRelevance:%s, landingPageExperience:%s', row['SearchPredictedCtr'], row['CreativeQualityScore'], row['PostClickQualityScore']);
    
    totals.rowCount++;
    totals.QualityScore+=qs;
    
    totals.predictedCtr+=result2weight(row['SearchPredictedCtr']);
    totals.adRelevance+=result2weight(row['CreativeQualityScore']); 
    totals.landingPageExperience+=result2weight(row['PostClickQualityScore']);
  }

  return totals;
}

// convert text result to numeric weight 
// type: QualityScoreBucket
// Above average = 3, Average = 2, Below average = 1 
function result2weight(value){
  switch(value.toLowerCase()){
    case 'below average': return 1;       
    case 'average': return 2;       
    case 'above average': return 3;       
    default: return 0;
  }
}

function getKeywordsReport(){
  var reportConfig = {
    includeZeroImpressions: false
  };
  
  var query = 'SELECT Id, Criteria, KeywordMatchType, QualityScore, SearchPredictedCtr, PostClickQualityScore, CreativeQualityScore ' + 
    'FROM KEYWORDS_PERFORMANCE_REPORT ' + 
    'WHERE  HasQualityScore = TRUE ' +    
    'AND IsNegative = FALSE ' + 
    'AND Status = ENABLED ' + 
    'AND AdGroupStatus = ENABLED ' +     
    'AND CampaignStatus = ENABLED ' + 
    'AND Impressions > ' + KW_MIN_IMPRESSIONS;
  
  var report = AdWordsApp.report(query, reportConfig);
  return report.rows(); 
}

// ---------------------------------------------------------------

/* QUALITY SCORE MONITOR SERVICE */
var QualityScoreMonitorService = function(sheetService) { 
  var _sheet = sheetService;
  
  return {        
    saveNewTotals: function(totals, accountId, accountName){
      // totalPointsAvailable -> totals.rowCount * 3 = the max points available (100%)
      // e.g: (totals.predictedCtr / totalPointsAvailable) * 100
      var totalPointsAvailable = totals.rowCount * 3;
      
      var avgQualityScore = (totals.QualityScore / totals.rowCount).toFixed(2);
      var predictedCtr = ((totals.predictedCtr / totalPointsAvailable) * 100).toFixed(2);
      var adRelevance = ((totals.adRelevance / totalPointsAvailable) * 100).toFixed(2);
      var landingPageExperience = ((totals.landingPageExperience / totalPointsAvailable) * 100).toFixed(2);
      
      Logger.log('avg.QS: %s, predictedCtr: %s, adRelevance: %s, lpExperience: %s', avgQualityScore, predictedCtr, adRelevance, landingPageExperience);         
      
      var date = new Date();
      
      // get the current account index 
      var rowIndex = this.findAccountIndex(accountId);            
      if(rowIndex == -1) // new row
      {
        _sheet.addRow([accountId, accountName, date, avgQualityScore, predictedCtr, adRelevance, landingPageExperience]);
        return;
      }             
      
      // copy/move the previous data to the next columns bulk 
      // copy values fromRange to toRange
      var fromRange = 'C' + rowIndex + ':G' + rowIndex;
      var toRange = 'I' + rowIndex + ':M' + rowIndex;
      
      var isCopied = this.copyPreviousTotals(fromRange, toRange);
      if(!isCopied) return;
      
      // update the sheet with the new totals
      
      _sheet.setRangeValues(fromRange, [[date, avgQualityScore, predictedCtr, adRelevance, landingPageExperience]]);
    },
    addHeader: function(){
      _sheet.addRow(['account #', 'accountName', 'date', 'qualityScore', 'predictedCtr', 'adRelevance', 'lpExperience', '-', 'date', 'qualityScore', 'predictedCtr', 'adRelevance', 'lpExperience']);
      _sheet.setDataUI('A1:M1', null, null, 11, 'left', 'bold', null, 'middle');  
    },
    copyPreviousTotals: function(fromRange, toRange){          
      _sheet.copyRange(fromRange, toRange);      
      return true;
    }, 
    findAccountIndex: function(accountId){
      return _sheet.getRowIndex(1, accountId);
    }
  };
}

// ---------------------------------------------------------------

/* SPREADSHEET SERVICE */
var SpreadSheetService = function(spreadSheet) {
  var _spreadSheet = spreadSheet;
  var _sheets = [];

  (function(){
    var sheetServices = [];
    var temp_sheets = spreadSheet.getSheets();
    for(var i= 0; i < temp_sheets.length; i++)
      _sheets.push(new SheetService(temp_sheets[i]));   
  })();   
  
  return {      
    sheets: _sheets,
	spreadSheet: _spreadSheet, 
    getName: function(){
      return _spreadSheet.getName();
    },
    getActiveSheet: function(){
      return SheetService(_spreadSheet.getActiveSheet());
    },
    getSheetByName: function(sheetName) { 
         for(var i= 0; i < _sheets.length; i++)
            if(_sheets[i].sheetName == sheetName)
              return _sheets[i];
          return '';
    },
    addNewSheet: function(sheetName){
        var new_sheet = SheetService(_spreadSheet.insertSheet(sheetName));
        _sheets.push(new_sheet)
        return new_sheet;         
    },
    isSheetExists: function(sheetName){
        return this.getSheetByName(sheetName) != '';
    }, 
    getURL: function(){
      return _spreadSheet.getUrl();
    },
	getId: function(){
      return _spreadSheet.getId();
    },
    setName: function(newName){
      _spreadSheet.rename(newName);  
    }, 
	setActiveSheetByIndex: function(index){
      _spreadSheet.setActiveSheet(_sheets[index].sheet);
    },
    clearALL: function(){
      for(var i= 0; i < _sheets.length; i++)
        _sheets[i].clear(true, true, true);
    }
  }; 
}

/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    },      
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
      getColumnValues: function(startRowPosition, columnPosition){
        // getRange(row, column, numRows, numColumns)
        return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
      }, 
      addRow: function(arrValues){ 
        //_sheet.appendRow(arrValues);
        this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
      },
      addRowAtIndex: function(arrValues, rowPosition){               
        rowPosition = rowPosition || _sheet.getLastRow() + 1;
        var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
        range.setValues([arrValues]);
      },
      addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(url, rowPosition, columnPosition, left, top);
      },   
      addImage: function(blob, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
      },   
      deleteRow: function(rowPosition){
        _sheet.deleteRow(rowPosition);
      },  
      copyRange: function(fromRange, toRange){
        Logger.log('copy range from %s to %s', fromRange, toRange);
        var valuesToCopy = this.getValuesByRange(fromRange);      
        this.setRangeValues(toRange, valuesToCopy);           
      },                 
      sort: function(columnPosition){
        _sheet.sort(columnPosition);
      },
      hasCharts:  _sheet.getCharts().length > 0,
      findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
        /* 
        get column values filtered by other column
        
        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */
        
        var result = [];       
        var rows = _sheet.getDataRange().getValues();
        
        for(row in rows)
          if(rows[row][filterColumnPosition - 1] == filterValue)
            result.push(rows[row][columnPosition]);
        return result;  
      }, 
	  freezeHeader: function(){
          _sheet.setFrozenRows(1);
      },
      merge: function(strRange){
        _sheet.getRange(strRange).merge();
      },  
      clear: function(charts, format, contents){
        charts = charts || false;
        format = format || false;
        contents = contents || true;
    
        _sheet.clear({ formatOnly: format, contentsOnly: contents });    
        
        // clear all notes
        _sheet.clearNotes();        
        
        // clear all charts
        var charts = _sheet.getCharts();
        for (var i in charts)
          _sheet.removeChart(charts[i]);
      },          
      setValue: function(rowPosition, columnPosition, value){ 
        _sheet.getRange(rowPosition, columnPosition).setValue(value);
      },     
      setRangeValue: function(strRange, value){ 
        // e.g: setCurrencyFormat('A1'); // set cell
        _sheet.getRange(strRange).setValue(value);
      },
      setRangeValues: function(strRange, values){         
        _sheet.getRange(strRange).setValues(values);
      },
      setColumnWidth: function(columnPosition, width){
        _sheet.setColumnWidth(columnPosition, width);
      },  
      setRowHeight: function(rowPosition, height){
        _sheet.setRowHeight(rowPosition, height);
      },  
      setName: function(newName){
        _sheet.setName(newName);
      }, 
      setNote: function(strRange, note){
         var range = _sheet.getRange(strRange);
        range.setNote(note);
      },         
      setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
        var range = _sheet.getRange(strRange);
        if(backgroundColor)
          range.setBackground(backgroundColor);
        if(foreColor)
          range.setFontColor(foreColor);
        if(fontSize)
          range.setFontSize(fontSize);
        if(hAlign)
          range.setHorizontalAlignment(hAlign);
        if(vAlign)
          range.setVerticalAlignment(vAlign)
          if(fontWeight)
            range.setFontWeight(fontWeight);
        if(border)
          range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
      }, 
      setNumberFormat: function(strRange){
        setFormat(strRange, '0');       
      },
      setDecimalFormat: function(strRange){
        setFormat(strRange, '0.00');
      },
      setCurrencyFormat: function(strRange){
        setFormat(strRange, '$0.00');
      },
      setPercentageFormat: function(strRange){
        // e.g: setPercentageFormat('A1'); // set cell
        // e.g: setPercentageFormat('A1:A10'); // set range
        
        setFormat(strRange, '0.00%');
      },
      setWeekFormat: function(strRange){
        setFormat(strRange, 'MMM dd');
      },
      setMonthFormat: function(strRange){
        setFormat(strRange, 'MMM');
      },
      setCellSumFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set SUM value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=SUM(' + strRange + ')');
      },
      setCellAvgFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set AVG value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=AVERAGE(' + strRange + ')');
      },
      setCellFormula: function(formula, strCell){
        // e.g: setCellSumFormula('=B3-C3', 'D3');         
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula(formula);
      } 
  }; 
}

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}