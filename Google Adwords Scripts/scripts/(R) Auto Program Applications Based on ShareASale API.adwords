var CONFIG = {
  affiliateid: 651616,
  version: 2.4,
  token: 'xxxxxxxxxxxx',
  secret: 'xxxxxxxxxxxxxxx', 
  // ---
  updatesLimit: 1,  // 0 = NONE | -1 = ALL | <num> = applications-limit
  yearsToScan: [2024, 2023, 2022],
  excludedMerchants: [156534, 154825, 153277] 
};

var HTTP_OPTIONS = {
  'method' : 'GET',
  'headers': {
    'x-ShareASale-Date': '',
    'x-ShareASale-Authentication': ''
  }
};

var shareASale = {  
    loadNonApplicantMerchants: function(year /*yyyy*/){    
      Logger.log('getting data for %s...', year);

      var action = 'merchantSearch';
      var url = 'https://api.shareasale.com/x.cfm?affiliateID={0}&token={1}&version={2}&action={3}&activatedSince=01/01/{4}&notjoined=1'
        .replace('{0}', CONFIG.affiliateid)
        .replace('{1}', CONFIG.token)
        .replace('{2}', CONFIG.version)
        .replace('{3}', action)
        .replace('{4}', year);      
      Logger.log(url);

      this.calculate(action);

      var report = UrlFetchApp.fetch(url, HTTP_OPTIONS).getContentText();   
      Logger.log(report);   

      var arr = CSVtoArray(report);
      /// Logger.log(arr[0]);     
      Logger.log('%s rows have imported from ShareASale', arr.length.toFixed(0));     

      ///Logger.log(arr.shift()); // arr.shift() take 1st element - header row
      ///Logger.log(arr.slice(1,5)); // take 1-5 elements
      ///Logger.log(arr.slice(1));   // take all elements from index 1 (remove first element)

      return arr;
    },
    applyMerchant: function(merchant){    
      Logger.log('apply merchant %s...', merchant);

      var action = 'merchantApplication';
      var url = 'https://api.shareasale.com/x.cfm?affiliateID={0}&token={1}&version={2}&action={3}&merchantId={4}'
        .replace('{0}', CONFIG.affiliateid)
        .replace('{1}', CONFIG.token)
        .replace('{2}', CONFIG.version)
        .replace('{3}', action)
        .replace('{4}', merchant);      
      Logger.log(url);

      this.calculate(action);

      var result = UrlFetchApp.fetch(url, HTTP_OPTIONS).getContentText();   
      Logger.log(result);   
      return result;
    },
    calculate: function(action){
      var utcNow = new Date().toISOString();
      console.log(utcNow);
      HTTP_OPTIONS.headers['x-ShareASale-Date'] = utcNow;

      var hash = Sha256Hash(CONFIG.token + ':' + utcNow + ':' + action + ':' + CONFIG.secret);
      console.log(hash);
      HTTP_OPTIONS.headers['x-ShareASale-Authentication'] = hash;
      
      return ({utcNow, hash});
    }
};

function main(){
  var dataSet = new Set();    
  
  for(i in CONFIG.yearsToScan)
    dataSet = dataSet.union(new Set(shareASale.loadNonApplicantMerchants(CONFIG.yearsToScan[i]) || [])); 
  
  Logger.log(`${dataSet.size} rows collected.`);  
  /// Logger.log(set.entries().next().value)
  
  ProcessAccount(AdsApp.currentAccount().getCustomerId(), [...dataSet]);
}

function ProcessAccount(accountId, arr) {          
  Logger.log('[account] #%s', accountId);
  
  var header = arr[0];
  arr = arr.slice(1); // remove header
  
  var arrFiltered = arr.filter(x => !CONFIG.excludedMerchants.includes(parseInt(x[0])));
  Logger.log('found %s items filtered', arrFiltered.length);
  
  var arrToUpdate = CONFIG.updatesLimit == -1 ? arrFiltered : arrFiltered.slice(0,CONFIG.updatesLimit); 
  Logger.log('found %s items to update (updatesLimit: %s)', arrToUpdate, CONFIG.updatesLimit);
  
  for(i in arrToUpdate) {
    var row = arrToUpdate[i];    
    Logger.log('[row] %s', row);    
    
    var merchant = parseInt(row[0]);
    shareASale.applyMerchant(merchant);    
  }
}

function isLabelExists(campaign, labelName){    
	var exists = campaign.labels()
      .withCondition('Name = "' + labelName + '"')      
      .get()
      .hasNext();  
  return exists;
}

/*
  Merchant Id|Organization|WWW|Category|Status|Commission Text|Sale Comm|Lead Comm|Hit Comm|Cookie Length|Auto Approve|Auto Deposit|Datafeed Items|Epc 7 Day|EPC 30 Day|Reversal Rate 7 Day|Reversal Rate 30 Day|Ave Sale 7 Day|Ave Sale 30 Day|Ave Comm 7 Day|Ave Comm 30 Day|Powerrank Top 100
  153856|Mamo|www.mamo.nyc|Food/Drink|Not Applied| 15.00%  Per Sale|15|0|0|60|No|0|0|960|480|0|0|64|64|9.6|9.6|No
  156102|Smackin Snacks|smackinsunflowerseeds.com/|Food/Drink|Not Applied| 12.50%  Per Sale|12.5|0|0|30|No|1|0|379.14|85.55|0|0|37.48|35.75|10.52|2.27|No
  156586|MOUNTAIN &amp; SACKETT|www.mountainandsackett.com|Accessories|Not Applied| 15.00%  Per Sale|15|0|0|90|No|1|0|335.89|335.89|0|0|100.78|100.78|15.12|15.12|No
  154016|Marcato USA|marcatousa.com|Gourmet|Not Applied| 5.00%  Per Sale|5|0|0|15|No|1|0|318.5|212.33|0|0|127.42|127.42|6.37|6.37|No
*/
function CSVtoArray(data, fieldSep, newLine) {
  fieldSep = fieldSep || '|';
  newLine = newLine || '\n';
  const nSep = '\x1D'; const nSepRe = new RegExp(nSep, 'g');
  const qSep = '\x1E'; const qSepRe = new RegExp(qSep, 'g');
  const cSep = '\x1F'; const cSepRe = new RegExp(cSep, 'g');
  const fieldRe = new RegExp('(^|[' + fieldSep + '\\n])"([^"]*(?:""[^"]*)*)"(?=($|[' + fieldSep + '\\n]))', 'g');
  return data
    .replace(/\r/g, '')
    .replace(/\n+$/, '')
    .replace(fieldRe, (match, p1, p2) => {
      return p1 + p2.replace(/\n/g, nSep).replace(/""/g, qSep).replace(/,/g, cSep)
    })
    .split(/\n/)
    .map(line => {
      return line
        .split(fieldSep)
        .map(cell => cell.replace(nSepRe, newLine).replace(qSepRe, '"').replace(cSepRe, ','))
    });
}

function ExtractCampaignMerchant(campaignName){
  /*
    PP <Merchant-Id>
    PP\s+\d{1,}
    -
    Allpowers EU - PP 133922 - [BB-Nein] DSA, CTM, neu ab 30.11.2023
    Kimchichicbeauty - PP 122663 - [BB-Nein] DSA, CTM
    Zendure EU - PP 124057 - [BB-Ja] DSA
    Casabrews - PP 135225 - [BB-Nein] DSA, CTM, Gab mal 10% PPS, jetzt noch 5%. 09.01.2024
    Fibreheat - PP 98302 - [BB-Nein] DSA, CTM
    Explorescientific - PP 102148 - [BB-Ja] DSA, CTM
    Suncentauto - PP 127047 - [BB-Nein] DSA, CTM
    Formovie - PP 130703 - [BB-Nein] DSA, CTM
    -
    Lorem Ipsum DE - PP 124057 - [BB-Ja] DSA
    Merchant-Id = 124057
  */
  
  var pattern = /(?<=PP\s+)\d{1,}/
  return pattern.exec(campaignName);
}

function Sha256Hash(value) {
  return BytesToHex(
    Utilities.computeDigest(
      Utilities.DigestAlgorithm.SHA_256, value));
}

function BytesToHex(bytes) {
  let hex = [];
  for (let i = 0; i < bytes.length; i++) {
    let b = parseInt(bytes[i]);
    if (b < 0) {
      c = (256+b).toString(16);
    } else {
      c = b.toString(16);
    }
    if (c.length == 1) {
      hex.push("0" + c);
    } else {
      hex.push(c);
    }
  }
  return hex.join("");
}