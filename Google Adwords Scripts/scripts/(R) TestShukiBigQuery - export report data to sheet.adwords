var EMAIL = 'RcBuilder@walla.com';
var DATE_RANGE = 'ALL_TIME'; // TODAY, YESTERDAY, LAST_7_DAYS, THIS_WEEK_SUN_TODAY, LAST_WEEK, LAST_14_DAYS, LAST_30_DAYS, LAST_BUSINESS_WEEK, LAST_WEEK_SUN_SAT, THIS_MONTH, LAST_MONTH, ALL_TIME
var SHEET_NAME = 'TestShukiBigQuery';

function main() {  
  var accountName = AdWordsApp.currentAccount().getName();
  Logger.log(accountName);
   
  var sheetService = SpreadsheetLoader.loadSheetService(SHEET_NAME); 
  var sheetNotExists = !sheetService;
  if(sheetNotExists){
     sheetService = SpreadsheetLoader.createSheetService(sheetName); // create  
     sheetService.addRow(['AdGroupId', 'Id', 'Criteria', 'Impressions', 'Clicks']); // add header 
  } 
  sheetService.clear();  
  
  // https://developers.google.com/google-ads/api/fields/v17/click_view
  // https://developers.google.com/google-ads/api/fields/v17/keyword_view
  // https://developers.google.com/google-ads/api/fields/v17/keyword_view_query_builder
  var reportConfig = {
    includeZeroImpressions: false
  };
  var report = AdWordsApp.report(
    'SELECT AdGroupId, Id, Criteria, Impressions, Clicks ' +
    'FROM   KEYWORDS_PERFORMANCE_REPORT ' +
    'WHERE Status = ENABLED ' +  
    'AND CampaignStatus IN [PAUSED, ENABLED] ' +  
	  'AND IsNegative = FALSE ' + 	  
    'AND Impressions > 0 ' + 
    'DURING ' + DATE_RANGE,
    reportConfig
  );
    
  report.exportToSheet(sheetService.sheet);
  
  var rows = report.rows(); 
  while (rows.hasNext()) { 
    var row = rows.next();    
    Logger.log('[#%s] %s, impressions: %s', row['Id'].toString(), row['Criteria'], parseInt(row['Impressions']));
  }
  
  return;
  
  try{                 
    Logger.log('send mail to %s', EMAIL);
    MailApp.sendEmail(EMAIL, 'TEST Report', '', {
      htmlBody: 'TEST'
    });
  }
  catch(ex){
    Logger.log('exception occured: %s', ex.message);
  }
}



/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getURL: function(){
      return this.spreadSheet.getUrl();
    },
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    },  
    getRowByIndex:function(rowIndex){       
      var values = this.getRowValues(rowIndex);
      return values[0] || [];
    },     
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
    getColumnValues: function(startRowPosition, columnPosition){
      // getRange(row, column, numRows, numColumns)
      return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
    }, 
    addRow: function(arrValues){ 
      //_sheet.appendRow(arrValues);
      this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
    },
    addRowAtIndex: function(arrValues, rowPosition){               
      rowPosition = rowPosition || _sheet.getLastRow() + 1;
      var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
      range.setValues([arrValues]);
    },
    addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(url, rowPosition, columnPosition, left, top);
    },   
    addImage: function(blob, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
    },   
    deleteRow: function(rowPosition){
      _sheet.deleteRow(rowPosition);
    }, 
	  copyRange: function(fromRange, toRange){
        Logger.log('copy range from %s to %s', fromRange, toRange);
        var valuesToCopy = this.getValuesByRange(fromRange);      
        this.setRangeValues(toRange, valuesToCopy);           
    },   
    sort: function(columnPosition){
      _sheet.sort(columnPosition);
    },
    hasCharts:  _sheet.getCharts().length > 0,
    findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
      /* 
        get column values filtered by other column

        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */

      var result = [];       
      var rows = _sheet.getDataRange().getValues();

      for(row in rows)
        if(rows[row][filterColumnPosition - 1] == filterValue)
          result.push(rows[row][columnPosition]);
      return result;  
    }, 
    findRowsByFilter: function(filterValue, filterColumnPosition){
      /* 
        get rows by filter

        e.g: findRowsByFilter('100', 1)          
        all rows that the value in A column equals to '100'
        */

      var result = [];       
      var rows = _sheet.getDataRange().getValues();

      for(row in rows)
        if(rows[row][filterColumnPosition - 1] == filterValue)
          result.push(rows[row]);
      return result;  
    },
    freezeHeader: function(){
      _sheet.setFrozenRows(1);
    },
    merge: function(strRange){
      _sheet.getRange(strRange).merge();
    },  
    clearValues: function(strRange) { 
        var range = _sheet.getRange(strRange);
        range.clear();        
        // range.deleteCells(SpreadsheetApp.Dimension.ROWS);
    },
    clear: function(charts, format, contents){
      charts = charts || false;
      format = format || false;
      contents = contents || true;

      _sheet.clear({ formatOnly: format, contentsOnly: contents });    

      // clear all notes
      _sheet.clearNotes();        

      // clear all charts
      var charts = _sheet.getCharts();
      for (var i in charts)
        _sheet.removeChart(charts[i]);
    },          
    setValue: function(rowPosition, columnPosition, value){ 
      _sheet.getRange(rowPosition, columnPosition).setValue(value);
    },     
    setRangeValue: function(strRange, value){ 
      // e.g: setCurrencyFormat('A1'); // set cell
      _sheet.getRange(strRange).setValue(value);
    },
    setRangeValues: function(strRange, values){         
      _sheet.getRange(strRange).setValues(values);
    },
    setColumnWidth: function(columnPosition, width){
      _sheet.setColumnWidth(columnPosition, width);
    },  
    setRowHeight: function(rowPosition, height){
      _sheet.setRowHeight(rowPosition, height);
    },  
    setName: function(newName){
      _sheet.setName(newName);
    }, 
    setNote: function(strRange, note){
      var range = _sheet.getRange(strRange);
      range.setNote(note);
    },         
    setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
      var range = _sheet.getRange(strRange);
      if(backgroundColor)
        range.setBackground(backgroundColor);
      if(foreColor)
        range.setFontColor(foreColor);
      if(fontSize)
        range.setFontSize(fontSize);
      if(hAlign)
        range.setHorizontalAlignment(hAlign);
      if(vAlign)
        range.setVerticalAlignment(vAlign)
      if(fontWeight)
        range.setFontWeight(fontWeight);
      if(border)
        range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
    }, 
    setNumberFormat: function(strRange){
      setFormat(strRange, '0');       
    },
    setDecimalFormat: function(strRange){
      setFormat(strRange, '0.00');
    },
    setCurrencyFormat: function(strRange){
      setFormat(strRange, '$0.00');
    },
    setPercentageFormat: function(strRange){
      // e.g: setPercentageFormat('A1'); // set cell
      // e.g: setPercentageFormat('A1:A10'); // set range

      setFormat(strRange, '0.00%');
    },
    setWeekFormat: function(strRange){
      setFormat(strRange, 'MMM dd');
    },
    setMonthFormat: function(strRange){
      setFormat(strRange, 'MMM');
    },
    setCellSumFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set SUM value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=SUM(' + strRange + ')');
    },
    setCellAvgFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set AVG value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=AVERAGE(' + strRange + ')');
    },
    setCellFormula: function(formula, strCell){
      // e.g: setCellFormula('=B3-C3', 'D3');         
      // e.g: setCellFormula('=$B3-$C3', 'D3:D9');   

      var cell = _sheet.getRange(strCell);
      cell.setFormula(formula);
    }        
  }; 
}

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByName: function(spreadSheetName, sheetName, useDefault){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName);
    if(!spreadsheet) return null;
    var sheet = spreadsheet.getSheetByName(sheetName);    
    if(useDefault) sheet = spreadsheet.getActiveSheet();
    if(!sheet) return null;
    return SheetService(sheet);
  }, 
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSpreadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}














function CalculateCPA(conversions, cost){
  return conversions == 0 ? 0 : (cost / conversions).toFixed(2);
}

function dateFormat(date){
  var year = date.getFullYear().toString();
  var month = (date.getMonth() + 1).toString();
  var day = date.getDate().toString();
  
  if(month.length == 1) month = '0' + month; // return yyyyMMdd
  if(day.length == 1) day = '0' + day;
  
  return year + month + day;
}

function reportAllTimeFormat(){
  return '20000101'.concat(',', dateFormat(new Date()));
}

// { impressionShare, conversionValue }
function GetCampaignExtendedData(campaign, dateRange){
  var result = { impressionShare: 0, conversionValue: 0 };

  var reportConfig = {
    includeZeroImpressions: false
  };
  
  var query =  'SELECT CampaignId, CampaignName, SearchImpressionShare, ConversionValue ' + 
    'FROM CAMPAIGN_PERFORMANCE_REPORT ' + 
    'WHERE CampaignStatus IN [ENABLED] ' +        
    'AND CampaignId = ' + campaign.getId() + ' ' + 
    'DURING ' + (dateRange == 'ALL_TIME' ? reportAllTimeFormat() : dateRange);

  var report = AdWordsApp.report(query, reportConfig);
  var rows = report.rows(); 
  while (rows.hasNext())
  {
    var row = rows.next();
    var impressionShare = row['SearchImpressionShare'];  
    var conversionValue = row['ConversionValue'];  
    Logger.log('impressionShare: %s, conversionValue: %s', impressionShare, conversionValue);
	
    // fixing the '< 10%' value
    if(impressionShare == '< 10%')
      impressionShare = '5';

    result.impressionShare = parseFloat(impressionShare.replace('%', ''));
    result.conversionValue = parseFloat(conversionValue);
  }
  
  Logger.log('[ExtendedData] %s -> %s', campaign.getName(), result);
  return result;
}

// [ { conversionType, stats: { conversions, conversionRate } } ]
function GetCampaignConversionsData(campaign, dateRange){
  var result = [];

  var reportConfig = {
    includeZeroImpressions: true
  };
  
  var query =  'SELECT CampaignId, CampaignName, ConversionTypeName, Conversions ' + 
    'FROM CAMPAIGN_PERFORMANCE_REPORT ' + 
    'WHERE CampaignStatus IN [ENABLED] ' +        
    'AND CampaignId = ' + campaign.getId() + ' ' + 
    'DURING ' + (dateRange == 'ALL_TIME' ? reportAllTimeFormat() : dateRange);

  var report = AdWordsApp.report(query, reportConfig);
  var rows = report.rows(); 
  while (rows.hasNext())
  {
    var row = rows.next();
    var conversionType = row['ConversionTypeName'];
    result.push({ 
      conversionType: conversionType, 
      stats: { 
        conversions: row['Conversions'],         
        conversionRate: 0 
      }
    });
  }
  
  Logger.log('[ConversionsData] %s', campaign.getName());
  for(i in result)
    Logger.log('%s : %s', result[i].conversionType, result[i].stats);
  
  return result;
}

// { mobile, tablet, desktop }
function GetCampaignDeviceData(campaign, dateRange){
  var result = { 
    mobile: {
      averagePosition: 0
    }, 
    tablet: {
      averagePosition: 0
    }, 
    desktop: {
      averagePosition: 0
    } 
  };

  var reportConfig = {
    includeZeroImpressions: false
  };
    
  var query =  'SELECT CampaignId, CampaignName, Device, AveragePosition ' + 
    'FROM CAMPAIGN_PERFORMANCE_REPORT ' + 
    'WHERE CampaignStatus IN [ENABLED] ' +        
    'AND CampaignId = ' + campaign.getId() + ' ' + 
    'DURING ' + (dateRange == 'ALL_TIME' ? reportAllTimeFormat() : dateRange);

  var report = AdWordsApp.report(query, reportConfig);
  var rows = report.rows(); 
  while (rows.hasNext())
  {
    var row = rows.next();
    var device = row['Device'];
    var averagePosition = row['AveragePosition'];

    if(device == 'Computers')
    {
      result.desktop.averagePosition = averagePosition;   
      continue;
    }
    
    if(device.indexOf('Mobile') == 0)
    {
      result.mobile.averagePosition = averagePosition;          
      continue;
    }
    
    if(device.indexOf('Tablets') == 0)
    {
      result.tablet.averagePosition = averagePosition;        
      continue;
    }
  }
  
  Logger.log('[DeviceData] %s -> %s', campaign.getName(), result);
  return result;
}
