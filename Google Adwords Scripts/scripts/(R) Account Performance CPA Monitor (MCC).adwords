var EMAIL = 'rcbuilder@walla.com';
var LABEL_FILTER = 'Test'
var NUM_OF_DAYS_TO_COMPARE = 7;
var PERCENTAGE_THRESHOLD = 0.2;

function main() {  
  var htmlBuilderService = HTMLBuilderService();
  
  var accounts = MccApp.accounts().withCondition('LabelNames CONTAINS "' + LABEL_FILTER + '"').get();    
  while(accounts.hasNext())
  {
    var account = accounts.next();
    Logger.log('### account: %s ###', account.getName());  

    MccApp.select(account);
    ProcessAccount(htmlBuilderService);
    
    Logger.log('--------------------------');
  }
  
  try{                 
    var emailBody = htmlBuilderService.get();
    if(emailBody == '') return;
    
    Logger.log('send mail to %s', EMAIL);
    MailApp.sendEmail(EMAIL, 'Adwords Account Notifications', '', {
      name: 'adwords-script',
      htmlBody: emailBody
    });
  }
  catch(ex){
    Logger.log('exception occured: %s', ex.message);
  }
}

function ProcessAccount(htmlBuilderService){   
  var account = AdWordsApp.currentAccount();
  var accountName = account.getName();
  
  var now = new Date();  
  var lastXdays = HELPER.dateFormat(HELPER.dateAdd(now, -(NUM_OF_DAYS_TO_COMPARE - 1), 'dd')) + ',' + HELPER.dateFormat(now);
  var prevXdays = HELPER.dateFormat(HELPER.dateAdd(now, -((NUM_OF_DAYS_TO_COMPARE * 2) - 1), 'dd')) + ',' + HELPER.dateFormat(HELPER.dateAdd(now, -NUM_OF_DAYS_TO_COMPARE, 'dd'));
  Logger.log('%s vs %s', lastXdays, prevXdays);
  
  var stats = account.getStatsFor(lastXdays.split(',')[0], lastXdays.split(',')[1]);
  var statsPrev = account.getStatsFor(prevXdays.split(',')[0], prevXdays.split(',')[1]);  
  
  var cpa = HELPER.divide(stats.getCost(), stats.getConversions());
  var cpaPrev = HELPER.divide(statsPrev.getCost(), statsPrev.getConversions());
  var ratio = HELPER.divide(cpa, cpaPrev);
  var changeRate = ratio < 1 ? -(1 - ratio) : (ratio - 1);
  
  var notifications = [];
  if(changeRate > 0 && changeRate > PERCENTAGE_THRESHOLD)
    notifications.push('CPA increased by {0}%'.replace('{0}', changeRate));
    
  if(stats.getConversions() == 0)  
    notifications.push('No Conversions {0}'.replace('{0}', lastXdays));    
  
  if(notifications.length > 0){
    htmlBuilderService.add('<h2>' + accountName + '</h2>');
    htmlBuilderService.add('<h3>[config] percentage: {0}, days: {1}</h3>'.replace('{0}', PERCENTAGE_THRESHOLD).replace('{1}', NUM_OF_DAYS_TO_COMPARE));
    
    for(i in notifications){
      Logger.log(notifications[i]);      
      htmlBuilderService.add('<p>' + notifications[i] + '</p>');
    }  
  }
}

// -----------------------------

var HELPER = {
  dateFormat: function (date) {
    var year = date.getFullYear().toString();
    var month = (date.getMonth() +1).toString();
    var day = date.getDate().toString();

    if(month.length == 1) month = '0' + month; // return yyyyMMdd
    if(day.length == 1) day = '0' + day;

    return year + month + day;
  },
  dateAdd: function (date, value, type){      
    type = type || 'dd';
    
    var newDate = new Date(date.getTime());
    
    if(type == 'dd')
      newDate.setDate(newDate.getDate() + value);
    else if(type == 'MM')
      newDate.setMonth(newDate.getMonth() + value);
    
    return newDate;  
  },
  divide: function(numerator, denominator){    
    return denominator == 0 ? 0 : numerator / denominator;
  },
  getReport: function(reportName, reportFields, reportFilters, dateRange){
    var reportConfig = {
      includeZeroImpressions: true
    };
  
    // {reportFields} FROM {reportName} WHERE {reportFilters} DURING {dateRange}
    var query = 'SELECT ' + reportFields.join(', ') + ' ';  
    query += 'FROM '+ reportName + ' ';
  
    if(reportFilters && reportFilters.length > 0)  
      query += 'WHERE '+ reportFilters.join(' AND ') + ' ';
  
    query += 'DURING ' + dateRange;
  
    Logger.log(query);
    return AdWordsApp.report(query, reportConfig); 
  },
}


/* HTML BUILDER SERVICE */
var HTMLBuilderService = function(){
  var _html = '';
  
  return {
    add: function(content){
      _html += content;
    },
    get: function(){
      return _html;
    },
    toPDF: function(pdfName){          
      var blob = Utilities.newBlob(_html, MimeType.HTML);
      var pdf = blob.getAs(MimeType.PDF);  
      pdf.setName(pdfName);
      return pdf;
    }  
  };
}