Big O notation
==============
describes the performance or complexity of an algorithm.


O(1)
execute in the same time regardless of the size of the array.

tip: by index or hash Code

e.g:
bool IsFirstElementNull(IList<string> elements) {
    return elements[0] == null;
}

---

O(N)
performance will grow linearly based on the size of the array.
note: refers the worst-case performance scenario. 

tip: foreach loop

bool ContainsValue(IList<string> elements, string value) {
    foreach (var element in elements)
        if (element == value) 
		return true;
    return false;
}

---

O(N^2), O(N^3), O(N^4) etc.
performance is proportional to the square of the size of the array.
the quantity of the nested loops determine the N size 
e.g: for 2 loops totality, a single nested loop we'll get N^2

tip: nested foreach loops

bool ContainsDuplicates(IList<string> elements){
    for (var outer = 0; outer < elements.Count; outer++){
        for (var inner = 0; inner < elements.Count; inner++) {
            if (outer == inner) continue;
            if (elements[outer] == elements[inner]) 
		return true;
        }
    }

    return false;
}

---

O(2^N)