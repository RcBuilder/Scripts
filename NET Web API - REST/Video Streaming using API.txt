Video Streaming using API
-------------------------
also see 'PushStreamContent Response'

--

[HTML]

<div class="MovieWrapper">    
    @if (Model.FileName == string.Empty) {
        <div class="NoMovie">אין סרטון</div>
    }
    else
    {        
        <video id="my_video" poster="" oncontextmenu="return false;" preload="none" controls controlsList="nodownload">
            <source src="~/api/Video/Index/@Model.Id" />
            <div>Your browser does not support the video tag.</div>
        </video>        
    }
</div>

--

[SERVER]

public class VideoController : ApiController
{
	// This will be used in copying input stream to output stream.
	public const int ReadStreamBufferSize = 1024 * 1024;
	// We have a read-only dictionary for mapping file extensions and MIME names. 
	public static readonly IReadOnlyDictionary<string, string> MimeNames;
	// We will discuss this later.
	public static readonly IReadOnlyCollection<char> InvalidFileNameChars;
	// Where are your videos located at? Change the value to any folder you want.
	public static readonly string InitialDirectory;

	static Video_Controller()
	{
		var mimeNames = new Dictionary<string, string>();

		mimeNames.Add(".mp3", "audio/mpeg");    // List all supported media types; 
		mimeNames.Add(".mp4", "video/mp4");
		mimeNames.Add(".ogg", "application/ogg");
		mimeNames.Add(".ogv", "video/ogg");
		mimeNames.Add(".oga", "audio/ogg");
		mimeNames.Add(".wav", "audio/x-wav");
		mimeNames.Add(".webm", "video/webm");

		MimeNames = new ReadOnlyDictionary<string, string>(mimeNames);

		InvalidFileNameChars = Array.AsReadOnly(Path.GetInvalidFileNameChars());
		InitialDirectory = WebConfigurationManager.AppSettings["InitialDirectory"];
	}

	private static bool AnyInvalidFileNameChars(string fileName)
	{
		return InvalidFileNameChars.Intersect(fileName).Any();
	}

	private static MediaTypeHeaderValue GetMimeNameFromExt(string ext)
	{
		string value;

		if (MimeNames.TryGetValue(ext.ToLowerInvariant(), out value))
			return new MediaTypeHeaderValue(value);
		else
			return new MediaTypeHeaderValue(MediaTypeNames.Application.Octet);
	}

	private static bool TryReadRangeItem(RangeItemHeaderValue range, long contentLength,
		out long start, out long end)
	{
		if (range.From != null)
		{
			start = range.From.Value;
			if (range.To != null)
				end = range.To.Value;
			else
				end = contentLength - 1;
		}
		else
		{
			end = contentLength - 1;
			if (range.To != null)
				start = contentLength - range.To.Value;
			else
				start = 0;
		}
		return (start < contentLength && end < contentLength);
	}

	private static void CreatePartialContent(Stream inputStream, Stream outputStream, long start, long end)
	{
		int count = 0;
		long remainingBytes = end - start + 1;
		long position = start;
		byte[] buffer = new byte[ReadStreamBufferSize];

		inputStream.Position = start;
		do
		{
			try
			{
				if (remainingBytes > ReadStreamBufferSize)
					count = inputStream.Read(buffer, 0, ReadStreamBufferSize);
				else
					count = inputStream.Read(buffer, 0, (int)remainingBytes);
				outputStream.Write(buffer, 0, count);
			}
			catch (Exception error)
			{
				Debug.WriteLine(error);
				break;
			}
			position = inputStream.Position;
			remainingBytes = end - position + 1;
		} while (position <= end);
	}


	[HttpGet]
	public HttpResponseMessage Index(int Id)
	{    
		try
		{
			if (!HttpContext.Current.Request.UrlReferrer.ToString().Contains("OnlineCourse"))
				throw new HttpResponseException(HttpStatusCode.BadRequest);

			var onlineMovie = BLL.OnlineCourses.GetMovie(Id);
			if (onlineMovie == null)
				throw new HttpResponseException(HttpStatusCode.NotFound);

			var context = System.Web.HttpContext.Current;
			var studentSession = BLL.Sessions.GetStudent(context);
			var isAdmin = BLL.Sessions.IsAdmin(context);
			var isPermitted = isAdmin || (studentSession != null && BLL.WatchPermissions.IsPermitted(studentSession.Id, onlineMovie.Id));

			var filePathToPlay = string.Concat(BLL.OnlineCourses.RESOURCES_FOLDER_VIDEOS, isPermitted ? onlineMovie.FileName : "adv.mp4");
			var fileToPlay = new FileInfo(filePathToPlay);

			if (!fileToPlay.Exists)
				throw new HttpResponseException(HttpStatusCode.NotFound);

			// update watch state
			if (isPermitted) {
				BLL.WatchStates.Save(new Entities.WatchState
				{
					OnlineMovieId = onlineMovie.Id,
					StudentId = studentSession.Id,
					State = (byte)Entities.eWatchState.WATCHED,
					UpdatedDate = DateTime.Now
				});
			}
        
			long totalLength = fileToPlay.Length;

			RangeHeaderValue rangeHeader = base.Request.Headers.Range;
			HttpResponseMessage response = new HttpResponseMessage();

			response.Headers.AcceptRanges.Add("bytes");

			// The request will be treated as normal request if there is no Range header.
			if (rangeHeader == null || !rangeHeader.Ranges.Any())
			{
				response.StatusCode = HttpStatusCode.OK;
				response.Content = new PushStreamContent((outputStream, httpContent, transpContext)
				=>
				{
					using (outputStream) // Copy the file to output stream straightforward. 
					using (Stream inputStream = fileToPlay.OpenRead())
					{
						try
						{
							inputStream.CopyTo(outputStream, ReadStreamBufferSize);
						}
						catch (Exception error)
						{
							Debug.WriteLine(error);
						}
					}
				}, GetMimeNameFromExt(fileToPlay.Extension));

				response.Content.Headers.ContentLength = totalLength;
				return response;
			}

			long start = 0, end = 0;

			// 1. If the unit is not 'bytes'.
			// 2. If there are multiple ranges in header value.
			// 3. If start or end position is greater than file length.
			if (rangeHeader.Unit != "bytes" || rangeHeader.Ranges.Count > 1 || !TryReadRangeItem(rangeHeader.Ranges.First(), totalLength, out start, out end))
			{
				response.StatusCode = HttpStatusCode.RequestedRangeNotSatisfiable;
				response.Content = new StreamContent(Stream.Null);  // No content for this status.
				response.Content.Headers.ContentRange = new ContentRangeHeaderValue(totalLength);
				response.Content.Headers.ContentType = GetMimeNameFromExt(fileToPlay.Extension);

				return response;
			}
        
			var contentRange = new ContentRangeHeaderValue(start, end, totalLength);

			// We are now ready to produce partial content.
			response.StatusCode = HttpStatusCode.PartialContent;
			response.Content = new PushStreamContent((outputStream, httpContent, transpContext)
			=>
			{
				using (outputStream) // Copy the file to output stream in indicated range.
				using (Stream inputStream = fileToPlay.OpenRead())
					CreatePartialContent(inputStream, outputStream, start, end);

			}, GetMimeNameFromExt(fileToPlay.Extension));

			response.Content.Headers.ContentLength = end - start + 1;
			response.Content.Headers.ContentRange = contentRange;

			return response;
		}
		catch {        
			throw;
		}
	}
}