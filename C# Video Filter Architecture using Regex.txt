C# Video Filter Architecture using Regex
----------------------------------------

var videofilters = new List<ICrawlerFilter>();
videofilters.Add(new CrawlerVimeoVideoFilter());
videofilters.Add(new CrawlerWistiaVideoFilter());
videofilters.Add(new CrawlerYoutubeVideoFilter());

var isVideo = videofilters.Any(f => f.Execute(URL));

---

public abstract class CrawlerVideoFilter : CrawlerRegexFilter
{
    public CrawlerVideoFilter(string Expression) : base(Expression) { }
}

public class CrawlerVimeoVideoFilter : CrawlerVideoFilter
{        
    public CrawlerVimeoVideoFilter(): base(@"vimeo\.com/(?:.*#|.*/)?([0-9]+)") {}
}

public class CrawlerYoutubeVideoFilter : CrawlerVideoFilter
{
    public CrawlerYoutubeVideoFilter() : base(@"youtu(?:\.be|be\.com)/(?:.*v(?:/|=)|(?:.*/)?)([a-zA-Z0-9-_]+)") { }
}

public class CrawlerWistiaVideoFilter : CrawlerVideoFilter
{
    public CrawlerWistiaVideoFilter() : base(@"(.*)fast.(wistia.com|wistia.net)\/embed\/iframe\/(.*)") { }
}

public class CrawlerOtherVideoFilter : CrawlerVideoFilter
{
    public CrawlerOtherVideoFilter() : base(@".*\.(mp4|webm|ogv)$") { }
}

---

public class CrawlerRegexFilter : ICrawlerFilter
{        
    public string Expression { get; private set; }
        
    public CrawlerRegexFilter(string Expression) {
        this.Expression = Expression;
    }

    public virtual bool Execute(string Input) {
        if (string.IsNullOrEmpty(Input) || string.IsNullOrEmpty(this.Expression))
            return false;

        return Regex.IsMatch(Input, this.Expression, /*RegexOptions.IgnorePatternWhitespace | */ RegexOptions.IgnoreCase);            
    }
}

---

public interface ICrawlerFilter<T>
{
    string Expression { get; }
    bool Execute(T Input);        
}

public interface ICrawlerFilter : ICrawlerFilter<string> { }