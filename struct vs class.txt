struct vs class
---------------

* class supports inheritance whereas struct doen't
* class is Reference Type, struct is Value Type
* class can be null, struct can't unless defined as nullable
* struct can't have an explicit parameterless constructor whereas class can
* any new constructor added to a struct MUST call the built-in empty constructor 

note!
both class and struct support interfaces and can contains 
methods and events!

note! 
any struct has a default parameterless constructor generated by the .Net which sets all defaults
therefore, we can't add an explicit one  

------------

struct TEST1 {
   public int number { set; get; }

   public TEST1() { }
}

// compilation error
// exception: "Structs cannot contain explicit parameterless constructors"
// reason: CAN'T include parameterless constructors
var test1 = new TEST1(); 

---

struct TEST2 {
   public int number { set; get; }

   public TEST2(int number) { }
}

// compilation error
// exception: "Backing field for automatically implemented property 'number' must be fully assigned before control is returned to the caller"
// reason: MUST call the built-in empty constructor
var test2 = new TEST2();

---

struct TEST3 {
   public int number { set; get; }

   public TEST3(int number) : this() {
        this.number = number;
   }
}

// OK
// using this() to apply the default built-in constructor before using our added constructor 
var test3 = new TEST3(); 

---

struct TEST4 {
   public int number { set; get; }
}

// OK
var test4 = new TEST4(); 