Interview Questions
-------------------
[Q] Question
[G] Given
[T] Tip
[N] Note
[A] Answer
[R] Result
[S] Sample
-------------------

[Q] SQL
output number of employees per department first letter. 

[G]
declare @dep table(Id int, Name varchar(50))
insert into @dep 
values
(1, 'DevOps'),
(2, 'Dev'),
(3, 'Sales'),
(4, 'UI'),
(5, 'UX')

declare @emp table(Id int, Name varchar(50), depId int)
insert into @emp 
values
(100, 'Emp1', 1),
(101, 'Emp2', 1),
(102, 'Emp3', 2),
(103, 'Emp4', 3),
(104, 'Emp5', 4),
(105, 'Emp6', 4),
(106, 'Emp7', 5)

[A]
select	LEFT(D.Name, 1), count(*)
from	@dep D 
		inner join 
		@emp E on (D.Id = E.depId)
group by LEFT(D.Name, 1)

[R]
D > 3  // 3 employees in all departments starts with 'D'
S > 1  
U > 3  

-------

[Q] Logic
create a method which calculates a column name based on 2 parameters: 
1. column name
2. index from it

fun('A', 26) = 'AA'
fun('B', 2) = 'D' 
fun('B', 27) = 'AC'

[G]
sheet standard structure (up to 2 letters)
A,B...Z,AA,AB...AZ,BA,BB...ZZ

[T]
Ascii value for 'A' is 65

[A]
var startIndex = 65;	// 'A'
var numOfLetters = 26;	// 'A' - 'Z'

string fun(char p1, int p2){
   var index = ((byte)p1 - startIndex) + p2;   
   var leftLetterAscii = startIndex + (index / numOfLetters) - 1;      
   var rightLetterAscii = startIndex + (index % numOfLetters);   
   return string.Format("{0}{1}", (char)leftLetterAscii, (char)rightLetterAscii).Replace("@", "");
}

Console.WriteLine(fun('A', 26));  // 'AA'
Console.WriteLine(fun('B', 2));   // 'D' 
Console.WriteLine(fun('B', 27));  // 'AC'

-------

[Q] SQL
delete duplicate rows

[G]
declare @emp table(Id int, Name varchar(50))
insert into @emp 
values
(100, 'Emp1'),
(100, 'Emp1'),
(100, 'Emp1'),
(103, 'Emp4'),
(104, 'Emp5'),
(104, 'Emp5'),
(106, 'Emp7')

[A]
;WITH cte(rowNum)as(
    select row_number() over(partition by Id, Name order by Id) 
    from @emp	
)
delete from cte where rowNum > 1
select * from @emp

[R]
Id	Name
100	Emp1
103	Emp4
104	Emp5
106	Emp7

-------

[Q] OUTPUT
Serialization of Parent & Child classes 

[G]
public class Parent {
    [JsonProperty("@id")]
    public int Id { set; get; }
}

public class Child : Parent {
    [JsonProperty("name")]
    public string Name { set; get; }
}

// Parent reference
Parent c = new Child() { 
	Id = 1, 
	Name = "abcd" 
};
Console.WriteLine(JsonConvert.SerializeObject(c));  

[N] 
Parent reference to a Child instance

[A] 
serializers use reflaction on the actual Type in runtime

[R] 
{ @id: 1, name:"abcd" }

-------

[Q] Algorithm
check whether a number is a pow of 2

[G]
best-practice and with least complexity.

[A]
use bitwise OR to check the provided number.
if the flag is ON, its a pow of 2. 

[R]
Console.WriteLine(255&8);
Console.WriteLine((int)0b11111111&8);
Console.WriteLine(0b11111111&0b00001000);

------- 	

[Q] Algorithm 
Strings similarity

[R]
see 'Strings similarity Sample'	
see 'LINQPad-Queries/SimilarStrings.linq'

------- 

[Q] Algorithm 
Find Pair With Given Sum 

[R]
see 'LINQPad-Queries/SumPairAlgorithm.linq'
see 'Algorithm - Find Pair With Given Sum'	

------- 

[Q] Algorithm 
Number of levels in a Tree (Tree Height)

[R]
see 'LINQPad-Queries/TreeNumOfLevels.linq'	

------- 

[Q] Algorithm 
Print all possible combinations in a given array

[R]
see 'Algorithm - Print Array Permutations'	
see 'LINQPad-Queries/PrintPermutations.linq'

------- 

[Q] Algorithm 
Find a missing number in a given array of 0......N

[R]
see 'Algorithm - Find Missing Number in array'	

------- 

[Q] Algorithm 
Find a duplicate number in a given array of 0......N

[R]
see 'Algorithm - Find Duplicate Number in array'	

------- 

[Q] Algorithm 
Find 2 Numbers adds-up to a given target. 
e.g: target 7 matches 4 and 3

[R]
see 'Algorithm - Find 2 Numbers adds-up to a given target'	

------- 

[Q] Algorithm 
Print Sorted Array using flags 

[R]
see 'Algorithm - Print Sorted Array using flags'	

------- 

[Q] Algorithm 
Check If a given Expression is Valid

[R]
see 'Algorithm - Check If a given Expression is Valid'	

-------

[Q] Algorithm 
Number ToString

[R]
see 'Algorithm - Number ToString'	

-------

[Q] Algorithm 
Is Mirror String
e.g: "abcddcba"

[R]
see 'Algorithm - Is Mirror String'	

------- 

[Q] Algorithm 
Find Shared Minimum Number

[R]
see 'Algorithm - Find Shared Minimum Number'	

------- 

[Q] Algorithm 
Random Permutation of N numbers

[R]
see 'Algorithm - Random Permutation of N - rnd-perm'	

-------

[Q] Algorithm 
Sort 4 Numbers with least comparisons

[R]
see 'Algorithm - Sort 4 Numbers with least comparisons'	

-------

[Q] Algorithm 
Sorting a Bit Array

[R]
see 'Algorithm - Sorting a Bit Array'	

-------

[Q] Algorithm 
Max time from 4 digits.
1234 => 23:41

[R]
see 'Algorithm - Max time from 4 digits'	

-------

[Q] Algorithm 
set all Even numbers at first and only then, the Odd numbers.
[1,2,3,5,4,7,10] => [10,2,4,5,3,7,1]

[R]
see 'Algorithm - Even Numbers at first then Odds'	

-------

[Q] Javascript
var vs let vs const 

[R]
see 'javascript let vs var vs const'

-------

[Q] Javascript
event loop

[R]
see 'javascript event loop'

-------

[Q] Code Issues
whats wrong with this code 

[G]
static void Main(string[] args) {
    var worker = new MyWorkerClass();
    var task1 = worker.DoWorkAsync(1000);
    var task2 = worker.DoWorkAsync(2000);
    Task.WaitAll(task1, task2);
    Console.WriteLine($"{worker.ItemsProcessed}");
}

public class MyWorkerClass {    
    public int ItemsProcessed = 0;    

    public Task DoWorkAsync(int num)
    {
        return Task.Factory.StartNew(() =>
        {
            for (int i = 0; i < num; i++)                            
                ItemsProcessed++;            
        });
    }
}


[A]
the output can be any value between 1 and 2000 and it might differ per execution!

due to the usage of the same class instance in 2 threads and the fact that the data-member 'ItemsProcessed' is NOT threadsafe, 
we can get different output for each execution. 
the reason lies in the way the compiler handles the '++' operator. it reads the current value to a temp variable, promote it by 1 and save it again. 
in between, other thread might override the value (cause both threads try to update the same data member)

ItemsProcessed++ statement under the hood:
var temp = ItemsProcessed
temp = temp + 1
ItemsProcessed = temp

[R]
to solve that behaviour, use 'lock' statement or 'Interlocked.Increment' function. 

[S]
public class MyWorkerClass {    
    public int ItemsProcessed = 0;    

    public Task DoWorkAsync(int num)
    {
        return Task.Factory.StartNew(() =>
        {
            for (int i = 0; i < num; i++)                            
                Interlocked.Increment(ref this.ItemsProcessed);
        });
    }
}

------- 	

[Q] what is the Output
floating point in C#

[G]
Console.WriteLine("{0:R}", .1 + .2); // reminder: .1 = 0.1

[A]
~0.30000000000000004 

[R]
We can only express fractions that use a prime factor of the base.
In base-10 system, these are 1/2, 1/4, 1/5, 1/8, and 1/10
In base-2 system, the only prime factor is 2, so 1/2, 1/4, 1/8 would be expressed cleanly as decimals, while 1/5 or 1/10 would be repeating decimals.
we end up with leftovers from the converting a base-2 number into a base-10 representation.

[N]
Console.WriteLine("{0:R}", .1f + .2f);  // 0.3
Console.WriteLine("{0:R}", .1m + .2m);  // 0.3

------- 	

[Q] Count Occurrences Of A Repeated String

Count occurrences of a character in a repeated string. 
Given an integer N and a lowercase string S. The string is repeated until reaches the length of N letters. 
The task is to find the No. of occurrences of small character 'a' in the final string. 
Write a function that receives the string S, the N letters to be repeated and returns the occurrences of 'a' letter. The code must be complied successfully 

[A]
void Main()
{
	Console.WriteLine("abcd".DuplicateByN(10).CountOccurrences('a'));
}

public static class Extensions {
	public static string DuplicateByN(this string me, int length) {
		var sb = new StringBuilder();
		for(var i=0;i<length;i++) sb.Append(me);
		return sb.ToString();
	}

	public static int CountOccurrences(this string me, char charToCount) {
		var counter = 0;
		for(var i=0;i<me.Length;i++) 
			if(me[i] == charToCount) counter++;
		return counter;
	}
}

[R]
abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd
count=10

-------