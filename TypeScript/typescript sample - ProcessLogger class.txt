interface ILogger {
    readonly value: string;
    readonly processId: string;

    append(format: string, params: [string]): void;    
    writeToScreen(): void;
}

export class ProcessLogger implements ILogger {    
    // static members
    protected static seperator: string = ' \n';

    // data members
    protected _value: string[] = [];
    private _processId: string = '';
    
    constructor() {
        this._processId = this.uuid(); // unique id for each process (the glue between the screen outputs)
    }

    // properties (getter/setter)
    public get processId(): string { return this._processId; };
    public get value(): string { return this._value.join(ProcessLogger.seperator); };

    // methods
    private uuid() {
        return 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    
    public append(format: string, params?: string[]): void {   
        try {
            let msg = this.build(format, params);
            this._value.push(msg);
        }
        catch (e) { }
    };    

    public writeToScreen(): void {
        console.log(this.value);
    };

    // e.g: build('id: {0}, name: {1}', ['100', 'Roby']);
    public build(format: string, params?: string[]): string {
        try {
            let result = format;
            (params || []).forEach((p, i) => {
                result = result.replace('{' + i + '}', p);
            });

            return result;
        }
        catch (e) {            
            return '[EX] method: ProcessLogger.build, ex: ' + e;
        }
    };

    // e.g: appendAndPrint('calc: {0} + {1} = {2}', ['10', '20', '30']);
    public appendAndPrint(format: string, params?: string[]): string {
        let msg = this.build(format, params);
        this.append(msg);
        console.log(msg);
        return msg;
    }

    // e.g: appendAndPrintArray('array: {0}', [{ a: 1, b: 2 }, { a: 10, b: 20 }, { a: 100, b: 200 }], x => x % 2 == 0, x => x.a);
    public appendAndPrintArray(format: string, arr: any[], filter?: any, action?: any): string {
        let temp = arr;
        if (action) temp = (temp || []).map(action);
        if (filter) temp = (temp || []).filter(filter);

        let msg = this.build(format, [temp ? JSON.stringify(temp) : 'NULL']);
        this.append(msg);
        console.log(msg);
        return msg;
    }    
}

------------

import { ProcessLogger } from './core/logger';

let processLogger = new ProcessLogger();
processLogger.append('hello');
processLogger.append('with param {0}', ['A']);
processLogger.append('with params {0}, {1} and {2}', ['A', 'B', 'C']);
processLogger.writeToScreen();

/*
   hello
   with param A
   with params A, B and C	
*/