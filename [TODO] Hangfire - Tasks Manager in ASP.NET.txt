Hangfire - Tasks Manager in ASP.NET 
-----------------------------------
Reference:
see 'Quartz.NET - Tasks Manager in ASP.NET'
see 'TPL - QueueBackgroundWorkItem'

About:


Nuget:
> Install-Package Hangfire.Core
> Install-Package Hangfire.SqlServer
> Install-Package Hangfire.MySqlStorage

Sources:
https://docs.hangfire.io/en/latest/

Entities:

Bootstrap:

Supported Storages:
- SqlServer
- MySqlStorage
- Redis 
- Memory
..
..

note! 
Hangfire creates the required DB tables automatically so there's no need to define them manually.

Hangfire Dashboard:
default route - /hangfire
// TODO

Supported Jobs:
- Background Job			// see 'BackgroundJob'
- Delayed Background Job    // see 'BackgroundJob (Delayed)'
- RecurringJob				// see 'RecurringJob'
-

BackgroundJob:
a job that runs in the background.

// syntax
BackgroundJob.Enqueue(<Action>);
// sample
BackgroundJob.Enqueue(
	() => Console.WriteLine("Background Job")
);

BackgroundJob (Delayed):
a job that runs in the background after a delay.
aka 'Scheduled Job'

// syntax
BackgroundJob.Schedule(<Action>, <TimeSpan>);
// sample
BackgroundJob.Schedule(
	() => Console.WriteLine("Background Job with Delay"), 
	TimeSpan.FromMilliseconds(1000)
);

RecurringJob:
a job that keeps running by an interval
aka 'Timer Job'

// syntax
RecurringJob.AddOrUpdate(<Action>, <Interval>);
// sample
RecurringJob.AddOrUpdate(
	() => Console.WriteLine("Recurring Job - runs every minute"), 
	Cron.Minutely   // see 'Cron options'
);

Cron options:
a commands scheduler.

- Yearly(<month>?, <day>?, <hour>?, <minute>?)
- Monthly(<day>?, <hour>?, <minute>?) 
- MonthInterval(<interval>)
- Weekly(<dayOfWeek>?, <hour>?, <minute>?)
- Daily(<hour>, <minute>?)
- DayInterval(<interval>)
- Hourly(<minute>?)
- HourInterval(<interval>)
- Minutely()
- MinuteInterval(<interval>)
- Never()

--------------------------------------------------------------
// TODO ????

installation: 
need to install the 'Core' and a 'Storage' (see Supported Storages)

e.g:
> Install-Package Hangfire.Core
> Install-Package Hangfire.SqlServer

---

About:
an open source library ... 
scheduling background jobs in .Net.
no need a Windows Service to use Hangfire in your application.
we can use Hangfire in Web and Console applications.
Hangfire has a built-in dashboard! (see 'Hangfire Dashboard')

---

Hangfire
https://www.hangfire.io/
http://docs.hangfire.io/en/latest/
/hangfire dashboard
BackgroundJob.Enqueue(() => Console.WriteLine("Fire-and-forget"));
BackgroundJob.Schedule(() => Console.WriteLine("Delayed"), TimeSpan.FromDays(1));
RecurringJob.AddOrUpdate(() => Console.Write("Recurring"), Cron.Daily);

---

// global.asax
protected void Application_Start() {               
    HangfireManager.Start();            
}

protected void Application_End(object sender, EventArgs e) {
    HangfireManager.Stop();
}

// HangfireManager.cs
using Hangfire;
using Hangfire.SqlServer;

public class HangfireManager
{
    private static BackgroundJobServer _backgroundJobServer;

    public static bool Start() {
        try
        {
            var config = GlobalConfiguration.Configuration;

            // use MS-SQL Storage
            config.UseSqlServerStorage(Config.Instance.HangfireConnStr);    
            _backgroundJobServer = new BackgroundJobServer(new BackgroundJobServerOptions { WorkerCount = 1 });

            var p = new NotificationsProcess();
            RecurringJob.AddOrUpdate("NotificationsProcess", () => p.Run(), Cron.Minutely);
            return true;
        }
        catch (AggregateException aex) {
            Debug.WriteLine($"[ERROR] HangfireManager.Start. ex: {aex.Message}");
            return false;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ERROR] HangfireManager.Start. ex: {ex.Message}");
            return false;
        } 
    }

    public static void Stop() {
        _backgroundJobServer.Dispose();
    }
}

// NotificationsProcess.cs
public class NotificationsProcess : IProcess {
	public bool IsRunning { protected set; get; }

	public void Run() {		
		if (this.IsRunning) return;
            
		try {
			this.IsRunning = true;
		}
		catch(Exception ex) {
			Debug.WriteLine($"[ERROR] NotificationsProcess.Run. ex: {ex.Message}");
		}
		finally {
			this.IsRunning = false;
		}
	}
}

---
using OWIN

// Startup.cs
using System;
using Microsoft.Owin;
using Owin;
using Hangfire;

[assembly: OwinStartupAttribute(typeof(Startup))]
public partial class Startup {
    public void Configuration(IAppBuilder app) {
        ConfigureAuth(app);
        GlobalConfiguration.Configuration.UseSqlServerStorage("DefaultConnection");     // set storage    
        app.UseHangfireDashboard(); 	// apply the dashboard 
        app.UseHangfireServer();		// start the server 
    }
}


---

---

---

---

---

---

---

---

---