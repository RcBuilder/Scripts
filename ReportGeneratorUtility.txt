ReportGeneratorUtility
----------------------

// required interface
public interface IReport {
    string AsHTML(string filePath);
}

// base report (abstraction)
public abstract class BaseReport : IReport {
    protected readonly string basePath = AppDomain.CurrentDomain.BaseDirectory + "\\Templates\\";

    protected string TemplatePage { set; get; }
    protected string TemplateRow { set; get; }

    public BaseReport(string TemplatePageName, string TemplateRowName) {
        this.TemplatePage = File.ReadAllText(basePath + TemplatePageName, Encoding.UTF8);
        this.TemplateRow = File.ReadAllText(basePath + TemplateRowName, Encoding.UTF8);
    }

    public string AsHTML(string filePath) {
        var sb = new StringBuilder();
        RenderRows(ref sb, filePath);            
        return this.TemplatePage.Replace("{{Rows}}", sb.ToString());
    }

    public abstract void RenderRows(ref StringBuilder sb, string filePath);
}

// deliveries report
public class DeliveriesReport : BaseReport
{
    public DeliveriesReport() : base("DeliveriesReportPage.html", "DeliveriesReportRow.html") { }

    public override void RenderRows(ref StringBuilder sb, string filePath)
    {
        string connectionString = string.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 12.0 Xml;HDR=YES;IMEX=1;MAXSCANROWS=0'", filePath);
        string query = "Select * From [Sheet1$]";

        using (var conn = new OleDbConnection(connectionString))
        {
            var cmd = new OleDbCommand(query, conn);
            conn.Open();
            using (var dr = cmd.ExecuteReader())
                while (dr.Read())
                    sb.AppendFormat(this.TemplateRow,
                        dr["Id"].ToString(),
                        dr["CreatedDate"].ToString(),
                        dr["EmployeeId"].ToString(),
                        dr["ProviderName"].ToString(),
                        dr["ToAddress"].ToString(),
                        dr["DeliveredOn"].ToString(),
                        dr["Amount"].ToString(),
                        dr["ClientName"].ToString(),
                        dr["DistanceInKM"].ToString(),
                        dr["ServiceCost"].ToString(),                            
                        dr["TransactionId"].ToString()
                    );
        }
    }
}

// Salary report 
public class SalaryReport : BaseReport
{
    public SalaryReport() : base("SalaryReportPage.html", "SalaryReportRow.html") { }

    public override void RenderRows(ref StringBuilder sb, string filePath)
    {
        string connectionString = string.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 12.0 Xml;HDR=YES;IMEX=1;MAXSCANROWS=0'", filePath);
        string query = "Select * From [Sheet1$]";

        using (var conn = new OleDbConnection(connectionString))
        {
            var cmd = new OleDbCommand(query, conn);
            conn.Open();
            using (var dr = cmd.ExecuteReader())
                while (dr.Read())
                    sb.AppendFormat(this.TemplateRow,
                        dr["RowId"].ToString(),
                        dr["EmployeeId"].ToString(),
                        dr["FromTime"].ToString(),
                        dr["ToTime"].ToString(),
                        dr["FirstName"].ToString(),
                        dr["LastName"].ToString(),
                        dr["ShiftTime"].ToString(),
                        dr["ShiftDeliveries"].ToString(),
                        dr["ShiftSalaryBRUTU"].ToString(),
                        dr["ShiftSalary"].ToString()
                    );
        }
    }
}

---------------------------

 // template
 // DeliveriesReportPage.html
 <!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <style>
        body {
            direction: rtl;
            text-align: right;
        }

        .header {
            background-color:#aaadca;
            color: #fff;
        }
    </style>
    <title>Report</title>
</head>
<body>
    <table class="table table-striped table-bordered">
        <thead>
            <tr class="header">
                <th scope="col">#</th>
                <th scope="col">תאריך משלוח</th>
                <th scope="col">מספר שליח</th>
                <th scope="col">שם ספק</th>
                <th scope="col">כתובת יעד</th>
                <th scope="col">תאריך מסירה</th>
                <th scope="col">סכום</th>
                <th scope="col">שם הלקוח</th>
                <th scope="col">מרחק (ק"מ)</th>
                <th scope="col">עלות השירות</th>
                <th scope="col">טרנזקציה</th>
            </tr>
        </thead>
        <tbody>
            {{Rows}}            
        </tbody>
    </table>
</body>
</html>

// DeliveriesReportRow.html
<tr>
    <th scope="row">{0}</th>
    <td>{1}</td>
    <td>{2}</td>
    <td>{3}</td>
    <td>{4}</td>
    <td>{5}</td>
    <td>{6}</td>
    <td>{7}</td>
    <td>{8}</td>
    <td>{9}</td>
    <td>{10}</td>
</tr>    

---------------------------

// using
private void button1_Click(object sender, EventArgs e)
{
    try
    {
        if (openFileDialog1.ShowDialog() != DialogResult.OK)
            return;

        var reportPathXls = openFileDialog1.FileName;
        if (string.IsNullOrEmpty(reportPathXls))
            return;

        IReport report = null;
        if (rDeliveries.Checked)
            report = new DeliveriesReport();
        if (rSalary.Checked)
            report = new SalaryReport();

        if (report == null)
            return;

        var HTML = report.AsHTML(reportPathXls);
        File.WriteAllText(Path.GetFileNameWithoutExtension(reportPathXls) + ".html", HTML);

        MessageBox.Show("Completed", "Result", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
    catch (Exception ex)
    {
        MessageBox.Show(ex.Message, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
    }
}   