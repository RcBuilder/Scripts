
w3schools:
https://www.w3schools.com/xml/xpath_axes.asp

----------------------------------------------

text
----
text()

e.g:
//div[@class = 'tabs']/h2[1]/text()

count
-----
count(exp)

e.g:
count(/div[@class = 'tabs']/h2)

contains
--------
contains(arg1, arg2)

e.g:
//div[contains(@class, 'title')]/a

position
--------
position()

e.g:
//div[position() < 3]
//div[position() > 1 and position() < 3]
//section/dl/*[position() > 1 and position() < 4]

last
----
last()

e.g:
//p[last()]
//p[last() - 1]
//script[last()]

node-name
---------
node-name(exp) // returns the node name

e.g:
node-name(//div/*[1]) 

number
------
number(string) // toNumber

e.g:
number('21') // 21
number('AB') // NaN

abs
---
abs(numeric)

abs(10) // 10
abs(-10) // 10

ceiling
-------
ceiling(numeric)

e.g:
ceiling(3.8) // 4

floor
-----
floor(numeric)

e.g:
floor(3.1) // 3

round
-----
round(numeric)

e.g:
round(3.4) // 3
round(3.55) // 4

string
------
string(value) // toString

e.g:
string(314) // '314'

compare
-------
compare(arg1, arg2) // returns 0, 1 or -1

e.g: 
compare('A', 'B') // -1  (A is less than B)
compare('C', 'B') // 1 (C is bigger than B) 
compare('AB', 'AB') // 0
compare('AB', 'ab') // -1

concat
------
concat(string, string ...)

e.g:
concat('A', 'B', 'CDE') // ABCDE

string-join
-----------
string-join((string, string ...), delimiter)

e.g:
string-join(('A', 'B', 'C'), '-') // A-B-C
string-join(('A', 'B', 'C'), ' ') // A B C
string-join(('A', 'B', 'C')) // ABC

----------------------------------------------

index
-----
[x]

e.g:
(/div/p/a)[1]
//p[1]

has attribute
-------------
@attribute

e.g:
//title[@lang]

attribute value
---------------
@attribute='value'

e.g:
// title[@lang='he']

get attribute
-------------
@attribute // returns the value of the attribute

e.g:
//h2/a/@href

numeric
-------
> < ..

e.g:
//p[@price > 30]

----------------------------------------------

characters
----------
* - any element/node
@* - any attribute

e.g:
//* 
//p[@*]
/div/*

more samples:
//section[@id='overview']/p//*/text()

----------------------------------------------

hierarchy
---------
/ - direct 
// - any

e.g:
//table[contains(@id, ''someTable'')]//tr
//div[contains(@id, ''someDiv'')]/span 
/body/div/table
//table[1]

----------------------------------------------

operators
---------
OR 
AND
+
-
*
div (/)
!=
<
>

e.g:
//div[@class and @style][1]

----------------------------------------------

axes
----
ancestor
ancestor-or-self	
attribute
child
descendant
descendant-or-self
following
following-sibling	
parent
preceding
preceding-sibling
self

e.g:
child::*
attribute::*
child::p

----------------------------------------------

following-sibling
-----------------

<h4></h4>
<p></p> 
<p></p>

e.g:
//h4/following-sibling::p

more samples:
//h2[contains(@class, 'activeTab')]/following-sibling::h2[1]
//div[@class = 'gallery']/following-sibling::div[1]

ancestor
--------
//img[@alt="Devon"]/ancestor::div[1]

----------------------------------------------

notes
-----

// search the whole document, from the ROOT!
.// same search from the current node relative point

