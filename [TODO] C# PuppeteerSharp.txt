*** Puppeteer Sharp ***
***********************

reference:
also see 'NodeJS/Puppeteer'

Sources
-------
https://github.com/kblok/puppeteer-sharp
http://www.puppeteersharp.com/api/index.html

Nuget
-----
Install-Package PuppeteerSharp -Version 2.0.0
  
Chrome Engine
-------------
in order to use this library, we MUST download the chrome engine! 
there are 2 ways to do that:
1. auto download using the BrowserFetcher class 
   await new BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision); // download chrome
   var browser = await Puppeteer.LaunchAsync(new LaunchOptions {            
        ExecutablePath = chromeFolder + "chrome.exe",    // Must have permissions            
		...
		...
    });

2. manual download 
   var chromeFolder = AppDomain.CurrentDomain.BaseDirectory + @"chrome\";
   var browser = await Puppeteer.LaunchAsync(new LaunchOptions {            
        ExecutablePath = chromeFolder + "chrome.exe",    // Must have permissions            
		...
		...
    });


Examples
--------

// [google-ads-search]

public async Task<HttpResponseMessage> Search(string phrase) {            
    try {
        var timeout = 10 * 1000;
        var chromeFolder = AppDomain.CurrentDomain.BaseDirectory + @"chrome\";

        var searchURL = "https://www.google.com/search?gl=il&q=" + HttpUtility.UrlEncode(phrase);                
        var browser = await Puppeteer.LaunchAsync(new LaunchOptions {
            Headless = true,
            ExecutablePath = chromeFolder + "chrome.exe",    // Must have permissions
            Timeout = timeout,
            DefaultViewport = null, // max resolution
            Args = new[] { "--no-sandbox", "--window-size=1920,1080" }
        });
                
        var page = await browser.NewPageAsync();                
        await page.GoToAsync(searchURL, new NavigationOptions
            {  Timeout = timeout }
        );
        ///await page.WaitForSelectorAsync("//div[@class=\"ad_cclk\"]");
        ///await Task.Delay(5000);

        var pageSource = await page.GetContentAsync();

        /* Take Screenshot
        try
        {
            var screenshotOutput = string.Concat(chromeFolder, @"Screenshots\", DateTime.Now.ToString("yyyyMMddHHmmss"), ".jpg");
            await page.ScreenshotAsync(screenshotOutput);
        }
        catch { }
        */

        var doc = new HtmlDocument();
        doc.LoadHtml(pageSource);

        var results = new GoogleResults();
        var adPaidNodes = doc.DocumentNode.SelectNodes("//div[@class=\"ad_cclk\"]/parent::li");
        var adOrganicNodes = doc.DocumentNode.SelectNodes("//div[@class=\"g\"]/div[@data-hveid]");
                
        if (adPaidNodes != null)
        {
            foreach (var node in adPaidNodes)
                results.Paid.Add(new GoogleAd
                {
                    Title = node.SelectSingleNode(".//h3[1]")?.InnerText,
                    Href = node.SelectSingleNode(".//a[2]")?.Attributes["href"]?.Value,
                    Description = node.SelectSingleNode(".//div[contains(@class, 'ads-creative')]")?.InnerText,
                });
        }

        if (adOrganicNodes != null)
        {
            foreach (var node in adOrganicNodes)
                results.Organic.Add(new GoogleAd
                {
                    Title = node.SelectSingleNode(".//h3[1]/span")?.InnerText,
                    Href = node.SelectSingleNode(".//div/div[1]/a[1]")?.Attributes["href"]?.Value,
                    Description = node.SelectSingleNode(".//div/div[2]/div")?.InnerText,
                });
        }

        var response = Request.CreateResponse(HttpStatusCode.OK, results);
        return response;
    }
    catch (Exception ex) {
        var response = Request.CreateResponse(HttpStatusCode.InternalServerError, ex);
        return response;
    }
}


public class GoogleAd
{
    [JsonProperty(PropertyName = "title")]
    public string Title { get; set; }
    [JsonProperty(PropertyName = "href")]
    public string Href { get; set; }
    [JsonProperty(PropertyName = "description")]
    public string Description { get; set; }        
}

public class GoogleResults
{
    [JsonProperty(PropertyName= "organic")]
    public List<GoogleAd> Organic { get; set; } = new List<GoogleAd>();
    [JsonProperty(PropertyName = "paid")]
    public List<GoogleAd> Paid { get; set; } = new List<GoogleAd>();
}


------------------------------------------
// TODO 
[TestConsole9.PuppeteerTests]


BrowserFetcher 
Viewport
SetContent
GoTo
Pdf
EvaluateExpression
WaitFor
Screenshot
...
Flag --window-size=1920,1080
DefaultViewport 
...
...


-

Full Screen:
use '--window-size' flag plus NO DefaultViewport (set it to be null)

-

await page.keyboard.press('Enter'); // Enter Key
await page.ClickAsync("input#c1");

-

await page.WaitForSelectorAsync("input[name=\"chkbox01\"]");
await Task.Delay(5000);

-

var pageSource = await page.GetContentAsync();
var doc = new HtmlDocument();
doc.LoadHtml(pageSource); 

-

get by xpath + event (click etc.)

-

await page.ClickAsync("input");
await page.WaitForSelectorAsync("input[name=\"chkbox01\"]");

var arrChkOptions = await page.XPathAsync("(//input[@name=\"chkservice\"])");
var chkPolicy = (await page.XPathAsync("(//input[@name=\"chkbox01\"])"))[0];

await arrChkOptions[1].ClickAsync();
await chkPolicy.ClickAsync();
await page.ClickAsync("[type=\"submit\"]");

-