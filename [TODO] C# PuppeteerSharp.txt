*** Puppeteer Sharp ***
***********************

reference:
also see 'NodeJS/Puppeteer'

Sources
-------
https://github.com/kblok/puppeteer-sharp
http://www.puppeteersharp.com/api/index.html

Nuget
-----
Install-Package PuppeteerSharp -Version 2.0.0
  
Chrome Engine
-------------
in order to use this library, we MUST download the chrome engine! 
there are 2 ways to do that:
1. auto download using the BrowserFetcher class 
   await new BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision); // download chrome
   var browser = await Puppeteer.LaunchAsync(new LaunchOptions {            
        ExecutablePath = chromeFolder + "chrome.exe",    // Must have permissions            
		...
		...
    });

2. manual download 
   var chromeFolder = AppDomain.CurrentDomain.BaseDirectory + @"chrome\";
   var browser = await Puppeteer.LaunchAsync(new LaunchOptions {            
        ExecutablePath = chromeFolder + "chrome.exe",    // Must have permissions            
		...
		...
    });


Examples
--------

// [google-ads-search]

public async Task<HttpResponseMessage> Search(string phrase) {            
    try {
        var timeout = 10 * 1000;
        var chromeFolder = AppDomain.CurrentDomain.BaseDirectory + @"chrome\";

        var searchURL = "https://www.google.com/search?gl=il&q=" + HttpUtility.UrlEncode(phrase);                
        var browser = await Puppeteer.LaunchAsync(new LaunchOptions {
            Headless = true,
            ExecutablePath = chromeFolder + "chrome.exe",    // Must have permissions
            Timeout = timeout,
            DefaultViewport = null, // max resolution
            Args = new[] { "--no-sandbox", "--window-size=1920,1080" }
        });
                
        var page = await browser.NewPageAsync();                
        await page.GoToAsync(searchURL, new NavigationOptions
            {  Timeout = timeout }
        );
        ///await page.WaitForSelectorAsync("//div[@class=\"ad_cclk\"]");
        ///await Task.Delay(5000);

        var pageSource = await page.GetContentAsync();

        /* Take Screenshot
        try
        {
            var screenshotOutput = string.Concat(chromeFolder, @"Screenshots\", DateTime.Now.ToString("yyyyMMddHHmmss"), ".jpg");
            await page.ScreenshotAsync(screenshotOutput);
        }
        catch { }
        */

        var doc = new HtmlDocument();
        doc.LoadHtml(pageSource);

        var results = new GoogleResults();
        var adPaidNodes = doc.DocumentNode.SelectNodes("//div[@class=\"ad_cclk\"]/parent::li");
        var adOrganicNodes = doc.DocumentNode.SelectNodes("//div[@class=\"g\"]/div[@data-hveid]");
                
        if (adPaidNodes != null)
        {
            foreach (var node in adPaidNodes)
                results.Paid.Add(new GoogleAd
                {
                    Title = node.SelectSingleNode(".//h3[1]")?.InnerText,
                    Href = node.SelectSingleNode(".//a[2]")?.Attributes["href"]?.Value,
                    Description = node.SelectSingleNode(".//div[contains(@class, 'ads-creative')]")?.InnerText,
                });
        }

        if (adOrganicNodes != null)
        {
            foreach (var node in adOrganicNodes)
                results.Organic.Add(new GoogleAd
                {
                    Title = node.SelectSingleNode(".//h3[1]/span")?.InnerText,
                    Href = node.SelectSingleNode(".//div/div[1]/a[1]")?.Attributes["href"]?.Value,
                    Description = node.SelectSingleNode(".//div/div[2]/div")?.InnerText,
                });
        }

        var response = Request.CreateResponse(HttpStatusCode.OK, results);
        return response;
    }
    catch (Exception ex) {
        var response = Request.CreateResponse(HttpStatusCode.InternalServerError, ex);
        return response;
    }
}


public class GoogleAd
{
    [JsonProperty(PropertyName = "title")]
    public string Title { get; set; }
    [JsonProperty(PropertyName = "href")]
    public string Href { get; set; }
    [JsonProperty(PropertyName = "description")]
    public string Description { get; set; }        
}

public class GoogleResults
{
    [JsonProperty(PropertyName= "organic")]
    public List<GoogleAd> Organic { get; set; } = new List<GoogleAd>();
    [JsonProperty(PropertyName = "paid")]
    public List<GoogleAd> Paid { get; set; } = new List<GoogleAd>();
}


------------------------------------------
// TODO 
[TestConsole9.PuppeteerTests]


BrowserFetcher 
Viewport
SetContent
GoTo
Pdf
EvaluateExpression
WaitFor
Screenshot
...
Flag --window-size=1920,1080
DefaultViewport 
...
...


-

Full Screen:
use '--window-size' flag plus NO DefaultViewport (set it to be null)

-

await page.keyboard.press('Enter'); // Enter Key
await page.ClickAsync("input#c1");

-

await page.WaitForSelectorAsync("input[name=\"chkbox01\"]");
await Task.Delay(5000);

-

var pageSource = await page.GetContentAsync();
var doc = new HtmlDocument();
doc.LoadHtml(pageSource); 

-

get by xpath + event (click etc.)

-

await page.ClickAsync("input");
await page.WaitForSelectorAsync("input[name=\"chkbox01\"]");

var arrChkOptions = await page.XPathAsync("(//input[@name=\"chkservice\"])");
var chkPolicy = (await page.XPathAsync("(//input[@name=\"chkbox01\"])"))[0];

await arrChkOptions[1].ClickAsync();
await chkPolicy.ClickAsync();
await page.ClickAsync("[type=\"submit\"]");

-

https://www.puppeteersharp.com/examples/index.html

-

var browserFetcherOptions = new BrowserFetcherOptions { 
    Path = $"{AppDomain.CurrentDomain.BaseDirectory}", 
    Platform = Platform.Win64,
    Product = Product.Chrome
};
await new BrowserFetcher(browserFetcherOptions).DownloadAsync();           

-

// screenshot fullscreen!
var browser = await Puppeteer.LaunchAsync(new LaunchOptions {
    Headless = true,
    Timeout = (10 * 1000),  // 10 sec
    ExecutablePath = $"{AppDomain.CurrentDomain.BaseDirectory}Win64-884014\\chrome-win\\chrome.exe",
    DefaultViewport = null, // max resolution
    Args = new[] { "--no-sandbox" }
});

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync("https://rcb.co.il/Service/WebsiteForYourBusiness");

var screenshotOptions = new ScreenshotOptions { 
    FullPage = true, 
    Quality = 100, 
    Type = ScreenshotType.Jpeg 
};

using (var screenshotStream = await webPage.ScreenshotStreamAsync(screenshotOptions))
using (var image = Image.FromStream(screenshotStream))
	image.Save("D:\\screenshot.jpg");  

browser.Dispose();

-

var downloadChrome = string.IsNullOrEmpty(ChromePath);
if (downloadChrome)
{
    var browserFetcherOptions = new BrowserFetcherOptions
    {
        Path = $"{AppDomain.CurrentDomain.BaseDirectory}",
        Platform = Platform.Win64,
        Product = Product.Chrome
    };
    var browserFetcher = new BrowserFetcher(browserFetcherOptions);
    var revisionInfo = await browserFetcher.DownloadAsync();
    ChromePath = revisionInfo.ExecutablePath;
}

var browser = await Puppeteer.LaunchAsync(new LaunchOptions
{                
    Headless = true,                
    Timeout = (10 * 1000),  // 10 sec
    ExecutablePath = ChromePath, /// $"{AppDomain.CurrentDomain.BaseDirectory}Win64-884014\\chrome-win\\chrome.exe",
    DefaultViewport = null, // max resolution
    Args = new[] { "--no-sandbox" }  // "--window-size=800,1080"
});

browser.Dispose();

-

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync(URL);
await webPage.PdfAsync("D:\\screenshot.pdf");

-

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync(URL);

var screenshotOptions = new ScreenshotOptions
{
    FullPage = true,
    Quality = 100,
    Type = ScreenshotType.Jpeg
};

using (var screenshotStream = await webPage.ScreenshotStreamAsync(screenshotOptions))
using (var image = Image.FromStream(screenshotStream))
    image.Save("D:\\screenshot.jpg"); 

-

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync(URL);
Stream pdfStream = await webPage.PdfStreamAsync();

pdfStream.Position = 0;
using (var fs = new FileStream(FilePath, FileMode.OpenOrCreate, FileAccess.ReadWrite))
    PdfStream.CopyTo(fs);
pdfStream.Dispose();

-

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync(URL);
byte[] data = await webPage.PdfDataAsync();

-

WINDOWS-7 Support:
to use Puppeteer# in windows-7, we need to create a socket manually and pass it on as a 'WebSocketFactory' property

exception
"Failed to create connection, System.PlatformNotSupportedException: The WebSocket protocol is not supported on this platform."

https://www.nuget.org/packages/System.Net.WebSockets.Client.Managed/
> Install-Package System.Net.WebSockets.Client.Managed -Version 1.0.22

async Task<WebSocket> CreateWebSocket(Uri url, IConnectionOptions options, CancellationToken cancellationToken)
{
    var result = new System.Net.WebSockets.Managed.ClientWebSocket();
    result.Options.KeepAliveInterval = TimeSpan.Zero;
    await result.ConnectAsync(url, cancellationToken).ConfigureAwait(false);
    return result;
}

WebSocketFactory webSocketFactory = CreateWebSocket;
var browser = await Puppeteer.LaunchAsync(new LaunchOptions
{
    WebSocketFactory = webSocketFactory,
    Headless = true,
    Timeout = (10 * 1000),  // 10 sec
	IgnoreHTTPSErrors  = true,
    ExecutablePath = @"C:\inetpub\wwwroot\DocumentsService\Win64-884014\chrome-win\chrome.exe",
    DefaultViewport = null,
    Args = new[] { "--no-sandbox", "--disable-gpu" }  // "--window-size=800,1080"
});

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync("http://example.com/");
browser.Dispose();

-

// full sample - get pdf as stream
// + download chrome if path not provided 
// + windows-7 support
public async Task<Stream> CreateFromBrowser(string URL, string ChromePath = null)
{
    var browser = await this.CreateWebBrowser(ChromePath);
    var webPage = await browser.NewPageAsync();
    await webPage.GoToAsync(URL);
    var stream = await webPage.PdfStreamAsync();      
	browser.Dispose();

	return stream;
}

private async Task<Browser> CreateWebBrowser(string ChromePath) {
    async Task<WebSocket> CreateWebSocketTask(Uri url, IConnectionOptions options, CancellationToken cancellationToken)
    {
        var result = new System.Net.WebSockets.Managed.ClientWebSocket();
        result.Options.KeepAliveInterval = TimeSpan.Zero;
        await result.ConnectAsync(url, cancellationToken).ConfigureAwait(false);
        return result;
    }

    var downloadChrome = string.IsNullOrEmpty(ChromePath);
    if (downloadChrome)
    {
        var browserFetcherOptions = new BrowserFetcherOptions
        {
            Path = $"{AppDomain.CurrentDomain.BaseDirectory}",
            Platform = Platform.Win64,
            Product = Product.Chrome
        };
        var browserFetcher = new BrowserFetcher(browserFetcherOptions);
        var revisionInfo = await browserFetcher.DownloadAsync();
        ChromePath = revisionInfo.ExecutablePath;  // set the created chrome path
    }

    var launchOptions = new LaunchOptions
    {
        Headless = true,
        Timeout = (10 * 1000),  // 10 sec
		IgnoreHTTPSErrors  = true,
        ExecutablePath = ChromePath,
        DefaultViewport = null, // max resolution
        Args = new[] { "--no-sandbox", "--disable-gpu" }  // "--window-size=800,1080"
    };

    if (Environment.OSVersion.Version.Major < 10)
        launchOptions.WebSocketFactory = CreateWebSocketTask;  // support for windows-7

    var browser = await Puppeteer.LaunchAsync(launchOptions);
    return browser;
} 

-

BUG:
'ERR_CERT_COMMON_NAME_INVALID' on localhost with Puppeteer launch

Error:
using IIS and Puppeteer to access https website internally using 127.0.0.1 (localhost)

Solution:
set 'IgnoreHTTPSErrors' flag to true
https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#puppeteerlaunchoptions

IIS:
should include 127.0.0.1 binding

sample:
var launchOptions = new LaunchOptions {
    Headless = true,                
    Timeout = (10 * 1000),  // 10 sec
    ExecutablePath = ChromePath, /// $"{AppDomain.CurrentDomain.BaseDirectory}Win64-884014\\chrome-win\\chrome.exe",
    DefaultViewport = null, // max resolution
    IgnoreHTTPSErrors  = true,
    Args = new[] { "--no-sandbox", "--disable-gpu" }  // "--window-size=800,1080"
};
            
if (Environment.OSVersion.Version.Major < 10)                            
    launchOptions.WebSocketFactory = CreateWebSocketTask;  // support for windows-7
            
var browser = await Puppeteer.LaunchAsync(launchOptions);
browser.Dispose();

BUG:
multiple instances of chromium under the 'Task Manager'

Error:
no error message

Solution:
missing browser Dispose (or using clause)
browser.Dispose();