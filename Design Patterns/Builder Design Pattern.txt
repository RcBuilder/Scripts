Builder Design Pattern
----------------------

// interfaces
public interface IPagingBuilder
{
    void BuildPath(string URL);                
    void BuildQuery(string Query);
    void BuildParam(string ParamName, string ParamValue);
    void BuildPageNum(string ParamName, int PageNum);

    string GetResult();
}

public interface IPageIdBuilder
{
    void BuildPageId(string PageId);
}

----

// Builders
public class PagingBuilder : IPagingBuilder
{        
    protected Dictionary<string, string> Parameters { set; get; }
    protected string Path { set; get; }        
        
    public virtual void BuildPath(string URL) {
        var uri = new Uri(URL);
        this.Path = string.Concat(uri.Scheme, "://", uri.Host, uri.LocalPath);
    }

    public virtual void BuildQuery(string Query) {
        // query mapping
        this.Parameters = Common.Query2Dictionary(Query);

        if (this.Parameters == null)
            this.Parameters = new Dictionary<string, string>(); //default - empty
    }

    public virtual void BuildParam(string ParamName, string ParamValue) {
        if (this.Parameters.ContainsKey(ParamName))
            this.Parameters[ParamName] = ParamValue;
        else
            this.Parameters.Add(ParamName, ParamValue);
    }
        
    public virtual void BuildPageNum(string ParamName, int PageNum) {
        var sPageNum = PageNum.ToString();
        this.BuildParam(ParamName, sPageNum);
    }

    public string GetResult()
    {
        var Query = string.Join("&", this.Parameters.Select(x => x.Key + "=" + x.Value));
        return this.Parameters.Count == 0 ? this.Path : string.Concat(this.Path, "?", Query);
    }
}

-

public class MontefiorePagingBuilder : PagingBuilder {
    public override void BuildPageNum(string ParamName, int PageNum) {
        base.BuildPageNum(ParamName, (PageNum - 1) * 50);
    }
}

-

public class SkinnerIncPagingBuilder : PagingBuilder, IPageIdBuilder
{
    public override void BuildPath(string URL) {
        base.BuildPath("https://www.skinnerinc.com/auctions/auction.php");   
    }

    public override void BuildQuery(string Query) {            
        base.BuildQuery("limit=30&op=lots&view=30&sort_lot=0&display=list&noredir=1");            
    }

    public void BuildPageId(string PageId) {
        base.BuildParam("saleno", PageId);
    }
}

----

// Director
public class PagingBuilderDirector
{
    public void Construct(IPagingBuilder builder, string URL, string PageId, StepPaging PagingData)
    {
        builder.BuildPath(URL);            
        builder.BuildQuery(new Uri(URL).Query);
        builder.BuildPageNum(PagingData.PagingParamName, PagingData.PagingPageNumber);

        if (builder is IPageIdBuilder)
            ((IPageIdBuilder)builder).BuildPageId(PageId);
    }
}

----

// Builder Factory
public class PagingBuilderFactory : IFactory<string, IPagingBuilder>
{
    public IPagingBuilder Produce(string Name) {
        switch (Name)
        {
            case "MontefiorePagingBuilder": return new MontefiorePagingBuilder();
            case "SkinnerIncPagingBuilder": return new SkinnerIncPagingBuilder();
            default: return new PagingBuilder();
        }
    }
}

----

// using 
// paging Builder to build the next page
var pagingBuilderFactory = new PagingBuilderFactory();
var pagingBuilder = pagingBuilderFactory.Produce(step.Paging.PagingBuilder);

// director - construct the Builder
var pagingBuilderDirector = new PagingBuilderDirector();
pagingBuilderDirector.Construct(pagingBuilder, documentURL, this.PageId, step.Paging);
                
var nextPage = pagingBuilder.GetResult();
document = documentLoader.Load(nextPage);