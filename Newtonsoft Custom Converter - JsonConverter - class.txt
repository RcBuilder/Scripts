Create a Custom Converter for a class
-------------------------------------
we can also use a custom converter on a property level
see 'Newtonsoft Custom Converter - JsonConverter - property.txt'


using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

/*  -- using --
    var fooIn = new Foo { FooId = 1, FooName = "FooA" }; 
    var jsonSTR = JsonConvert.SerializeObject(fooIn, new MyJsonConverter());
    Foo fooOut = JsonConvert.DeserializeObject<Foo>(jsonSTR, new MyJsonConverter());
*/
public class MyJsonConverter : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer){
        var t = JToken.FromObject(value);

        // code ...
            
        t.WriteTo(writer);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
        throw new NotImplementedException(); // Unnecessary - CanRead is false so this method will not be applied!  
    }

    // determine whether to use the current class ReadJson or to skip it and use the default parsing
    public override bool CanRead {
        get { return false; }
    }

    // determine whether to use the current class WriteJson or to skip it and use the default parsing
    public override bool CanWrite {
        get { return true; }
    }

    public override bool CanConvert(Type objectType) {
        return true;
    }
}