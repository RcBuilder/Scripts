C# ConvertToBaseX
-----------------
Convert From Base 10 to Base X.
this function handles conversion from base 10 (aka decimal) to ANY other base (bin, oct, hex and up to base62). 

syntax:
string ConvertToBaseX(<value>, <base>);

e.g:
// convert the value 10 (dec) to base 16 (hex)
ConvertToBaseX(10, 16);  // A 

notes:
use this technique to generate a short-URL for web references. 
best practice is to use high base (62 is recommended)

base-array values:
the array which serves as our source-map should have the specified order
0-9
A-Z
a-z

[0, 1, 2 ... 9, A, B ... y, z]

---

(built-in) ToString:
use <number>.ToString(<format>) to convert to HEX value.
the format should be "x" and the number of digits (e.g: "x2")
14.ToString("x")  // E
14.ToString("x2") // 0E
14.ToString("x4") // 000E

(built-in) Convert.ToString:
use Convert.ToString(<number>, <base>) to convert to one of the following bases: 2, 8, 10, 16
Convert.ToString(14, 2)  // 1110
Convert.ToString(14, 8)  // E
Convert.ToString(14, 10) // 16
Convert.ToString(14, 16) // 14

---

logic-process:
from base 10 to ANY base (2, 16, 32, 62, 64 etc.)!
1. define an array to serve as our source-map, the size is based on the target-base. 
   a reminder - based on the sort convention (see 'base-array values')

   e.g:
   if the target base is 8, we'll have an array of 8 characters. 
   source-map = [0,1,2,3,4,5,6,7]

2. use MOD (%) arithmetic action on the provided dec in-value and the target-base.
3. use DIV (/) arithmetic action on the provided dec in-value and the target-base, override the in-value. 
4. return steps 2 and 3 till the in-value is 0. 
5. take all results of the MOD actions (from last to first)
6. use them as indexes to the source-map (array) to extract each character correspondingly.

// process example
given 
in-value = 14 
target-base = 8
-
source-map = [0,1,2,3,4,5,6,7]
-
14 % 8 = 6     
in-value = (14 / 8) = 1
1 % 8 = 1
in-value = (1 / 8) = 0
-
mod1 result = 6
mod2 result = 1
-
index 6 in source-map = 6
index 1 in source-map = 1
-
result = 16  // 14 in base 8 equals to 16

---

source-code:

// generate a base62 value from a number
string ConvertToBase62(int value){	
	return ConvertToBaseX(value, 62);
}

string ConvertToHEX(int value){	
	return ConvertToBaseX(value, 16);
}

string ConvertToBIN(int value){	
	return ConvertToBaseX(value, 2);
}

string ConvertToBaseX(int value, int baseToUse){
	if(baseToUse < 2) return null; // min base 2

	var charactersSet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	var baseDigits = new string(charactersSet.Take(baseToUse).ToArray());
	var baseNum = baseDigits.Length;
	Console.WriteLine($"base {baseNum} ({baseDigits})");
	
	var result = value == 0 ? "0" : "";
	var mod = 0;
	var current = "";
	
	while (value != 0)
	{
	    mod = (int)(value % baseNum); 
	    current = baseDigits.Substring(mod, 1);
	    result = current + result;
	    value = value / baseNum;	
	    Console.WriteLine($"mod: {mod} ({value} % {baseNum}), current: {current} (array[{mod}]), value: {value}");
	}

	return result;
}

---

using:

Console.WriteLine($"result: {ConvertToBaseX(10, 2)}");  // 1010
Console.WriteLine($"result: {ConvertToBaseX(10, 8)}");	// 12
Console.WriteLine($"result: {ConvertToBaseX(10, 10)}");  // 10
Console.WriteLine($"result: {ConvertToBaseX(10, 16)}");  // A

Console.WriteLine($"result: {ConvertToBaseX(140, 12)}");  // B8
Console.WriteLine($"result: {ConvertToBaseX(140, 8)}");  // 214

Console.WriteLine($"result: {ConvertToBase62(140)}");  // 2G
Console.WriteLine($"result: {ConvertToBase62(94255)}");	 // OWF

Console.WriteLine($"result: {ConvertToHEX(140)}");  // 8C
Console.WriteLine($"result: {ConvertToBIN(250)}");  // 11111010
