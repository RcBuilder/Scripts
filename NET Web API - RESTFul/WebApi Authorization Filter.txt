WebApi Authorization Filter
---------------------------

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
public class AuthorizeRequestAttribute : AuthorizationFilterAttribute {
    public override void OnAuthorization(HttpActionContext context) {        
        // Authorization: Basic Base64([User]:[Password])        

        try {
            // [AllowAnonymous]
            if (context.ActionDescriptor.GetCustomAttributes<AllowAnonymousAttribute>().Any()) {
                base.OnAuthorization(context);
                return;
            }

            var authorization = context.Request.Headers.Authorization;
            if (authorization == null)
                throw new HttpException((int)HttpStatusCode.Unauthorized, "No Authorization Header");

            if (authorization.Scheme != "Basic")
                throw new HttpException((int)HttpStatusCode.Unauthorized, "Not a Basic Authorization");

            var encodedCredentials = authorization.Parameter;
            var credentials = Encoding.UTF8.GetString(Convert.FromBase64String(encodedCredentials));
            var user = credentials.Split(':')[0];
            var password = credentials.Split(':')[1];

            if (user != Config.Keys.AuthorizationKey || password != Config.Keys.AuthorizationPassword)                    
                throw new HttpException((int)HttpStatusCode.Unauthorized, "Unauthorized Access");

            base.OnAuthorization(context);
        }
        catch (HttpException ex) {
            context.Response = new HttpResponseMessage((HttpStatusCode)ex.GetHttpCode()) {
                Content = new StringContent(ex.Message)
            };
        }
        catch (Exception ex) {
            context.Response = new HttpResponseMessage(HttpStatusCode.Unauthorized) {
                Content = new StringContent(ex.Message)
            };
        }
    }
}


using
-----

[AuthorizeRequest]    
public class HomeController : ApiController
{
    [AllowAnonymous]
    [Route("api/a/{p1}")]
    [HttpGet]
    public ApiResponse FunA(string p1){ ... }
    
    [Route("api/b/{p1}")]
    [HttpGet] 
    public ApiResponse FunB(string p1){ ... }
}