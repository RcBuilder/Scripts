=== SWAGGER ===

****************************
** Common ******************
** NSwagStudio *************
** EMBEDDED FOR WEB API ****
** EMBEDDED FOR WCF ********
****************************

Common
------
uses for documentation and testings of RestAPIs
creates the RESTful contract for your API, detailing all of its resources and operations.

http://swagger.io/
http://swagger.io/specification/
http://swagger.io/swagger-ui/

demo:
http://petstore.swagger.io/

editor:
once we generated a swagger json, we can view it using any swagger viewer!
there's an online viewer on the swagger formal site (under tools menu)
http://editor.swagger.io/#/

modes: 
1. Embedded 
   this mode allows us to create a swagger service within our own project. the service include a UI page which presents the current project api documentation. 
   on this mode we can change the swagger UI page and customize it for our needs.    

2. Swagger Json 
   a pure json which represents the api state and can be loaded to any swagger viewer. 
   there's an online swagger viewer in the official site. (tools menu)

NSwagStudio
-----------
a tool which generates a swagger json (which then can be loaded by any swagger editor) based on dll's

sorce:
https://github.com/NSwag/NSwag/wiki/NSwagStudio

using:
just load the assemblies, set some configuration and click on generate to create a valid swagger json
based on the exist api controllers 

steps:
1. open the utility
2. (tab) Web API Assembly 
3. choose the asseblies to load 
4. click on 'Load Assemblies' button
5. choose the controllers to use 
6. set configuration 
7. click on 'Generate Outputs' button (right pane)

EMBEDDED FOR WEB API
--------------------
nuget:
package: Swashbuckle 
Install-Package Swashbuckle

url:
/swagger
/swagger/docs/v1

configuration:
App_Start\SwaggerConfig.cs

add comments:
1. project properties -> Buid -> Output -> check the 'XML document file' and set a file name
2. SwaggerConfig.cs -> c.IncludeXmlComments(GetXmlCommentsPath())
3. implement GetXmlCommentsPath - should return the path to the xml file in the bin folder
4. add xml remarks to the services

change ui:
1. SwaggerConfig.cs -> c.EnableSwaggerUI
2. Inject css, html and js (if needed)
   c.InjectStylesheet([Assembly], [Css Path])
   c.CustomAsset("index", [Assembly], [Html Path])
   note: files path consists of the ProjectName.FolderName.FileName

3. create the files 
   note: the html file MUST be named index.html! 

4. set the files as embedded resources 
5. download templates for your files (instead of write them from scratch) 

EMBEDDED FOR WCF
----------------

live demo:
see project 'TestSwagger'

source:
https://github.com/abelsilva/swaggerwcf

nuget:
Install-Package SwaggerWcf

url:
/swagger  (set on route)

swagger service route: 
[Global.asax - Application_Start] 
RouteTable.Routes.Add(new ServiceRoute("swagger", new WebServiceHostFactory(), typeof(SwaggerWcfEndpoint)));
note: import System.ServiceModel.Activation

configuration:
[web.config]

<configSections>
    <section name="swaggerwcf" type="SwaggerWcf.Configuration.SwaggerWcfSection, SwaggerWcf" />
  </configSections>

  <swaggerwcf>
    <tags>
      <tag name="SwaggerTag" visible="true" />
    </tags>
    <settings>
      <setting name="InfoTitle" value="SampleService" />
      <setting name="InfoDescription" value="Sample Service to test SwaggerWCF" />
      <setting name="InfoVersion" value="0.0.1" />
      <setting name="InfoTermsOfService" value="Terms of Service" />      
      <setting name="InfoContactName" value="Roby Cohen" />
      <setting name="InfoContactUrl" value="http://www.rcb.co.il" />
      <setting name="InfoContactEmail" value="Rcbuilder@walla.com" />
      <setting name="InfoLicenseUrl" value="http://www.rcb.co.il/LICENSE" />
      <setting name="InfoLicenseName" value="License" />
    </settings>
  </swaggerwcf>

  <system.serviceModel>
	<serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />
  </system.serviceModel>

definitions:
use Swagger Attributes to decorate services, contracts and types

// decorate an interface 
[SwaggerWcfPath([Name], [Description])] 
e.g:
[SwaggerWcfPath("Get Data", "bla bla bla...")]
[OperationContract(Action = "Data")]
[WebInvoke(UriTemplate = "/Data/{value}", Method = "GET", ResponseFormat = WebMessageFormat.Json)]
string GetData(string value);

// decorate a method 
[SwaggerWcfTag("Data")]
[SwaggerWcfResponse(HttpStatusCode.Created, "Item created")]
[SwaggerWcfResponse(HttpStatusCode.BadRequest, "Bad request", true)]
[SwaggerWcfResponse(HttpStatusCode.InternalServerError, "Internal error", true)]
public string GetData(string value){
	...
	...
}

// decorate a service
[SwaggerWcf([ServicePath])]
e.g:
[SwaggerWcf("/Service1.svc")]
public class Service1 : IService1{...}

// decorate a type
[SwaggerWcfDefinition(ExternalDocsUrl = [url], ExternalDocsDescription = [description])]
e.g:
[SwaggerWcfDefinition(ExternalDocsUrl = "http://mydocs.com/book", ExternalDocsDescription = "book entity")]
public class Book{ ...}

tags:
used to create categories in the UI 

responses table:
use SwaggerWcfResponse attributes to generates a responses table per method. 

attributes:
SwaggerWcf   // Class,Interface
SwaggerWcfHidden   // Class, Method, Property, Parameter
SwaggerWcfTag   // Class, Method, Property, Parameter    
SwaggerWcfHeader   // Method
SwaggerWcfPath   // Method
SwaggerWcfParameter   // Parameter
SwaggerWcfProperty   // Property
SwaggerWcfResponse   // Method
SwaggerWcfDefinition   // Class
SwaggerWcfReturnType   // Method
SwaggerWcfContentTypes   // Method
SwaggerWcfSecurity   // Method