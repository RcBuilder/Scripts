
/*
   range:
   <value> = 0 - 1
   
   syntax:
   top-<value>
   top-abs-<value>
 
   e.g:
   top-0.83
   top-abs-0.7
*/

var maxBid = 3.00;
var minBid = 0.15;
var firstPageMaxBid = 0.90;
var dataFile = "AveragePositionData.txt";
var useFirstPageBidsOnKeywordsWithNoImpressions = false;

var bidIncreaseProportion = 0.2;
var bidDecreaseProportion = 0.2;
var targetPositionTolerance = 0.05;

function main() {
     
  var fieldJoin = ",";
  var lineJoin = "$";
  var idJoin = "#";
     
  var files = DriveApp.getFilesByName(dataFile);
  if (!files.hasNext()) {
    var file = DriveApp.createFile(dataFile,"\n");
    Logger.log("File '" + dataFile + "' has been created.");
  } else {
    var file = files.next();
    if (files.hasNext()) {
      Logger.log("Error - more than one file named '" + dataFile + "'");
      return;
    }
    Logger.log("File '" + dataFile + "' has been read.");
  }
 
  var labelIds = [];
     
  var labels = AdWordsApp.labels()
  .withCondition("KeywordsCount > 0")
  .withCondition("LabelName STARTS_WITH_IGNORE_CASE 'top-'")
  .get();
     
  while (labels.hasNext())    
    labelIds.push(labels.next().getId());      
     
  if (labelIds.length == 0) {
    Logger.log("No position labels found.");
    return;
  };
  
  Logger.log(labelIds.length + " position labels have been found.");

  var keywordData = {};     
  var ids = [];
  var uniqueIds = [];
     
  var report = AdWordsApp.report(
    'SELECT Id, Criteria, AdGroupId, AdGroupName, CampaignName, Impressions, CpcBid, FirstPageCpc, Labels, BiddingStrategyType, SearchTopImpressionShare, SearchAbsoluteTopImpressionShare ' +
    'FROM KEYWORDS_PERFORMANCE_REPORT ' +
    'WHERE Status = ENABLED AND AdGroupStatus = ENABLED AND CampaignStatus = ENABLED ' +
    'AND LabelIds CONTAINS_ANY [' + labelIds.join(",") + '] ' +
    'AND AdNetworkType2 = SEARCH ' +
    'AND Device NOT_IN ["HIGH_END_MOBILE"] ' +
    'DURING TODAY'
  );
     
  var rows = report.rows();
     
  while(rows.hasNext()){
    var row = rows.next();
       
    if (row["BiddingStrategyType"] != "cpc") {
      if (row["BiddingStrategyType"] == "Enhanced CPC" || row["BiddingStrategyType"] == "Target search page location" || row["BiddingStrategyType"] == "Target Outranking Share" || row["BiddingStrategyType"] == "None" || row["BiddingStrategyType"] == "unknown") {
        Logger.log("Warning: keyword " + row["Criteria"] + "' in campaign '" + row["CampaignName"] + "' uses '" + row["BiddingStrategyType"] + "' rather than manual CPC. This may overrule keyword bids and interfere with the script working.");
      } else {
        Logger.log("Warning: keyword " + row["Criteria"] + "' in campaign '" + row["CampaignName"] + "' uses the bidding strategy '" + row["BiddingStrategyType"] + "' rather than manual CPC. This keyword will be skipped.");
        continue;
      }
    }
       
    var positionTarget = '';
    var positionType = ''; // top or top-abs 
       
    if (row['Labels'].trim() == '--') {
      continue;
    }
    var labels = JSON.parse(row["Labels"].toLowerCase()); // Labels are returned as a JSON formatted string
       
    for (var i=0; i<labels.length; i++) {
      var labelName = labels[i];
      if (labelName.indexOf('top-abs-') == 0) {
        positionTarget = parseFloat(labelName.replace('top-abs-', '').replace(/,/g,'.'), 10);
        positionType = 'top-abs';
        break;
      }
      else if (labelName.indexOf('top-') == 0) {
        positionTarget = parseFloat(labelName.replace('top-', '').replace(/,/g,'.'), 10);
        positionType = 'top';
        break;
      }      
    };
    
    Logger.log('position target %s (%s)', positionTarget, positionType);
        
    if (positionTarget == '' || isNaN(positionTarget)) {
      continue;
    };
    
    ids.push(parseFloat(row['Id'], 10));
    var uniqueId = row['AdGroupId'] + idJoin + row['Id'];
    uniqueIds.push(uniqueId);
       
    keywordData[uniqueId] = {};
    keywordData[uniqueId]['Criteria'] = row['Criteria'];    
    keywordData[uniqueId]['Impressions'] = parseFloat(row['Impressions'].replace(/,/g,""),10);    
    keywordData[uniqueId]['CpcBid'] = parseFloat(row['CpcBid'].replace(/,/g,""),10);
    keywordData[uniqueId]['FirstPageCpc'] = parseFloat(row['FirstPageCpc'].replace(/,/g,""),10);
    
    var absTopSearchShare = customParseFloat(row['SearchAbsoluteTopImpressionShare']); // very first ad
    var topSearchShare = customParseFloat(row['SearchTopImpressionShare']); // top 4 ads
    keywordData[uniqueId]['AbsTopSearchShare'] = absTopSearchShare;    
    keywordData[uniqueId]['TopSearchShare'] = topSearchShare;    
       
    setPositionTargets(uniqueId, positionTarget, positionType);
  }
    
  Logger.log(uniqueIds.length + " labelled keywords found");
        
  setBidChange();
  setMinMaxBids();
  
  //Batch the keyword IDs, as the iterator can't take them all at once
  var idBatches = [];
  var batchSize = 5000;
  for (var i=0; i<uniqueIds.length; i += batchSize) {
    idBatches.push(uniqueIds.slice(i,i+batchSize));
  }
    
  Logger.log("Updating keywords");
     
  // Update each batch
  for (var i=0; i<idBatches.length; i++) {
    try {
      updateKeywords(idBatches[i]);
    } catch (e) {
      Logger.log("Error updating keywords: " + e);
      Logger.log("Retrying after one minute.");
      Utilities.sleep(60000);
      updateKeywords(idBatches[i]);
    }
  }
     
  Logger.log("Writing file.");  
  file.setContent(resultsString());    
  Logger.log("Finished.");
     
  
  
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

  function setPositionTargets(uniqueId, positionTarget, positionType){
    keywordData[uniqueId]['HigherPositionTarget'] = Math.min(positionTarget + targetPositionTolerance, 1);
    keywordData[uniqueId]['LowerPositionTarget'] = Math.max(positionTarget - targetPositionTolerance, 0);
    keywordData[uniqueId]['PositionTarget'] = positionTarget;
    keywordData[uniqueId]['PositionType'] = positionType;       
  }
     
  function bidChange(uniqueId){
       
    var newBid = -1;
    if(keywordData[uniqueId]['HigherPositionTarget'] === -1){
      Logger.log('not an HigherPositionTarget state');
      return newBid;
    }
       
    var cpcBid = keywordData[uniqueId]['CpcBid'];
    var minBid = keywordData[uniqueId]['MinBid'];
    var maxBid = keywordData[uniqueId]['MaxBid'];
       
    if (isNaN(keywordData[uniqueId]['FirstPageCpc'])) {
      Logger.log("Warning: first page CPC estimate is not a number for keyword '" + keywordData[uniqueId]['Criteria'] + "'. This keyword will be skipped");
      return -1;
    }
       
    var firstPageBid = Math.min(keywordData[uniqueId]['FirstPageCpc'], keywordData[uniqueId]['FirstPageMaxBid'], maxBid);
           
    var positionType = keywordData[uniqueId]['PositionType'];
    var currentPosition = keywordData[uniqueId][positionType == 'top-abs' ? 'AbsTopSearchShare' : 'TopSearchShare'];

    var positionTarget = keywordData[uniqueId]['PositionTarget'];
    var higherPositionTarget = keywordData[uniqueId]['HigherPositionTarget'];
    var lowerPositionTarget = keywordData[uniqueId]['LowerPositionTarget'];
       
    var bidIncrease = keywordData[uniqueId]['BidIncrease'];
    var bidDecrease = keywordData[uniqueId]['BidDecrease'];
       
    if((currentPosition < lowerPositionTarget) && (currentPosition !== 0)){      
      var newBid = Math.min((cpcBid + bidIncrease), maxBid);
    }
    else if((currentPosition > higherPositionTarget) && (currentPosition !== 0)) {      
      var newBid = Math.max((cpcBid-bidDecrease), minBid);
      if (cpcBid > firstPageBid) {
        var newBid = Math.max(firstPageBid,newBid);
      }
    }
    if((currentPosition === 0) && useFirstPageBidsOnKeywordsWithNoImpressions && (cpcBid < firstPageBid)){
      var newBid = firstPageBid;
      Logger.log('bid set as firstPageBid (%s)', firstPageBid);
    }
       
    if (isNaN(newBid)) {
      Logger.log("Warning: new bid is not a number for keyword '" + keywordData[uniqueId]['Criteria'] + "'. This keyword will be skipped");
      return -1;
    }
       
    Logger.log('[%s] positionType: %s, currentPosition: %s, positionTarget: %s, positionRange: %s > %s, bidIncrease: %s, bidDecrease: %s, minBid: %s, maxBid: %s, cpcBid: %s, newBid: %s', 
               uniqueId,
               positionType, 
               currentPosition.toFixed(2), 
               positionTarget,
               lowerPositionTarget.toFixed(2), 
               higherPositionTarget.toFixed(2), 
               bidIncrease.toFixed(2), 
               bidDecrease.toFixed(2),
               minBid,
               maxBid,
               cpcBid,
               newBid
    )
    
    if(newBid !== -1)
      Logger.log('bid should changed from %s to %s', cpcBid, newBid)    
    
    return newBid;
       
  }
     
  function keywordUniqueId(keyword){
    var id = keyword.getId();
    var idsIndex = ids.indexOf(id);
    if(idsIndex === ids.lastIndexOf(id)){
      return uniqueIds[idsIndex];
    }
    else{
      var adGroupId = keyword.getAdGroup().getId();
      return adGroupId + idJoin + id;
    }
  }
      
  function setMinMaxBids(){
    for(var x in keywordData){
      keywordData[x]['MinBid'] = minBid;
      keywordData[x]['MaxBid'] = maxBid;
      keywordData[x]['FirstPageMaxBid'] = firstPageMaxBid;
    }
  }
      
  function setBidChange(){
    for(var x in keywordData){
      keywordData[x]['BidIncrease'] = keywordData[x]['CpcBid'] * bidIncreaseProportion/2;
      keywordData[x]['BidDecrease'] = keywordData[x]['CpcBid'] * bidDecreaseProportion/2;
    }
  }

  function updateKeywords(idBatch) {
    var keywords = AdWordsApp.keywords()
    .withIds(idBatch.map(function(str){return str.split(idJoin);}))
    .get();
    
    while(keywords.hasNext()){
      var keyword = keywords.next();
      var uniqueId = keywordUniqueId(keyword);  
      var newBid = bidChange(uniqueId);
         
      if(newBid !== -1){
        keyword.setMaxCpc(newBid);
      }
         
    }
  }
       
  function resultsString(){
       
    var results = [];
    for(var uniqueId in keywordData){
      var resultsRow = [uniqueId, keywordData[uniqueId]['Impressions'], keywordData[uniqueId]['AbsTopSearchShare'], keywordData[uniqueId]['TopSearchShare']];
      results.push(resultsRow.join(fieldJoin));
    }
       
    return results.join(lineJoin);
  }
  
  function customParseFloat(value){    
    value = value.replace('%', '');

    if(value.indexOf('<') != -1)
      value = '5';

    if(value.indexOf('--') != -1)
      value = '0';

    value = parseFloat(value);

    if(value > 1)
      value = value / 100;
    
    return Math.round(value * 100) / 100;
  }
}