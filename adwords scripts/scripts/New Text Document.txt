/* 
	rule properties:
	{ fromTier, fromMatchType, toMatchType }
    
    match types:
    BROAD
    EXACT
    EXPANDED
    PHRASE
    NEAR_EXACT    
    NEAR_PHRASE
    
    note!
    use comma seperator for multiple 'from' match types
*/

/*	
	[rule] { includeSource: false, toMatchType=PHRASE, fromMatchType=NEAR_EXACT,BROAD }
    ... 
    ...
*/

var rules = [
  { includeSource: false, fromMatchType: 'PHRASE', toMatchType: 'EXACT' }  
];

var PERIOD = 'LAST_7_DAYS';  // // LAST_30_DAYS, LAST_7_DAYS, 20190101,20190301
var DEBUG = false;

function main() {   
  for(i in rules)
    processRule(rules[i]);
}

function processRule(rule){
  Logger.log('[rule] %s', rule);
  
  var fromTierCampaigns = loadCampaignsByName();      
  
  for(i in fromTierCampaigns){
  	var fromTierCampaign = fromTierCampaigns[i];
    
    var fromTierCampaignName = fromTierCampaign.getName();
    var fromTierCampaignId = fromTierCampaign.getId();
    
    Logger.log('from "%s" with types %s', fromTierCampaignName, rule.fromMatchType);
    
    var searchQueries = GetSearchQueries(fromTierCampaignId, rule.fromMatchType.split(','));    
    Logger.log('%s search queries found', searchQueries.length);
    
    if(searchQueries.length == 0) 
      continue;
    
    for(i in searchQueries){
      var searchQuery = searchQueries[i];        
      Logger.log('searchQuery: %s', searchQuery);

      var words = spitToWords(searchQuery);      
      var campaignToFind = fromTierCampaignName.replace(/\(\d+\)/i, '(' + words.length + ')');
      ///Logger.log('Destination: %s', campaignToFind);
      
      var toTierCampaigns = loadCampaignsByName(campaignToFind);   
      if(toTierCampaigns.length == 0) continue;
       
      var toTierCampaign = toTierCampaigns[0];
      var toTierCampaignName = toTierCampaign.getName();
      var toTierCampaignId = toTierCampaign.getId();
      
      if(!rule.includeSource && toTierCampaignName == fromTierCampaignName)
        continue;
      
      Logger.log('to "%s" with type %s', toTierCampaignName, rule.toMatchType);
      
      createAdGroup(toTierCampaign, words, rule.toMatchType);
    } 
  }
}

function countWords(phrase){
  /// return phrase.split(' ').filter(x => x.trim() != '').length;  
  
  /*
  var counter = 0;
  var arr = phrase.split(' ');
  for(i in arr)
    if(arr[i].trim() == '') continue;
    else counter++;
  return counter;  
  */
  
  return spitToWords(phrase).length;
}

function spitToWords(phrase){
  /// return phrase.split(' ').filter(x => x.trim() != '');  
    
  var arr = [];
  var temp = phrase.split(' ');
  for(i in temp)
    if(temp[i].trim() == '') continue;
    else arr.push(temp[i])
  return arr;  
}

function createAdGroup(campaign, words, matchType) {
  var phrase = words.join(' ');
  if(isKeywordExists(campaign, phrase, matchType))
  	return;
  
  var keywordToAdd;
  switch (matchType){
    default:
    case 'EXPANDED': 
    case 'BROAD': keywordToAdd = '+' + words.join('+');        
      break;
    case 'NEAR_EXACT': 
    case 'EXACT': keywordToAdd = '[' + phrase + ']';
      break;
    case 'NEAR_PHRASE':          
    case 'PHRASE': keywordToAdd = '"' + phrase + '"';
  }  
  
  Logger.log('create %s keyword', keywordToAdd);

  ///if(DEBUG == false)
    ///campaign.createNegativeKeyword(phrase);

}

function isKeywordExists(campaign, keywordText, keywordMatchType){
	return campaign.keywords()
      .withCondition('Text = "' + keywordText + '"')
      .withCondition('KeywordMatchType = ' + keywordMatchType)
      .get()
      .hasNext();
}

function isCampaignExists(campaignName){
	return AdWordsApp.campaigns()
      .withCondition('Name = "' + campaignName + '"')        	  
      .get()
      .hasNext();
}

function loadCampaignsByName(containsName){  
  var campaigns = [];
  
  var campaignsIter = AdWordsApp.campaigns()
      //.withCondition('LabelNames CONTAINS_ANY ["' + labelName + '"]')  	  
      .withCondition('Status = ENABLED');
  
  if(containsName)
  	campaignsIter.withCondition('Name = "' + containsName + '"') // CONTAINS_IGNORE_CASE
  campaignsIter = campaignsIter.get();
  
  while(campaignsIter.hasNext()) 
    campaigns.push(campaignsIter.next());  
  return campaigns;
}

function GetSearchQueries(campaignId, matchTypes){
  var searchQueries = [];
  
  var matchTypeMappingTable = {};
  matchTypeMappingTable['BROAD'] = 'broad';
  matchTypeMappingTable['EXACT'] = 'exact';
  matchTypeMappingTable['EXPANDED'] = 'broad';
  matchTypeMappingTable['PHRASE'] = 'phrase';
  matchTypeMappingTable['NEAR_EXACT'] = 'exact (close variant)';
  matchTypeMappingTable['NEAR_PHRASE'] = 'phrase (close variant)';
  matchTypeMappingTable.find = function(displayName){
    displayName = displayName.toLowerCase();
  	for(key in this)
      if(this[key].toLowerCase() == displayName)
        return key;
    return null;
  }

  var reportConfig = {
    includeZeroImpressions: true
  };  
  
  var query =  
      'SELECT Query, CampaignId, QueryMatchTypeWithVariant, KeywordId, AdGroupId ' +
      'FROM SEARCH_QUERY_PERFORMANCE_REPORT ' +
      'WHERE CampaignId = ' + campaignId + ' '+
      'AND CampaignStatus = ENABLED ' +
      'AND AdGroupStatus = ENABLED ' +
      'DURING ' + PERIOD;
  
  var report = DEBUG == true ? new SearchQueryReportMock() : AdWordsApp.report(query, reportConfig); 
  var rows = report.rows();
	
  while (rows.hasNext()) {
    var row = rows.next();
            
    var searchQuery = row['Query'].toLowerCase();
   	    
	// see 'matchTypeMappingTable' for available values
    var matchTypeDisplayName = row['QueryMatchTypeWithVariant'];
    var matchType = matchTypeMappingTable.find(matchTypeDisplayName);
    
    if(!matchType || matchTypes.indexOf(matchType) == -1) 
      continue;
    
    var keywordId = row['KeywordId'];
    var adGroupId = row['AdGroupId'];
    
    var isEnabled = true;
    if(keywordId){
      var keyword = AdWordsApp.keywords().withIds([[adGroupId, keywordId]]).get();      
      isEnabled = keyword.hasNext() ? keyword.next().isEnabled() : true;      
    }
    
    if(!isEnabled) continue;
    
    ///Logger.log('searchQuery: %s', searchQuery);
    if(searchQueries.indexOf(searchQuery) == -1)
    	searchQueries.push(searchQuery);
  }
  
  return searchQueries;
}

//-------------------------------------------------------------------------------

/* MOCK*/

function SearchQueryReportMock(){
	this.rows = function(){
    	return new SearchQueryReportRowsMock();
    }
}

function SearchQueryReportRowsMock() {
  var i = 0;
  
  // item: { Query, KeywordTextMatchingQuery, QueryMatchTypeWithVariant}
  var arr = [
    { Query: 'word', KeywordTextMatchingQuery: 'word', QueryMatchTypeWithVariant: 'phrase', KeywordId: '', AdGroupId: '' },
    { Query: 'word word', KeywordTextMatchingQuery: 'word word', QueryMatchTypeWithVariant: 'phrase', KeywordId: '', AdGroupId: '' },
    { Query: 'word word', KeywordTextMatchingQuery: 'word word', QueryMatchTypeWithVariant: 'exact (close variant)', KeywordId: '', AdGroupId: '' },
    { Query: 'word', KeywordTextMatchingQuery: 'word', QueryMatchTypeWithVariant: 'exact', KeywordId: '', AdGroupId: '' },
    { Query: 'word word word', KeywordTextMatchingQuery: 'word word word', QueryMatchTypeWithVariant: 'phrase', KeywordId: '', AdGroupId: '' }
  ];

  this.next = function(){
    return arr[i++];      
  }

  this.hasNext = function(){
    return arr.length > i;
  }
} 