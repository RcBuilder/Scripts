/* 
  this script manages accounts Ad Customizer Feeds from a shared google-sheet 
  
  [sheet-columns]
  Account ID	
  Feed Name	
  Value1	
  Value2	
  Value3	
  Start Date	
  End Date	
  Target Campaign	
  Target Ad Group	
  Target Keyword	
  Target Location	  
  Target Location Restriction	  
  Action Status	                // [Remove]
  Script Status	                // [Done, Error]
  Policy details	
  Device Preference	
  Custom Parameter

  [process]
    
  steps:
  1. load all rows need to be processed from the sheet ('Script Status' is NOT equals to 'Done')
  2. group rows by account 
  3. for each account > process the rows     
  4. for each row
     - find the relevant feed by its name
     - if 'Action Status' is set to 'Remove' - remove the feed items
     - if 'Action Status' is set to anything else - save a feed 
  5. save a feed:
     - if no such feed exists - create a new feed-source and a feed item using the sheet's provided data
     - if feed exists - update the item with the new details
       note! there's NO support for multiple items per feed source
  6. update the 'Script Status' with the relevant process status ('Done' or 'Error')
*/

var SHEET_URL = 'https://docs.google.com/spreadsheets/d/1JHBzYPZnOBPa3336Bw1utD-W-3e8nGS4WWXbcQD4U8A/edit#gid=0';

function main() {  
  var sheetService = SpreadsheetLoader.loadSheetServiceByURL(SHEET_URL); // load   
  var sheetNotExists = !sheetService;
  if(sheetNotExists){
    Logger.log('data source does NOT exists - stop processing...');
    return;
  }
  
  var adCustomizerDataService = AdCustomizerDataService(sheetService);
  
  /*
    adCustomizerDataService.setFeedStatus(2, 'Approved');
    Logger.log(adCustomizerDataService.getFeedRowIndex('111-111-1111', 'UK_Sale_Date'));    
    Logger.log(sheetService.letter2index('A'));
  */  
  
  var accountIds = adCustomizerDataService.getAccountsIds();
  for(i in accountIds){
    var accountId = accountIds[i];   
    
    if(!MccSelect(accountId)){
      Logger.log('no such account #%s - skipping...', accountId);
      continue; 
    }
    
    processAccount(accountId, adCustomizerDataService); 
  }
}

function MccSelect(accountId){
  var managedAccountItr = MccApp.accounts().withIds([accountId]).get();
  if(managedAccountItr.totalNumEntities() == 0) return false;
  MccApp.select(managedAccountItr.next());
  return true;
}

function processAccount(accountId, adCustomizerDataService){
  /* 
    [{ 
        feedName, 
        value1,
        value2,	
        value3, 
        startDate, 
        endDate, 
        targetCampaign, 
        targetAdGroup, 
        targetKeyword, 
        targetLocation, 
        targetLocationRestriction, 
        policyDetails,         
        devicePreference, 
        customParameter, 
        scriptStatus,
        actionStatus
    }]
  */
  var accountFeeds = adCustomizerDataService.getAccountFeedsToProcess(accountId);    
  var actualFeedsDic = getActualFeedsDic();
  
  Logger.log('[%s] found %s feeds to process', accountId, accountFeeds.length);  
  
  processFeeds(accountId, accountFeeds, actualFeedsDic, adCustomizerDataService);
  /// updateFeedsApprovalStatus(accountId, accountFeeds, actualFeedsDic, adCustomizerDataService);
}

/*
function updateFeedsApprovalStatus(accountId, accountFeeds, actualFeedsDic, adCustomizerDataService){
  var filtered = accountFeeds.filter(function(row){ return row.scriptStatus != 'Done' }); // Script Status   
  Object.keys(actualFeedsDic).forEach(function(feedNameKey){
    var current = actualFeedsDic[feedNameKey]; // TODO ->> How To receive a source approval status?
    var feedIndex = adCustomizerDataService.getFeedRowIndex(accountId, accountFeed.feedName);
  });
}
*/

function processFeeds(accountId, accountFeeds, actualFeedsDic, adCustomizerDataService){    
  for(i in accountFeeds){
    var accountFeed = accountFeeds[i];
    var feedIndex = adCustomizerDataService.getFeedRowIndex(accountId, accountFeed.feedName);
    ///Logger.log(accountFeed);  
    
    var current = actualFeedsDic[accountFeed.feedName];
        
    // remove feed 
    if(accountFeed.actionStatus.toLowerCase() == 'remove') 
    {
      Logger.log('removing feed %s...', accountFeed.feedName);
      removeFeed(current);
      adCustomizerDataService.setFeedScriptStatus(feedIndex, 'Done');
      continue;
    }
    
    // create/update
    if(!current) {
      Logger.log('creating feed %s...', accountFeed.feedName);
      var createdFeed = createFeed(accountFeed);
      if(!createdFeed) {
        Logger.log('## EX ## some error occured!');
        adCustomizerDataService.setFeedScriptStatus(feedIndex, 'Error');
        continue;
      }
      
      current = createdFeed;
      actualFeedsDic[accountFeed.feedName] = current;
    }
    
    Logger.log('saving feed item ...');
    var updatedFeedItem = saveFeedItem(current, accountFeed);
    if(!updatedFeedItem) {
      Logger.log('## EX ## some error occured!');
      adCustomizerDataService.setFeedScriptStatus(feedIndex, 'Error');
      continue;
    }
    
    adCustomizerDataService.setFeedScriptStatus(feedIndex, 'Done');
  }
}

function createFeed(feedMetadata){
  try{
    // create a feed source
    var builder = AdsApp.newAdCustomizerSourceBuilder(); 
    var operation = builder
    .withName(feedMetadata.feedName)  
    .addAttribute("Value1", 'text') 
    .addAttribute("Value2", 'text') 
    .addAttribute("Value3", 'text')     
    .addAttribute("Policy Details", 'text')   
    .addAttribute("Custom Parameter", 'text') 
    .build();  

    if(!operation.isSuccessful())
      return null;  
    return operation.getResult();  
  }
  catch(ex){
    Logger.log(ex);
    return null;
  }
}

function saveFeedItem(currentFeed, feedMetadata){   
  try{
    var currentFeedItem = null;

    // load feed-item  
    var temp = currentFeed.items().get();
    if(temp.totalNumEntities() > 0)
      currentFeedItem = temp.next();

    // no item found - create a new one
    if(!currentFeedItem){
      var builder = currentFeed.adCustomizerItemBuilder(); // update feed source item data    
      builder.withAttributeValue("Value1", '[INIT]') // [Required] must provide at least 1 attribute on the creation!

      var operation = builder.build(); // build 
      if(!operation.isSuccessful()) return null;
      currentFeedItem = operation.getResult();
    }

    // update custom attributes
    currentFeedItem.setAttributeValue("Value1", feedMetadata.value1); 
    currentFeedItem.setAttributeValue("Value2", feedMetadata.value2); 
    currentFeedItem.setAttributeValue("Value3", feedMetadata.value3); 
    currentFeedItem.setAttributeValue("Policy Details", feedMetadata.policyDetails);      
    currentFeedItem.setAttributeValue("Custom Parameter", feedMetadata.customParameter);

    // update dates      
    if(feedMetadata.startDate != '')
      currentFeedItem.setStartDate(Utilities.formatDate(feedMetadata.startDate, 'GMT', 'yyyyMMdd'));  // yyyyMMdd OR {year, month, day}    
    if(feedMetadata.setEndDate != '')
      currentFeedItem.setEndDate(Utilities.formatDate(feedMetadata.endDate, 'GMT', 'yyyyMMdd')); // yyyyMMdd OR {year, month, day}

    // update target entities
    if(feedMetadata.targetCampaign != '')
      currentFeedItem.setTargetCampaign(feedMetadata.targetCampaign);
    if(feedMetadata.targetCampaign != '' || feedMetadata.targetAdGroup)
      currentFeedItem.setTargetAdGroup(feedMetadata.targetCampaign, feedMetadata.targetAdGroup);  
    if(feedMetadata.targetKeyword != '')
      currentFeedItem.setTargetKeyword(feedMetadata.targetKeyword);

    // update device Preference
    currentFeedItem.setMobilePreferred(feedMetadata.devicePreference); 

    return currentFeedItem;
  }
  catch(ex){
    Logger.log(ex);
    return null;
  }
}

function removeFeed(currentFeed){
  var items = currentFeed.items().get();
  while(items.hasNext())
    items.next().remove();
}

function getActualFeedsDic(){
  var dic = {}; // dic<string, feed>
  var dataFeeds = AdsApp.adCustomizerSources().get();
  while(dataFeeds.hasNext()){
    var dataFeed = dataFeeds.next();
    dic[dataFeed.getName()] = dataFeed;
  }
  return dic;
}

// https://developers.google.com/google-ads/scripts/docs/reference/adsapp/adsapp_adcustomizersource  
function printActualFeeds(){
  var dataFeeds = AdsApp.adCustomizerSources().get();
  while(dataFeeds.hasNext()){
    var dataFeed = dataFeeds.next();
    
    Logger.log('[feed] %s', dataFeed.getName());
    var feedItems = dataFeed.items().get();
    while(feedItems.hasNext()){
      var feedItem = feedItems.next();
      Logger.log('%s', feedItem.getAttributeValue('Value1'));      
    }
  }  
}

// --- SERVICES ------------------------------------------------------------

/* AD-CUSTOMIZER DATA SERVICE */
var AdCustomizerDataService = function(sheetService) {   
  return {    
    getAccountsIds: function(){
      var values = [];
      
      var range = sheetService.getColumnValues(2, 2);
      for(r in range)
        for(c in range[r])
          if(values.indexOf(range[r][c]) == -1)
            values.push(range[r][c])
      return values;
    },    
    getAccountFeeds: function(accountId){
      var all = sheetService.findRowsByFilter(accountId, 2) || [];                   
      return all.map(function(row){
        return {
          feedName: row[2].trim(),	
          value1: row[3],	
          value2: row[4],	
          value3: row[5],	
          startDate: row[6],		
          endDate: row[7],		
          targetCampaign: row[8],		
          targetAdGroup: row[9],	
          targetKeyword: row[10],		
          targetLocation: row[11],		
          targetLocationRestriction: row[12],		          		
          policyDetails: row[15],		          		
          devicePreference: row[16],		
          customParameter: row[17],
          scriptStatus: row[14],
          actionStatus: row[13]
        }
      });
    },  
    getAccountFeedsToProcess: function(accountId){
      var all = this.getAccountFeeds(accountId);
      var filtered = all.filter(function(row){ return row.scriptStatus != 'Done' }); // Script Status            
      return filtered;
    },    
    getFeedRowIndex: function(accountId, feedName){
      return parseInt(sheetService.getRowIndexBy2Columns(2, accountId, 3, feedName));
    },
    setFeedStatus: function(rowIndex, value){
      // Approved, Removed, Under Review
      return sheetService.setValue(rowIndex, 14, value);
    },  
    setFeedScriptStatus: function(rowIndex, value){
      // Done, Error
      return sheetService.setValue(rowIndex, 15, value);
    }       
  }
}

/* SPREADSHEET SERVICE */
var SpreadSheetService = function(spreadSheet) {
  var _spreadSheet = spreadSheet;
  var _sheets = [];

  (function(){
    var sheetServices = [];
    var temp_sheets = spreadSheet.getSheets();
    for(var i= 0; i < temp_sheets.length; i++)
      _sheets.push(new SheetService(temp_sheets[i]));   
  })();   
  
  return {      
    sheets: _sheets,
	  spreadSheet: _spreadSheet, 
    getName: function(){
      return _spreadSheet.getName();
    },
    getActiveSheet: function(){
      return SheetService(_spreadSheet.getActiveSheet());
    },
    getSheetByName: function(sheetName) { 
      for(var i= 0; i < _sheets.length; i++)
        if(_sheets[i].sheetName == sheetName)
          return _sheets[i];
      return '';
    },
    addNewSheet: function(sheetName){
      var new_sheet = SheetService(_spreadSheet.insertSheet(sheetName));
      _sheets.push(new_sheet)
      return new_sheet;         
    },
    isSheetExists: function(sheetName){
        return this.getSheetByName(sheetName) != '';
    }, 
    getURL: function(){
      return _spreadSheet.getUrl();
    },
	  getId: function(){
      return _spreadSheet.getId();
    },
    setName: function(newName){
      _spreadSheet.rename(newName);  
    }, 
	  setActiveSheetByIndex: function(index){
      _spreadSheet.setActiveSheet(_sheets[index].sheet);
    },
    clearALL: function(){
      for(var i= 0; i < _sheets.length; i++)
        _sheets[i].clear(true, true, true);
    }
  }; 
}

// --------------------

/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getURL: function(){
      return this.spreadSheet.getUrl();
    },
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    },      
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
    getColumnValues: function(startRowPosition, columnPosition){
      // getRange(row, column, numRows, numColumns)
      return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
    }, 
    addRow: function(arrValues){ 
      //_sheet.appendRow(arrValues);
      this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
    },
    addRowAtIndex: function(arrValues, rowPosition){               
      rowPosition = rowPosition || _sheet.getLastRow() + 1;
      var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
      range.setValues([arrValues]);
    },
    addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(url, rowPosition, columnPosition, left, top);
    },   
    addImage: function(blob, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
    },   
    deleteRow: function(rowPosition){
      _sheet.deleteRow(rowPosition);
    }, 
    letter2index: function(columnLetter){
      const numOfLetters = 26;
      const startIndex = 'A'.charCodeAt(0); 
      /*
        get column index by it's letter/s representation 
        e.g: A=1, C=3 
      */
      
      // TODO 
      
    },
	  copyRange: function(fromRange, toRange){
        Logger.log('copy range from %s to %s', fromRange, toRange);
        var valuesToCopy = this.getValuesByRange(fromRange);      
        this.setRangeValues(toRange, valuesToCopy);           
    },   
    sort: function(columnPosition){
      _sheet.sort(columnPosition);
    },
    hasCharts:  _sheet.getCharts().length > 0,
    findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
      /* 
        get column values filtered by other column

        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */

      var result = [];       
      var rows = _sheet.getDataRange().getValues();

      for(row in rows)
        if(rows[row][filterColumnPosition - 1] == filterValue)
          result.push(rows[row][columnPosition]);
      return result;  
    }, 
    findRowsByFilter: function(filterValue, filterColumnPosition){
      /* 
        get rows by filter

        e.g: findRowsByFilter('100', 1)          
        all rows that the value in A column equals to '100'
        */

      var result = [];       
      var rows = _sheet.getDataRange().getValues();

      for(row in rows)
        if(rows[row][filterColumnPosition - 1] == filterValue)
          result.push(rows[row]);
      return result;  
    }, 
	  freezeHeader: function(){
      _sheet.setFrozenRows(1);
    },
    merge: function(strRange){
      _sheet.getRange(strRange).merge();
    },  
    clear: function(charts, format, contents){
      charts = charts || false;
      format = format || false;
      contents = contents || true;

      _sheet.clear({ formatOnly: format, contentsOnly: contents });    

      // clear all notes
      _sheet.clearNotes();        

      // clear all charts
      var charts = _sheet.getCharts();
      for (var i in charts)
        _sheet.removeChart(charts[i]);
    },          
    setValue: function(rowPosition, columnPosition, value){ 
      _sheet.getRange(rowPosition, columnPosition).setValue(value);
    },     
    setRangeValue: function(strRange, value){ 
      // e.g: setCurrencyFormat('A1'); // set cell
      _sheet.getRange(strRange).setValue(value);
    },
	  setRangeValues: function(strRange, values){         
      _sheet.getRange(strRange).setValues(values);
    },
    setColumnWidth: function(columnPosition, width){
      _sheet.setColumnWidth(columnPosition, width);
    },  
    setRowHeight: function(rowPosition, height){
      _sheet.setRowHeight(rowPosition, height);
    },  
    setName: function(newName){
      _sheet.setName(newName);
    }, 
    setNote: function(strRange, note){
      var range = _sheet.getRange(strRange);
      range.setNote(note);
    },         
    setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
      var range = _sheet.getRange(strRange);
      if(backgroundColor)
        range.setBackground(backgroundColor);
      if(foreColor)
        range.setFontColor(foreColor);
      if(fontSize)
        range.setFontSize(fontSize);
      if(hAlign)
        range.setHorizontalAlignment(hAlign);
      if(vAlign)
        range.setVerticalAlignment(vAlign)
      if(fontWeight)
        range.setFontWeight(fontWeight);
      if(border)
        range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
    }, 
    setNumberFormat: function(strRange){
      setFormat(strRange, '0');       
    },
    setDecimalFormat: function(strRange){
      setFormat(strRange, '0.00');
    },
    setCurrencyFormat: function(strRange){
      setFormat(strRange, '$0.00');
    },
    setPercentageFormat: function(strRange){
      // e.g: setPercentageFormat('A1'); // set cell
      // e.g: setPercentageFormat('A1:A10'); // set range

      setFormat(strRange, '0.00%');
    },
    setWeekFormat: function(strRange){
      setFormat(strRange, 'MMM dd');
    },
    setMonthFormat: function(strRange){
      setFormat(strRange, 'MMM');
    },
    setCellSumFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set SUM value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=SUM(' + strRange + ')');
    },
    setCellAvgFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set AVG value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=AVERAGE(' + strRange + ')');
    },
    setCellFormula: function(formula, strCell){
      // e.g: setCellFormula('=B3-C3', 'D3');         
      // e.g: setCellFormula('=$B3-$C3', 'D3:D9');   

      var cell = _sheet.getRange(strCell);
      cell.setFormula(formula);
    }        
  }; 
}

// --------------------

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSpreadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}