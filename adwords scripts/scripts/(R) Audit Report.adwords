var EMAIL = 'rcbuilder@walla.com';
var SHEET_NAME = 'Audit_Report';

/*
MCC + label filter per rule
report score
--
1. MCC level script
    Done (need to comment out)
    
2. Runs only selected account (not all accounts)
    Done (need to comment out)
    
    
    
9. Count of negative keywords by campaigns
11. Use of Legacy Text Ads
13. Ad Groups With Too Many Keywords         
*/
  

var rules = [
  /*
  { isActive: true, name: 'CampaignWithNoSiteLinksEXT', score: 1, filter: '', label: 'test1', desc: 'Campaigns with no Sitelink Extensions' },
  { isActive: true, name: 'CampaignWithNoCalloutsEXT', score: 1, filter: '', label: 'test2', desc: 'Campaigns with no Callout Extensions' },
  { isActive: true, name: 'CampaignWithNoCallsEXT', score: 1, filter: '', label: '', desc: 'Campaigns with no Call Extensions' },
  { isActive: true, name: 'CampaignWithNoAppsEXT', score: 1, filter: '', label: '', desc: 'Campaigns with no App Extensions' },
  { isActive: true, name: 'CampaignWithNoMessagesEXT', score: 1, filter: '', label: '', desc: 'Campaigns with no Message Extensions' },  
  { isActive: true, name: 'CampaignWithNoPriceEXT', score: 1, filter: '', label: '', desc: 'Campaigns with no Price Extensions' },  
  { isActive: true, name: 'CampaignWithNoSnippetsEXT', score: 1, filter: '', label: '', desc: 'Campaigns with no Structured Snippet Extensions' },  
  { isActive: true, name: 'CampaignsWithNoNegativeKWs', score: 1, filter: '', label: '', desc: 'Campaigns With No Negative Keywords' },
  { isActive: true, name: 'DisplayCampaignsWithNoPlacementEXC', score: 1, filter: '', label: '', desc: 'Display Campaigns With No Placement Exclusion' },
  { isActive: true, name: 'KeywordsWithLowQualityScore', score: 1, filter: 6, label: '', desc: 'keywords With Low Quality Score' }, 
  { isActive: true, name: 'AdGroupsWithHighCostAndLowQualityScore', score: 1, filter: 30, label: '', desc: 'High Cost AdGroups with Low Quality Score' }, 
  { isActive: true, name: 'AdRelevanceScoreForkeywords', score: 1, filter: '', label: '', desc: 'Ad Relevance Score for keywords' },
  { isActive: true, name: 'LandingPageScoreForkeywords', score: 1, filter: '', label: '', desc: 'Landing Page Score for keywords' },  
  { isActive: true, name: 'AdsWithDuplicateDescriptions1', score: 1, filter: '0.4', label: '', desc: 'Ads With Duplicate Descriptions-1' },
  { isActive: true, name: 'AdsWithDuplicateDescriptions2', score: 1, filter: '0.4', label: '', desc: 'Ads With Duplicate Descriptions-2' },
  { isActive: true, name: 'AdsWithDuplicateHeadline1', score: 1, filter: '0.4', label: '', desc: 'Ads With Duplicate Headline-1' },
  { isActive: true, name: 'AdsWithDuplicateHeadline2', score: 1, filter: '0.4', label: '', desc: 'Ads With Duplicate Headline-2' },
  { isActive: true, name: 'AdsWithDuplicateHeadline3', score: 1, filter: '0.4', label: '', desc: 'Ads With Duplicate Headline-3' },  
  { isActive: true, name: 'KeywordsWithClicks', score: 1, filter: '', label: '', desc: 'Percentage of keywords with clicks' },
  { isActive: true, name: 'KeywordsWithConversions', score: 1, filter: '', label: '', desc: 'Percentage of keywords with Conversions' },
  { isActive: true, name: 'KeywordsWithImpressions', score: 1, filter: '', label: '', desc: 'Percentage of keywords with Impressions' },
  { isActive: true, name: 'HttpAds', score: 1, filter: '', label: '', desc: 'Final URLs that are still using HTTP' },
  */  
  { isActive: true, name: 'AdsWithDuplicateUrl', score: 1, filter: '0.4', label: '', desc: 'Ads With Duplicate Final URL' },  
];


/* 
  TO DELETE
  ---------
  var propertyName = 'url';
  
  /// var ads = GetTextAds();
  
  var ads = [
    {url:'https://www.dosenbach.ch/CH/de/shop/damen/damen-accessoires/damen-accessoires-sohlen/00002000994290/Alu-Thermo-Tec+Einlegesohle+37+Unisex.prod'},
    {url:'https://www.dosenbach.ch/CH/de/shop/damen/damen-schuhe/damen-schuhe-sandalen/00002001036646/Damen+Sandale+.prod'},
    {url:'https://www.vac.ch/de/vorhaenge-dekoration/68388-rideau-termine-avec-bretelles.html'},
    {url:'https://www.dosenbach.ch/CH/de/shop/damen/damen-accessoires/damen-accessoires-pflegeprodukte/00002000644108/Leder+Cream+braun+75ml.prod'},
    {url:'https://www.vac.ch/de/fotoapparat-und-kamerataschen/69219-sacoche-universelle-pour-camera.html'},
    {url:'https://www.vac.ch/de/fotoapparat-und-kamerataschen/69219-sacoche-universelle-pour-camera.html'},
    {url:'https://www.dosenbach.ch/CH/de/shop/damen/damen-schuhe/damen-schuhe-sandalen/00002001036646/Damen+Sandale+.prod'},
  ];
  Logger.log('%s ads found', ads.length);  
  
  var duplicates = [];
  ads.forEach(function(adOuter){
    var count = ads.reduce(function(aggr, adInner){ 
      return aggr += (adInner[propertyName].toLowerCase() == adOuter[propertyName].toLowerCase()) ? 1 : 0; 
    }, 0);
   
    if(count > 1)
      duplicates.push(adOuter);
  });
  
  Logger.log('%s duplicates ads found', duplicates.length);
  
  var rate = ads.length == 0 ? 0 : duplicates.length / ads.length;
  if(rate <= 0.4) return;
  
  Logger.log('found %s percentage of duplicates ads with %s', rate.toFixed(2), propertyName);   
  
  var summaryLine = (rate * 100).toFixed(2) + '%' + ' (' + duplicates.length + ' of ' + ads.length  + ')';
  
  var unique = distinct(duplicates, propertyName);
  for(i in unique)    
    Logger.log(unique[i])    
  
  return;
*/


function main(){
  
  /*
  var accounts = MccApp.accounts().get();  
  while(accounts.hasNext())
  {
    var account = accounts.next();   
    var accountName = account.getName();
    Logger.log('### account: %s ###', accountName);  
    
    var appliedLabels = [];
    var labelsItr = account.labels().get();
    while(labelsItr.hasNext())
       appliedLabels.push(labelsItr.next().getName());
    Logger.log('applied labels: %s', appliedLabels);
    
    MccApp.select(account);
    ProcessAccount(accountName, appliedLabels);
    
    Logger.log('--------------------------');
  }
  */
  
  var account = AdsApp.currentAccount();  
  var accountName = account.getName();
  ProcessAccount(accountName, []);
}

function ProcessAccount(accountName, appliedLabels) {
  var sheetName = SHEET_NAME.concat('_', accountName);
  var sheetService = SpreadsheetLoader.loadSheetService(sheetName); // load   
  var sheetNotExists = !sheetService;
  if(sheetNotExists)
     sheetService = SpreadsheetLoader.createSheetService(sheetName); // create       
  
  sheetService.clear();  
  sheetService.addRow(['rule', 'filter', 'label', 'description', 'resultType', 'resultValue', 'summary']); // add header 
  sheetService.setDataUI('A1:Z1', null, null, 11, 'left', 'bold', null, 'middle');
    
  for(i in rules)
  {   
    var current = rules[i];
    Logger.log('[rule] %s', current);
    
    try{        
      if(!current.isActive){
        Logger.log('not active > skip');
        continue;
      }
            
      if(current.label && current.label != '' && appliedLabels.indexOf(current.label) == -1){
        Logger.log('filtered by label > skip');
        continue;
      }

      var fn = current.name.concat('(', JSON.stringify(current), ',', 'sheetService', ')');
      eval(fn);  
    }
    catch(ex){
      Logger.log('exception occured: %s', ex.message);
    }
  }
  
  try{                 
    Logger.log('send mail to %s', EMAIL);
    MailApp.sendEmail(EMAIL, 'Audit Report', '', {
      htmlBody: '<a href="' + sheetService.getURL() + '">CLICK TO SEE THE REPORT</a>'
    });
  }
  catch(ex){
    Logger.log('exception occured: %s', ex.message);
  }
}

// --- RULES ---------------------------------------------------------------

function HttpAds(rule, sheetService){
  var ads = GetAllAds();
  Logger.log('%s ads found', ads.length);
  
  var httpAds = ads.filter(function(ad){ 
    return ad.url.indexOf('http://') == 0; 
  });
  
  Logger.log('%s http ads found', httpAds.length);
  
  for(i in httpAds){
    Logger.log('http ad: %s', httpAds[i].url);    
    sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'ad', httpAds[i].url, '#' + httpAds[i].id]);     
  }
}

function KeywordsWithClicks(rule, sheetService){
   KeywordsWithMetrics(rule, sheetService, 'Clicks');
}

function KeywordsWithConversions(rule, sheetService){
   KeywordsWithMetrics(rule, sheetService, 'Conversions');
}

function KeywordsWithImpressions(rule, sheetService){
   KeywordsWithMetrics(rule, sheetService, 'Impressions');
}

function AdsWithDuplicateUrl(rule, sheetService){
  AdsWithDuplicateContent(rule, sheetService, 'url');  
}

function AdsWithDuplicateDescriptions1(rule, sheetService){
  AdsWithDuplicateContent(rule, sheetService, 'description1');  
}

function AdsWithDuplicateDescriptions2(rule, sheetService){
  AdsWithDuplicateContent(rule, sheetService, 'description2');
}

function AdsWithDuplicateHeadline1(rule, sheetService){
  AdsWithDuplicateContent(rule, sheetService, 'title1');
}

function AdsWithDuplicateHeadline2(rule, sheetService){
  AdsWithDuplicateContent(rule, sheetService, 'title2');
}

function AdsWithDuplicateHeadline3(rule, sheetService){
  AdsWithDuplicateContent(rule, sheetService, 'title3');
}

function CampaignWithNoSiteLinksEXT(rule, sheetService){
  BaseDataQuantityHandler(rule, sheetService, 'sitelinks'); 
}

function CampaignWithNoCalloutsEXT(rule, sheetService){
  BaseDataQuantityHandler(rule, sheetService, 'callouts');  
}

function CampaignWithNoMessagesEXT(rule, sheetService){
  BaseDataQuantityHandler(rule, sheetService, 'messages'); 
}

function CampaignWithNoAppsEXT(rule, sheetService){
  BaseDataQuantityHandler(rule, sheetService, 'apps');  
}

function CampaignWithNoCallsEXT(rule, sheetService){
  var dataQuantity = AdsApp.currentAccount().extensions().phoneNumbers().get().totalNumEntities(); 
  if(dataQuantity > 0) return; // there's an account-level callEXT - skip all campaigns  
  BaseDataQuantityHandler(rule, sheetService, 'calls');
}

function CampaignWithNoPriceEXT(rule, sheetService){
  BaseDataQuantityHandler(rule, sheetService, 'prices');
}

function CampaignWithNoSnippetsEXT(rule, sheetService){
  BaseDataQuantityHandler(rule, sheetService, 'snippets');
}

function CampaignsWithNoNegativeKWs(rule, sheetService){
  BaseDataQuantityHandler(rule, sheetService, 'negativekeywords');
}

function DisplayCampaignsWithNoPlacementEXC(rule, sheetService){
    var report = GetReport(
      'CAMPAIGN_PERFORMANCE_REPORT', 
      ['CampaignName', 'AdvertisingChannelType'], 
      ['CampaignStatus = ENABLED', 'AdvertisingChannelType = DISPLAY'], 
      'LAST_30_DAYS'
    );
   
    var rows = report.rows(); 
    while (rows.hasNext()) { 
      var row = rows.next();
      var campaignName = row['CampaignName'];      
      
      Logger.log('display-campaign %s has No placement extensions', campaignName);    
      sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'campaign', campaignName]);      
    };
}

function KeywordsWithLowQualityScore(rule, sheetService){  
    var report = GetReport(
      'KEYWORDS_PERFORMANCE_REPORT', 
      ['Id', 'Criteria', 'QualityScore'], 
      ['QualityScore < ' + rule.filter, 'CampaignStatus = ENABLED', 'AdGroupStatus = ENABLED', 'Status = ENABLED'], 
      'LAST_30_DAYS'
    );

    var rows = report.rows(); 
    while (rows.hasNext()) { 
      var row = rows.next();
      var keywordText = row['Criteria'];
      var qs = parseFloat(row['QualityScore']);
      
      Logger.log('keyword %s has low QS of %s', keywordText, qs);   
      sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'keyword', keywordText, 'qs: ' + qs]);      
    };      
}

function AdGroupsWithHighCostAndLowQualityScore(rule, sheetService){  
  var dateRange = 'LAST_30_DAYS';
  var accountTotalCost = AdsApp.currentAccount().getStatsFor(dateRange).getCost();
  Logger.log('account total cost: %s', accountTotalCost); 

  var report = GetReport(
    'KEYWORDS_PERFORMANCE_REPORT', 
    ['Id', 'Criteria', 'AdGroupId', 'QualityScore'], 
    ['QualityScore > ' + 0, 'CampaignStatus = ENABLED', 'AdGroupStatus = ENABLED', 'Status = ENABLED'], 
    dateRange
  );

  var aggrByAdgroup = {};

  var rows = report.rows(); 
  while (rows.hasNext()) { 
    var row = rows.next();
    var adGroupId = row['AdGroupId'].toString();
    var qs = parseFloat(row['QualityScore']);      
    
    ///Logger.log('#%s | %s | %s', row['Id'], adGroupId, qs);
    
    var current = aggrByAdgroup[adGroupId];
    if(!current) current = { totalQS: 0, countKW: 0 };
    current.totalQS += qs;
    current.countKW++
    aggrByAdgroup[adGroupId] = current; 
  }
  
  // aggregation of KWs qualityScore per adgroup
  Logger.log(aggrByAdgroup);
  
  for(id in aggrByAdgroup){
    var aggrRow = aggrByAdgroup[id];
    var adgroup = AdsApp.adGroups().withIds([id]).get().next();
    var adGroupName = adgroup.getName();
    
    var stats = adgroup.getStatsFor(dateRange);
    var cost = stats.getCost();
    
    // the adGroup cost is within the x% of the total cost
    var isHighCost = cost > accountTotalCost * rule.filter;
    
    // adgroup QS (average)
    var avgQS = aggrRow.totalQS / aggrRow.countKW; 
    
    ///Logger.log('adgroup %s - avgQS: %s, cost: %s', adGroupName, avgQS, cost);
    
    // if the adgroup is NOT of high-cost OR it has a high QS - skip
    if(!isHighCost || avgQS > 6) continue;
    
    Logger.log('adGroup %s has low QS of %s and high cost of %s', adGroupName, avgQS, cost);  
    sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'adGroup', adGroupName, 'qs: ' + avgQS + ' | cost: ' + cost]);    
  }    
}

function AdRelevanceScoreForkeywords(rule, sheetService){
    var report = GetReport(
      'KEYWORDS_PERFORMANCE_REPORT', 
      ['Id', 'Criteria', 'CreativeQualityScore'], 
      ['CampaignStatus = ENABLED', 'AdGroupStatus = ENABLED', 'Status = ENABLED'], 
      'LAST_30_DAYS'
    );

    /*  UNKNOWN
        BELOW_AVERAGE
        AVERAGE
        ABOVE_AVERAGE        
    */
    var aggrByAdRelevance = {};

    var rows = report.rows(); 
    while (rows.hasNext()) { 
      var row = rows.next();
      var keywordText = row['Criteria'];
      var adRelevance = row['CreativeQualityScore'];
      
      ///Logger.log('keyword %s -> adRelevance: %s', keywordText, adRelevance);
      
      var current = aggrByAdRelevance[adRelevance];
      if(!current) current = { countKW: 0 };      
      current.countKW++
      aggrByAdRelevance[adRelevance] = current;
    };
    
    Logger.log(aggrByAdRelevance);
  
    for(key in aggrByAdRelevance){
      sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'keywordsCount', key, aggrByAdRelevance[key].countKW]);      
    }
}

function LandingPageScoreForkeywords(rule, sheetService){
  var report = GetReport(
      'KEYWORDS_PERFORMANCE_REPORT', 
      ['Id', 'Criteria', 'PostClickQualityScore'], 
      ['CampaignStatus = ENABLED', 'AdGroupStatus = ENABLED', 'Status = ENABLED'], 
      'LAST_30_DAYS'
    );

    /*  UNKNOWN
        BELOW_AVERAGE
        AVERAGE
        ABOVE_AVERAGE        
    */
    var aggrByLandingPageScore = {};

    var rows = report.rows(); 
    while (rows.hasNext()) { 
      var row = rows.next();
      var keywordText = row['Criteria'];
      var lpScore = row['PostClickQualityScore'];
      
      ///Logger.log('keyword %s -> LandingPageScore: %s', keywordText, lpScore);
      
      var current = aggrByLandingPageScore[lpScore];
      if(!current) current = { countKW: 0 };      
      current.countKW++
      aggrByLandingPageScore[lpScore] = current;
    };
    
    Logger.log(aggrByLandingPageScore);
  
    for(key in aggrByLandingPageScore){
      sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'keywordsCount', key, aggrByLandingPageScore[key].countKW]);      
    }
}

// --- CODE ----------------------------------------------------------------

function BaseDataQuantityHandler(rule, sheetService, extensionType){
  var campaigns = AdsApp.campaigns()
    .withCondition('Status = ENABLED')
    .get();
  
  while(campaigns.hasNext()){
    var campaign = campaigns.next();
    var dataQuantity = GetDataQuantity(campaign, extensionType);
    if(dataQuantity > 0) continue;
    
    var campaignId = campaign.getId().toString();
    Logger.log('campaign #%s has no %s', campaignId, extensionType);  
    sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'campaign', campaign.getName()]);   
  }
}  

function GetDataQuantity(campaign, extensionType){
  switch(extensionType.toLowerCase()) {
    case 'sitelink':
    case 'sitelinks': return campaign.extensions().sitelinks().get().totalNumEntities();      
    case 'callout':
    case 'callouts': return campaign.extensions().callouts().get().totalNumEntities();
    case 'message':
    case 'messages': return campaign.extensions().messages().get().totalNumEntities();
    case 'app':  
    case 'apps':  
    case 'mobileapp':  
    case 'mobileapps': return campaign.extensions().mobileApps().get().totalNumEntities();
    case 'call':  
    case 'calls':
    case 'phonenumber':
    case 'phonenumbers': return campaign.extensions().phoneNumbers().get().totalNumEntities();      
    case 'structuredsnippets':
    case 'snippet':
    case 'snippets': return campaign.extensions().snippets().get().totalNumEntities();
    case 'price':  
    case 'prices': return campaign.extensions().prices().get().totalNumEntities();       
    case 'negativekeywords': return campaign.extensions().negativeKeywords().get().totalNumEntities();     
      
    default: return 0;
  }
}

/* e.g: 
   var report = GetReport(
      'CAMPAIGN_PERFORMANCE_REPORT', 
      ['CampaignName', 'AdvertisingChannelType'], 
      ['CampaignStatus = ENABLED', 'AdvertisingChannelType = DISPLAY'], 
      'LAST_30_DAYS'
   );
   
   var rows = report.rows(); 
   while (rows.hasNext()) { 
	    var row = rows.next();
      ...
	 };
*/
function GetReport(reportName, reportFields, reportFilters, dateRange){
  var reportConfig = {
    includeZeroImpressions: true
  };
  
  // {reportFields} FROM {reportName} WHERE {reportFilters} DURING {dateRange}
  var query = 'SELECT ' + reportFields.join(', ') + ' ';  
  query += 'FROM '+ reportName + ' ';
  
  if(reportFilters && reportFilters.length > 0)  
    query += 'WHERE '+ reportFilters.join(' AND ') + ' ';
  
  query += 'DURING ' + dateRange;
  
  Logger.log(query);
  return AdWordsApp.report(query, reportConfig); 
}

/* e.g:
   var count = GetKeyWordsQuantity([
      'CampaignStatus IN [ENABLED,PAUSED]', 
      'AdGroupStatus IN [ENABLED,PAUSED]', 
      'Status IN [ENABLED,PAUSED]'
    ], 'ALL_TIME');
    
   Logger.log(count);
*/
function GetKeyWordsQuantity(filters, dateRange) {  
  var selector = AdsApp.keywords();
  
  if(filters && filters.length > 0)  
    for(i in filters)
      selector.withCondition(filters[i]);
  
  if(dateRange)
      selector.forDateRange(dateRange);
  
  var keywords = selector.get();
  return keywords.totalNumEntities();
}

// result: [{ title1, title2, title3, description1, description2, url }]
function GetTextAds() {
  /* TEMP
  var campaign = AdsApp.campaigns().withIds([8235163169]).get().next(); // TODO ->> TEMP 
  var ads = campaign.ads()
  */
  
  var ads = AdsApp.ads()
  .withCondition('CampaignStatus IN [ENABLED]')
  .withCondition('AdGroupStatus IN [ENABLED]')
  .withCondition('Status IN [ENABLED]')
  .withCondition('Type = EXPANDED_TEXT_AD')  
  .get();
  
  var result = [];
  while(ads.hasNext()){
    var textAd = ads.next().asType().expandedTextAd();
    result.push({
      title1: textAd.getHeadlinePart1(),
      title2: textAd.getHeadlinePart2(),
      title3: textAd.getHeadlinePart3(),
      description1: textAd.getDescription1(),
      description2: textAd.getDescription2(),   
      url: textAd.urls().getFinalUrl()
    });
  }
  
  return result;
}

// result: [ad]
function GetAllAds() {
  /* TEMP
  var campaign = AdsApp.campaigns().withIds([8235163169]).get().next(); // TODO ->> TEMP 
  var ads = campaign.ads()
  */
  
  var ads = AdsApp.ads()
  .withCondition('CampaignStatus IN [ENABLED]')
  .withCondition('AdGroupStatus IN [ENABLED]')
  .withCondition('Status IN [ENABLED]')  
  .get();
  
  var result = [];
  while(ads.hasNext()){
    var ad = ads.next();
    
    var item = {
      type: ad.getType(), // EXPANDED_TEXT_AD, IMAGE_AD, MOBILE_AD, MOBILE_IMAGE_AD, PRODUCT_AD, RICH_MEDIA_AD, TEMPLATE_AD, TEXT_AD
      id: ad.getId().toString(),
      url: ad.urls().getFinalUrl(),
      get item () { 
        switch(item.type){
          case 'EXPANDED_TEXT_AD' : return ad.asType().expandedTextAd();
          case 'IMAGE_AD' : return ad.asType().imageAd();                  
          case 'TEMPLATE_AD' : return ad.asType().html5Ad();      
          default: return null;
        }    
      }      
    };
    
    result.push(item);
  }    
    
  return result;
}

function AdsWithDuplicateContent(rule, sheetService, propertyName){
  var ads = GetTextAds();
  Logger.log('%s ads found', ads.length);  
  
  var duplicates = [];
  ads.forEach(function(adOuter){
    var count = ads.reduce(function(aggr, adInner){ 
      return aggr += (adInner[propertyName].toLowerCase() == adOuter[propertyName].toLowerCase()) ? 1 : 0; 
    }, 0);
   
    if(count > 1)
      duplicates.push(adOuter);
  });
  
  Logger.log('%s duplicates ads found', duplicates.length);
  
  var rate = ads.length == 0 ? 0 : duplicates.length / ads.length;
  if(rate <= rule.filter) return;
  
  Logger.log('found %s percentage of duplicates ads with %s', rate.toFixed(2), propertyName);   
  
  var summaryLine = (rate * 100).toFixed(2) + '%' + ' (' + duplicates.length + ' of ' + ads.length  + ')';  
  var unique = distinct(duplicates, propertyName);  
  for(i in unique)    
    sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'ad', unique[i], summaryLine]);   
}

function KeywordsWithMetrics(rule, sheetService, metric){
  var count = GetKeyWordsQuantity([
      'CampaignStatus IN [ENABLED,PAUSED]', 
      'AdGroupStatus IN [ENABLED,PAUSED]', 
      'Status IN [ENABLED,PAUSED]'
    ], 'ALL_TIME');
  
  var countWithClicks = GetKeyWordsQuantity([
      'CampaignStatus IN [ENABLED]', 
      'AdGroupStatus IN [ENABLED]', 
      'Status IN [ENABLED]',
      '{0} > 0'.replace('{0}', metric) 
    ], 'ALL_TIME');
  
  var summaryLine = countWithClicks + ' of ' + count;
  var ratio = ((countWithClicks / count) * 100).toFixed(2) + '%';
  
  Logger.log('%s > %s (%s)', metric, ratio, summaryLine);    
  sheetService.addRow([rule.name, rule.filter, rule.label, rule.desc, 'keywordsCount',  ratio, summaryLine]);  
}

// --- HELPER --------------------------------------------------------------

function distinct(arr, propertyName){
  
  var hashCode = function(value) {
    var hash = 0, i, chr;
    if (value.length === 0) return hash;
    for (i = 0; i < value.length; i++) {
      chr   = value.charCodeAt(i);
      hash  = ((hash << 5) - hash) + chr;
      hash |= 0; // Convert to 32bit integer
    }
    return hash.toString();
  };
  
  try{
    var result = {};
    for(var i=0;i<arr.length;i++){
      if(typeof(arr[i]) == 'object' && !propertyName)
        throw 'object types must use property name!';

      var key, value;
      if(!propertyName)
      {
        key = typeof(arr[i]) == 'string' ? hashCode(arr[i]) : arr[i];  
        value = arr[i];
      }
      else
      {
        key = typeof(arr[i][propertyName]) == 'string' ? hashCode(arr[i][propertyName]) : arr[i][propertyName];             
        value = arr[i][propertyName];
      }

      result[key] = value;
    }

    return Object.keys(result).map(function(x){ return result[x]; });
  }
  catch(e){
    Logger.log('distinct -> ex: %s', e);
    return [];
  }
}

// --- SERVICES ------------------------------------------------------------

/* SPREADSHEET SERVICE */
var SpreadSheetService = function(spreadSheet) {
  var _spreadSheet = spreadSheet;
  var _sheets = [];

  (function(){
    var sheetServices = [];
    var temp_sheets = spreadSheet.getSheets();
    for(var i= 0; i < temp_sheets.length; i++)
      _sheets.push(new SheetService(temp_sheets[i]));   
  })();   
  
  return {      
    sheets: _sheets,
	  spreadSheet: _spreadSheet, 
    getName: function(){
      return _spreadSheet.getName();
    },
    getActiveSheet: function(){
      return SheetService(_spreadSheet.getActiveSheet());
    },
    getSheetByName: function(sheetName) { 
      for(var i= 0; i < _sheets.length; i++)
        if(_sheets[i].sheetName == sheetName)
          return _sheets[i];
      return '';
    },
    addNewSheet: function(sheetName){
      var new_sheet = SheetService(_spreadSheet.insertSheet(sheetName));
      _sheets.push(new_sheet)
      return new_sheet;         
    },
    isSheetExists: function(sheetName){
        return this.getSheetByName(sheetName) != '';
    }, 
    getURL: function(){
      return _spreadSheet.getUrl();
    },
	  getId: function(){
      return _spreadSheet.getId();
    },
    setName: function(newName){
      _spreadSheet.rename(newName);  
    }, 
	  setActiveSheetByIndex: function(index){
      _spreadSheet.setActiveSheet(_sheets[index].sheet);
    },
    clearALL: function(){
      for(var i= 0; i < _sheets.length; i++)
        _sheets[i].clear(true, true, true);
    }
  }; 
}

// --------------------

/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getURL: function(){
      return this.spreadSheet.getUrl();
    },
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    },      
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
    getColumnValues: function(startRowPosition, columnPosition){
      // getRange(row, column, numRows, numColumns)
      return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
    }, 
    addRow: function(arrValues){ 
      //_sheet.appendRow(arrValues);
      this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
    },
    addRowAtIndex: function(arrValues, rowPosition){               
      rowPosition = rowPosition || _sheet.getLastRow() + 1;
      var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
      range.setValues([arrValues]);
    },
    addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(url, rowPosition, columnPosition, left, top);
    },   
    addImage: function(blob, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
    },   
    deleteRow: function(rowPosition){
      _sheet.deleteRow(rowPosition);
    }, 
	  copyRange: function(fromRange, toRange){
        Logger.log('copy range from %s to %s', fromRange, toRange);
        var valuesToCopy = this.getValuesByRange(fromRange);      
        this.setRangeValues(toRange, valuesToCopy);           
    },   
    sort: function(columnPosition){
      _sheet.sort(columnPosition);
    },
    hasCharts:  _sheet.getCharts().length > 0,
    findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
      /* 
        get column values filtered by other column

        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */

      var result = [];       
      var rows = _sheet.getDataRange().getValues();

      for(row in rows)
        if(rows[row][filterColumnPosition - 1] == filterValue)
          result.push(rows[row][columnPosition]);
      return result;  
    }, 
	  freezeHeader: function(){
      _sheet.setFrozenRows(1);
    },
    merge: function(strRange){
      _sheet.getRange(strRange).merge();
    },  
    clear: function(charts, format, contents){
      charts = charts || false;
      format = format || false;
      contents = contents || true;

      _sheet.clear({ formatOnly: format, contentsOnly: contents });    

      // clear all notes
      _sheet.clearNotes();        

      // clear all charts
      var charts = _sheet.getCharts();
      for (var i in charts)
        _sheet.removeChart(charts[i]);
    },          
    setValue: function(rowPosition, columnPosition, value){ 
      _sheet.getRange(rowPosition, columnPosition).setValue(value);
    },     
    setRangeValue: function(strRange, value){ 
      // e.g: setCurrencyFormat('A1'); // set cell
      _sheet.getRange(strRange).setValue(value);
    },
	  setRangeValues: function(strRange, values){         
      _sheet.getRange(strRange).setValues(values);
    },
    setColumnWidth: function(columnPosition, width){
      _sheet.setColumnWidth(columnPosition, width);
    },  
    setRowHeight: function(rowPosition, height){
      _sheet.setRowHeight(rowPosition, height);
    },  
    setName: function(newName){
      _sheet.setName(newName);
    }, 
    setNote: function(strRange, note){
      var range = _sheet.getRange(strRange);
      range.setNote(note);
    },         
    setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
      var range = _sheet.getRange(strRange);
      if(backgroundColor)
        range.setBackground(backgroundColor);
      if(foreColor)
        range.setFontColor(foreColor);
      if(fontSize)
        range.setFontSize(fontSize);
      if(hAlign)
        range.setHorizontalAlignment(hAlign);
      if(vAlign)
        range.setVerticalAlignment(vAlign)
      if(fontWeight)
        range.setFontWeight(fontWeight);
      if(border)
        range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
    }, 
    setNumberFormat: function(strRange){
      setFormat(strRange, '0');       
    },
    setDecimalFormat: function(strRange){
      setFormat(strRange, '0.00');
    },
    setCurrencyFormat: function(strRange){
      setFormat(strRange, '$0.00');
    },
    setPercentageFormat: function(strRange){
      // e.g: setPercentageFormat('A1'); // set cell
      // e.g: setPercentageFormat('A1:A10'); // set range

      setFormat(strRange, '0.00%');
    },
    setWeekFormat: function(strRange){
      setFormat(strRange, 'MMM dd');
    },
    setMonthFormat: function(strRange){
      setFormat(strRange, 'MMM');
    },
    setCellSumFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set SUM value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=SUM(' + strRange + ')');
    },
    setCellAvgFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set AVG value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=AVERAGE(' + strRange + ')');
    },
    setCellFormula: function(formula, strCell){
      // e.g: setCellFormula('=B3-C3', 'D3');         
      // e.g: setCellFormula('=$B3-$C3', 'D3:D9');   

      var cell = _sheet.getRange(strCell);
      cell.setFormula(formula);
    }        
  }; 
}

// --------------------

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSpreadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}
