/*
    About
    -----
	this script creates a fully functioning campaign (adgroup, ad, keywords etc.) based on a feed (spreadsheet) 
    
    feed columns
    ------------
    Campaign #	
    Ad Group Name	
    Default Bid	
    Product Title (aka header1)	
    Product SubTitle (aka header2)	 
    Product ExtraTitle (aka header3)
    Product Description	
    Product URL	
    Product URL Path1	
    Product URL Path2	
    Keywords	
    Sitelink Text	
    Sitelink URL	
    Price	
    Stock														
    
    process steps
    -------------
	STEP 1: load campaign by Id
    STEP 2: create adgroup
    STEP 3: create a text ad
    STEP 4: create keywords (positive)
    STEP 5: create siteLinks
*/

var FEED_URI ='https://docs.google.com/spreadsheets/d/1tFgbk-qYXsZfzJMSY9fJctjySRcPTkkuOKgv9XlUkFQ/'
var TEST_MODE = true;

function main() {
  if(TEST_MODE)
    Logger.log('[TEST MODE]');
  
  var sheetService = SpreadsheetLoader.loadSheetServiceByURL(FEED_URI);   
  var dataReaderService = DataReaderService(sheetService);
  var adManagerService = AdManagerService(); 
   
  var products = dataReaderService.getProducts();
  Logger.log('%s products found', products.length);  

  /*
  if(TEST_MODE)
    products = products.slice(190, 200);
  */
  
  for(i in products)     
  {
    Logger.log('---------------------');
    ProcessProduct(products[i], adManagerService);      
  }
}

function ProcessProduct(product, adManagerService){
    if(!product){
      Logger.log('NULL row -> skip');
      return;
    }

    Logger.log('campaign: #%s, adGroup: %s, product: %s', product.campaignId, product.adGroupName, product.title);       

    // STEP 1: load campaign by Id
    var campaign = AdWordsApp.campaigns().withIds([product.campaignId]).get().next();
    if(!campaign){
      Logger.log('campaign was NOT found -> skip');
      return;
    }

  	var adGroupExists = adManagerService.checkIfAdGroupExistsByName(campaign, product.adGroupName);
  	if(!adGroupExists)	  
    	CreateProduct(adManagerService, campaign, product);
  	else 
    	UpdateProduct(adManagerService, campaign, product);
}

function CreateProduct(adManagerService, campaign, product){
    // STEP 2: create adgroup
    var adGroup = adManagerService.createAdGroup(campaign, product.adGroupName, product.defaultBid);
    if(!adGroup){
      Logger.log('exception: create adGroup');
      return;
    }             
    Logger.log('adGroup created successfully');
  
    // STEP 3: create a text ad 
    // { adGroup, header1, header2, header3, description1, description2, destinationURL, pathURL1, pathURL2 }
  
  	var param1Value = '{param1:' + product.price + '}';  
    var textAd = adManagerService.createAd(
      adGroup, 
      product.title, 
      product.subTitle + ' ' + param1Value, 
      product.extraTitle, 
      product.description, 
      null, 
      product.url.path, 
      product.url.segment1, 
      product.url.segment2
    );
  
    if(!textAd){
      Logger.log('exception: create ad');
      return;
    }
    Logger.log('ad created successfully');

    // STEP 4: create keywords (positive)  
    adManagerService.createKeywords(adGroup, product.keywords); 
    Logger.log('keywords created successfully');

    // STEP 5: create siteLinks
    var sitelink = adManagerService.createSiteLink(product.sitelink.text, product.sitelink.url);  
    adGroup.addSitelink(sitelink); 
    Logger.log('sitelink created successfully');  
}

function UpdateProduct(adManagerService, campaign, product){  
  	var adgroup = adManagerService.getAdGroupByName(campaign, product.adGroupName);
  
	var keywords = adgroup.keywords().get();
      while(keywords.hasNext())
      {        
        var keyword = keywords.next();
        
        var params = adManagerService.getKeywordParams(keyword);
        Logger.log('price update: %s > %s', params.length == 0 ? 'NULL' : params[0].text, product.price);
        
        adManagerService.setKeywordParams(keyword, product.price);    	
      }
}

// ----------------------------------------------

/* DATA READER SERVICE */
var DataReaderService = function(sheetService) { 
  return {  
     /*
      { 
          campaignId: string, 
          adGroupName: string, 
          defaultBid: float, 
          title: string, 
          subTitle: string, 
          extraTitle: string, 
          description: string, 
          url: { 
              path, 
              segment1, 
              segment2 
          }, 
          keywords: string[], 
          sitelink: { 
              text, 
              url 
          },
          price,
          stock
      }
    */    
    getProducts: function(){
      var result = [];
      
      // slice(1) - remove the header row;
      var rows = sheetService.getValues().slice(1); 
      for(i in rows){
      	result.push({
          campaignId: rows[i][0].toString(),
          adGroupName: rows[i][1],
          defaultBid: parseFloat(rows[i][2] || 0),
          title: rows[i][3],
          subTitle: rows[i][4],
          extraTitle: rows[i][5], 
          description: rows[i][6],
          url: {
            path: rows[i][7],
          	segment1: rows[i][8],
          	segment2: rows[i][9],
      	  },
          keywords: rows[i][10].split(','),
          sitelink: { 
          	text: rows[i][11],
            url: rows[i][12]
          },
          price: rows[i][13],
          stock: rows[i][14]
        });
      }
      
      return result;
    }
  }
}

// ----------------------------------------------

/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    },      
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
      getColumnValues: function(startRowPosition, columnPosition){
        // getRange(row, column, numRows, numColumns)
        return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
      }, 
      addRow: function(arrValues){ 
        //_sheet.appendRow(arrValues);
        this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
      },
      addRowAtIndex: function(arrValues, rowPosition){               
        rowPosition = rowPosition || _sheet.getLastRow() + 1;
        var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
        range.setValues([arrValues]);
      },
      addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(url, rowPosition, columnPosition, left, top);
      },   
      addImage: function(blob, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
      },   
      deleteRow: function(rowPosition){
        _sheet.deleteRow(rowPosition);
      }, 
	  copyRange: function(fromRange, toRange){
        Logger.log('copy range from %s to %s', fromRange, toRange);
        var valuesToCopy = this.getValuesByRange(fromRange);      
        this.setRangeValues(toRange, valuesToCopy);           
      },   
      sort: function(columnPosition){
        _sheet.sort(columnPosition);
      },
      hasCharts:  _sheet.getCharts().length > 0,
      findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
        /* 
        get column values filtered by other column
        
        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */
        
        var result = [];       
        var rows = _sheet.getDataRange().getValues();
        
        for(row in rows)
          if(rows[row][filterColumnPosition - 1] == filterValue)
            result.push(rows[row][columnPosition]);
        return result;  
      }, 
	  freezeHeader: function(){
          _sheet.setFrozenRows(1);
      },
      merge: function(strRange){
        _sheet.getRange(strRange).merge();
      },  
      clear: function(charts, format, contents){
        charts = charts || false;
        format = format || false;
        contents = contents || true;
        
        _sheet.clear({ formatOnly: format, contentsOnly: contents });    
        
        // clear all notes
        _sheet.clearNotes();        
        
        // clear all charts
        var charts = _sheet.getCharts();
        for (var i in charts)
          _sheet.removeChart(charts[i]);
      },          
      setValue: function(rowPosition, columnPosition, value){ 
        _sheet.getRange(rowPosition, columnPosition).setValue(value);
      },     
      setRangeValue: function(strRange, value){ 
        // e.g: setCurrencyFormat('A1'); // set cell
        _sheet.getRange(strRange).setValue(value);
      },
	  setRangeValues: function(strRange, values){         
        _sheet.getRange(strRange).setValues(values);
      },
      setColumnWidth: function(columnPosition, width){
        _sheet.setColumnWidth(columnPosition, width);
      },  
      setRowHeight: function(rowPosition, height){
        _sheet.setRowHeight(rowPosition, height);
      },  
      setName: function(newName){
        _sheet.setName(newName);
      }, 
      setNote: function(strRange, note){
         var range = _sheet.getRange(strRange);
        range.setNote(note);
      },         
      setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
        var range = _sheet.getRange(strRange);
        if(backgroundColor)
          range.setBackground(backgroundColor);
        if(foreColor)
          range.setFontColor(foreColor);
        if(fontSize)
          range.setFontSize(fontSize);
        if(hAlign)
          range.setHorizontalAlignment(hAlign);
        if(vAlign)
          range.setVerticalAlignment(vAlign)
          if(fontWeight)
            range.setFontWeight(fontWeight);
        if(border)
          range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
      }, 
      setNumberFormat: function(strRange){
        setFormat(strRange, '0');       
      },
      setDecimalFormat: function(strRange){
        setFormat(strRange, '0.00');
      },
      setCurrencyFormat: function(strRange){
        setFormat(strRange, '$0.00');
      },
      setPercentageFormat: function(strRange){
        // e.g: setPercentageFormat('A1'); // set cell
        // e.g: setPercentageFormat('A1:A10'); // set range
        
        setFormat(strRange, '0.00%');
      },
      setWeekFormat: function(strRange){
        setFormat(strRange, 'MMM dd');
      },
      setMonthFormat: function(strRange){
        setFormat(strRange, 'MMM');
      },
      setCellSumFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set SUM value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=SUM(' + strRange + ')');
      },
      setCellAvgFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set AVG value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=AVERAGE(' + strRange + ')');
      },
      setCellFormula: function(formula, strCell){
        // e.g: setCellFormula('=B3-C3', 'D3');         
		// e.g: setCellFormula('=$B3-$C3', 'D3:D9');   
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula(formula);
      }        
  }; 
}

// ----------------------------------------------

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSpreadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}

// ----------------------------------------------

// AD MANAGER SERVICE
var AdManagerService = function() { 
  return{
    createAdGroup: function(campaign, adGroupName, defaultBid){
      var adGroupBuilder = campaign.newAdGroupBuilder();
      var operation = adGroupBuilder
      .withName(adGroupName)
      .withCpc(defaultBid)
      // .withStatus('ENABLED')
      .build();
      
      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },
    // createAd: function(adGroup, header1, header2, description, destinationURL, pathURL1, pathURL2)
    createAd: function(adGroup, header1, header2, header3, description1, description2, destinationURL, pathURL1, pathURL2){
      
      if(header1.length > 30)
        header1 = header1.substr(0, 29);
      if(header2.length > 30)
        header2 = header2.substr(0, 29);
      if(description1.length > 80)
        description1 = description1.substr(0, 79);
     
      var builder = adGroup.newAd().expandedTextAdBuilder()
      .withHeadlinePart1(header1) // 30 characters      
      .withHeadlinePart2(header2) // 30 characters
      .withDescription1(description1) // 80 characters      
      .withFinalUrl(destinationURL) // 255 characters    
      .withMobileFinalUrl(destinationURL);
      
      /* parameters:
      
         syntax:
         {param<num>:<default value>}
         
         e.g: 
         product {param1: 'some product'} for only {param2: 0} $ - buy now!
      */

      if(pathURL1)
        builder.withPath1(pathURL1); // 15 characters (the first part after the siteURL) e.g: http://mydomain.com/partURL1/partURL2
      
      if(pathURL2)
        builder.withPath2(pathURL2); // 15 characters (the second part after the siteURL)

      if(header3){
      	if(header3.length > 30)
        	header3 = header3.substr(0, 29);
        
        builder.withHeadlinePart3(header3) // 30 characters
      }
      
      if(description2){
      	if(description2.length > 80)
        description2 = description2.substr(0, 79);
        
        builder.withDescription2(description2) // 80 characters  
      }
      
      var operation = builder.build();
      
      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },
        
    createKeywords: function(adGroup, arrKeywods){
      // arrKeywods: [string]
      // match type: see 'Match Types'
      
      for(i in arrKeywods){
        var keyword = arrKeywods[i];                        
        var operation = adGroup.newKeywordBuilder()        
        .withText(keyword)       
        // .withCpc(1.0)
        .build();        
      }
    },
    createNegativeKeywords: function(adGroup, arrKeywods){
      for(i in arrKeywods){
        var keyword = arrKeywods[i];
        adGroup.createNegativeKeyword(keyword);
      }
    },   
    
    createSiteLink: function(text, url){   
      var operation = AdWordsApp.extensions().newSitelinkBuilder()
        .withLinkText(text)
        .withFinalUrl(url)
        .build();

      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },

    /*
	   important! 
	   use it before you add your match type signs! (calling the createKeywords method)
	   in order to prevent a deletion of those legitimate chars which add to represent the keyword match type ("keyword", [keyword], +keyword)

       Logger.log(adManagerService.clearKeyword('A!@%,*B'));
       Logger.log(adManagerService.clearKeyword('12%34'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K L M N O P'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K    L M N      O       P', true));
    */
    clearKeyword: function(keyword, clearSpacers){
      var specialCharacters = ['!','@','%',',','*','(',')','.','&quot;','&','`',';','\'','-','"','+','[',']'];
      var maxWordsAllowed = 10;
      
      // non allowed characters
      // [error] Keywords cannot contain non-standard characters like: ! @ % , *
      for(i in specialCharacters)
      {
        var c = specialCharacters[i];
        if(keyword.indexOf(c) == -1) continue;
        keyword = keyword.split(c).join(''); // replace all
      }      
      
      // two many words
      // [error] Keywords cannot contain more than 10 words
      if(keyword.split(' ').length > maxWordsAllowed)
        keyword = keyword.split(' ').slice(0, 9).join(' '); // remove words
        
      if(clearSpacers == true)
        keyword = this.clearKeywordSpacers(keyword);
      
      return keyword;
    },
    clearKeywordSpacers : function (input){
		var arrWords = input.split(' ');
		if(arrWords.length == 1) {
		// Logger.log('single word: /%s/', input);
		return input;
		}

		// clear extra middle spaces ('A B C' -> 'A B C')
		var temp = [];
		for(i in arrWords){ 
		var word = arrWords[i].trim();
		if(word == '' || word.length == 1) continue; 
		// Logger.log('word: /%s/', word);
		temp.push(word); 
		} 

		var output = temp.join(' ');
		// Logger.log('input: /%s/', input);
		// Logger.log('output: /%s/', output);
		return output; 
	},
    setKeywordParams: function(keyword, param1Value, param2Value, param3Value){      
      if(param1Value)
        keyword.setAdParam(1, param1Value);
      
      if(param2Value)
        keyword.setAdParam(2, param2Value);
      
      if(param3Value)
        keyword.setAdParam(3, param3Value);
    },
    getAds: function(campaign){
      var ads = [];
      
      var adsIter = campaign.ads()
      .withCondition('Type = EXPANDED_TEXT_AD')
      .withCondition('Status IN [ENABLED,PAUSED]')
      .get();
      
      while(adsIter.hasNext())      
        ads.push(adsIter.next().asType().expandedTextAd());
      
      return ads;      
    },  
    getAdsByAdgroup: function(adgroup){
      var ads = [];
      
      var adsIter = adgroup.ads()      
      .withCondition('Type = EXPANDED_TEXT_AD')
      .withCondition('Status IN [ENABLED]')
      .get();
      
      while(adsIter.hasNext())      
        ads.push(adsIter.next().asType().expandedTextAd());
      
      return ads;      
    },  
    checkIfAdExistsByTitle: function(campaign, adTitle){
      var ads = this.getAds(campaign);
      for(i in ads)
        if(ads[i].getHeadlinePart1() == adTitle)
          return true;
      return false;
    },
    checkIfAdGroupExistsByName: function(campaign, adGroupName){
      return this.getAdGroupByName(campaign, adGroupName) != null;
    },
    getAdGroupByName: function(campaign, adGroupName){
      adGroupName = adGroupName.toLowerCase();
      
      var adgroups = campaign.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withCondition('Name STARTS_WITH_IGNORE_CASE "' + adGroupName + '"')
      .get()
      
      while(adgroups.hasNext())
      { 
        var adgroup = adgroups.next();
        if(adgroup.getName().toLowerCase() == adGroupName)
          return adgroup;
      }
      return null;
    },
    getAdGroupById: function(adGroupId){            
      var adgroup = AdWordsApp.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([adGroupId])
      .get()
      
      if(adgroup.hasNext())
        return adgroup.next();
      return null;
    },
    getCampaignById: function(campaignId){            
      var campaign = AdWordsApp.campaigns()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([campaignId])
      .get()
      
      if(campaign.hasNext())
        return campaign.next();
      return null;
    },
    getKeywordParams: function(keyword){
      // [{index, text}]
      var result = [];
      
      var adParams = keyword.adParams().get();
      while (adParams.hasNext()) {
        var adParam = adParams.next();
        result.push({ 
          index: adParam.getIndex(),
          text: adParam.getInsertionText()
      	});
      }
      
      return result;
    },
    checkIfKeywordExists: function(campaign, keywordText){
      return campaign.keywords()
      .withCondition('Text = \'' + keywordText + '\'')
      .get()
      .hasNext();
    },
    checkIfKeywordExistsInAdGroup: function(adgroup, keywordText){
      return adgroup.keywords()
      .withCondition('Text = \'' + keywordText + '\'')
      .get()
      .hasNext();
    },
  };
}