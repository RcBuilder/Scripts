var LABEL_ACCOUNT = 'REPORT';
var SHEET_PREFIX = 'WeeklyComparison_';

function main() {
  // get all the mcc accounts using the x label
  var accounts = MccApp.accounts()
  .withCondition("LabelNames CONTAINS '" + LABEL_ACCOUNT + "'")
  .get();
  
  // go over the mcc accounts
  while (accounts.hasNext()) {
    var account = accounts.next();
    var accountName = account.getName() ? account.getName() : '--';
    Logger.log('[account] #%s,%s', account.getCustomerId(), accountName);
    
    // set the active account
    MccApp.select(account);    
    Process(account);
    
    Logger.log('-------------');
  }    
}

function Process(account){   
  var accountName = account.getName();
  var sheetName = SHEET_PREFIX.concat(accountName);
  Logger.log(sheetName);
  
  var previousSunday = HELPER.getThePreviousSunday(new Date());    
  
  var endWeekA = previousSunday;  
  var startWeekA = HELPER.dateAdd(previousSunday, -6);    
  var dateRangeA = HELPER.dateFormat(startWeekA) + ',' + HELPER.dateFormat(endWeekA);        
    
  var endWeekB = HELPER.dateAdd(startWeekA, -1);  
  var startWeekB = HELPER.dateAdd(endWeekB, -6);    
  var dateRangeB = HELPER.dateFormat(startWeekB) + ',' + HELPER.dateFormat(endWeekB);        
  
  var sheetService = SpreadsheetLoader.loadSheetService(sheetName);
  if(!sheetService)
    sheetService = SpreadsheetLoader.createSheetService(sheetName);  
  sheetService.clear(true, true, true);
  
  // { campaignName, statsA, statsB }
  var arrStats = [];
  
  // get metrics
  Logger.log('Week A: %s', dateRangeA);
  Logger.log('Week B: %s', dateRangeB);
  
  var campaigns = AdWordsApp.campaigns().withCondition('Status IN [ENABLED]').get();
  while (campaigns.hasNext()) { 
	var campaign = campaigns.next();
    var campaignName = campaign.getName();    
	Logger.log(campaignName);    
    arrStats.push({ 
      campaignName: campaignName, 
      statsA: campaign.getStatsFor(dateRangeA.split(',')[0], dateRangeA.split(',')[1]), 
      statsB: campaign.getStatsFor(dateRangeB.split(',')[0], dateRangeB.split(',')[1])
    });
  } 
  
  sheetService.addRow([ 
    HELPER.dateName(startWeekA) + ' - ' + HELPER.dateName(endWeekA),
    HELPER.dateName(startWeekB) + ' - ' + HELPER.dateName(endWeekB),     
  ]);
  
  // add header   
  sheetService.addRow([ 
    'Campaign Name', 
    'Impressions', 
    'Impressions',
    'Change',
    'Clicks', 
    'Clicks', 
    'Change',
    'Ctr', 
    'Ctr', 
    'Change',
    'Cost', 
    'Cost', 
    'Change',
    'Cpc', 
    'Cpc', 
    'Change',
    'Position', 
    'Position', 
    'Change',
    'Conversions', 
    'Conversions', 
    'Change',
    'Conv.Rate', 
    'Conv.Rate', 
    'Change',
    'Cost/Conv.', 
    'Cost/Conv.',  
    'Change'
  ]);
 
  // add rows
  for(i in arrStats){     
    
    var campaignStats = arrStats[i];
    
    sheetService.addRow([ 
      campaignStats.campaignName,                     
      campaignStats.statsA.getImpressions(),
      campaignStats.statsB.getImpressions(),
      '',
      campaignStats.statsA.getClicks(),
      campaignStats.statsB.getClicks(),
      '',
      campaignStats.statsA.getCtr(),
      campaignStats.statsB.getCtr(),
      '',
      campaignStats.statsA.getCost(),
      campaignStats.statsB.getCost(),
      '',
      campaignStats.statsA.getAverageCpc(),
      campaignStats.statsB.getAverageCpc(),
      '',
      campaignStats.statsA.getAveragePosition(),
      campaignStats.statsB.getAveragePosition(),
      '',
      campaignStats.statsA.getConversions(),
      campaignStats.statsB.getConversions(),
      '',
      campaignStats.statsA.getConversionRate(),
      campaignStats.statsB.getConversionRate(),
      '',
      CalculateCPA(campaignStats.statsA.getConversions(), campaignStats.statsA.getCost()),
      CalculateCPA(campaignStats.statsB.getConversions(), campaignStats.statsB.getCost()),
      '--'
    ]);    
  }

  // set sheet UI and cell formats
  sheetService.setDataUI('A1:B1', null, null, 11, 'left', 'bold', null, 'middle');  
  sheetService.setDataUI('A2:AB2', null, '#04465e', 11, 'left', 'bold', null, 'middle');  
      
  sheetService.setNumberFormat('B3:H1');    
  sheetService.setPercentageFormat('H3:K1');  
  sheetService.setCurrencyFormat('K3:Q1');  
  sheetService.setDecimalFormat('Q3:T1');   
  sheetService.setNumberFormat('T3:W1');    
  sheetService.setPercentageFormat('W3:Z1');  
  sheetService.setCurrencyFormat('Z3:AC1');     
  
  // formulas
  var lastRow = (3 + arrStats.length - 1);
  sheetService.setCellFormula('=$B3-$C3', 'D3:D' + lastRow);
  sheetService.setCellFormula('=$E3-$F3', 'G3:G' + lastRow);
  sheetService.setCellFormula('=$H3-$I3', 'J3:J' + lastRow);
  sheetService.setCellFormula('=$K3-$L3', 'M3:M' + lastRow);
  sheetService.setCellFormula('=$N3-$O3', 'P3:P' + lastRow);
  sheetService.setCellFormula('=$Q3-$R3', 'S3:S' + lastRow);
  sheetService.setCellFormula('=$T3-$U3', 'V3:V' + lastRow);
  sheetService.setCellFormula('=$W3-$X3', 'Y3:Y' + lastRow);
  sheetService.setCellFormula('=$Z3-$AA3', 'AB3:AB' + lastRow);  
}

function CalculateCPA(conversions, cost){
  return conversions == 0 ? 0 : (cost / conversions).toFixed(2);
}
      
// ---------------------------------------------------------------------

/* SPREADSHEET SERVICE */
var SpreadSheetService = function(spreadSheet) {
  var _spreadSheet = spreadSheet;
  var _sheets = [];

  (function(){
    var sheetServices = [];
    var temp_sheets = spreadSheet.getSheets();
    for(var i= 0; i < temp_sheets.length; i++)
      _sheets.push(new SheetService(temp_sheets[i]));   
  })();   
  
  return {      
    sheets: _sheets,
	spreadSheet: _spreadSheet, 
    getName: function(){
      return _spreadSheet.getName();
    },
    getActiveSheet: function(){
      return SheetService(_spreadSheet.getActiveSheet());
    },
    getSheetByName: function(sheetName) { 
         for(var i= 0; i < _sheets.length; i++)
            if(_sheets[i].sheetName == sheetName)
              return _sheets[i];
          return '';
    },
    addNewSheet: function(sheetName){
        var new_sheet = SheetService(_spreadSheet.insertSheet(sheetName));
        _sheets.push(new_sheet)
        return new_sheet;         
    },
    isSheetExists: function(sheetName){
        return this.getSheetByName(sheetName) != '';
    }, 
    getURL: function(){
      return _spreadSheet.getUrl();
    },
	getId: function(){
      return _spreadSheet.getId();
    },
    setName: function(newName){
      _spreadSheet.rename(newName);  
    }, 
	setActiveSheetByIndex: function(index){
      _spreadSheet.setActiveSheet(_sheets[index].sheet);
    },
    clearALL: function(){
      for(var i= 0; i < _sheets.length; i++)
        _sheets[i].clear(true, true, true);
    }
  }; 
}

/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    },      
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
      getColumnValues: function(startRowPosition, columnPosition){
        // getRange(row, column, numRows, numColumns)
        return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
      }, 
      addRow: function(arrValues){ 
        //_sheet.appendRow(arrValues);
        this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
      },
      addRowAtIndex: function(arrValues, rowPosition){               
        rowPosition = rowPosition || _sheet.getLastRow() + 1;
        var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
        range.setValues([arrValues]);
      },
      addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(url, rowPosition, columnPosition, left, top);
      },   
      addImage: function(blob, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
      },   
      deleteRow: function(rowPosition){
        _sheet.deleteRow(rowPosition);
      },  
      sort: function(columnPosition){
        _sheet.sort(columnPosition);
      },
      hasCharts:  _sheet.getCharts().length > 0,
      findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
        /* 
        get column values filtered by other column
        
        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */
        
        var result = [];       
        var rows = _sheet.getDataRange().getValues();
        
        for(row in rows)
          if(rows[row][filterColumnPosition - 1] == filterValue)
            result.push(rows[row][columnPosition]);
        return result;  
      }, 
	  freezeHeader: function(){
          _sheet.setFrozenRows(1);
      },
      merge: function(strRange){
        _sheet.getRange(strRange).merge();
      },  
      clear: function(charts, format, contents){
        charts = charts || false;
        format = format || false;
        contents = contents || true;
    
        _sheet.clear({ formatOnly: format, contentsOnly: contents });    
        
        // clear all notes
        _sheet.clearNotes();        
        
        // clear all charts
        var charts = _sheet.getCharts();
        for (var i in charts)
          _sheet.removeChart(charts[i]);
      },          
      setValue: function(rowPosition, columnPosition, value){ 
        _sheet.getRange(rowPosition, columnPosition).setValue(value);
      },     
      setRangeValue: function(strRange, value){ 
        // e.g: setCurrencyFormat('A1'); // set cell
        _sheet.getRange(strRange).setValue(value);
      },
      setColumnWidth: function(columnPosition, width){
        _sheet.setColumnWidth(columnPosition, width);
      },  
      setRowHeight: function(rowPosition, height){
        _sheet.setRowHeight(rowPosition, height);
      },  
      setName: function(newName){
        _sheet.setName(newName);
      }, 
      setNote: function(strRange, note){
         var range = _sheet.getRange(strRange);
        range.setNote(note);
      },         
      setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
        var range = _sheet.getRange(strRange);
        if(backgroundColor)
          range.setBackground(backgroundColor);
        if(foreColor)
          range.setFontColor(foreColor);
        if(fontSize)
          range.setFontSize(fontSize);
        if(hAlign)
          range.setHorizontalAlignment(hAlign);
        if(vAlign)
          range.setVerticalAlignment(vAlign)
          if(fontWeight)
            range.setFontWeight(fontWeight);
        if(border)
          range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
      }, 
      setNumberFormat: function(strRange){
        setFormat(strRange, '0');       
      },
      setDecimalFormat: function(strRange){
        setFormat(strRange, '0.00');
      },
      setCurrencyFormat: function(strRange){
        setFormat(strRange, '$0.00');
      },
      setPercentageFormat: function(strRange){
        // e.g: setPercentageFormat('A1'); // set cell
        // e.g: setPercentageFormat('A1:A10'); // set range
        
        setFormat(strRange, '0.00%');
      },
      setWeekFormat: function(strRange){
        setFormat(strRange, 'MMM dd');
      },
      setMonthFormat: function(strRange){
        setFormat(strRange, 'MMM');
      },
      setCellSumFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set SUM value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=SUM(' + strRange + ')');
      },
      setCellAvgFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set AVG value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=AVERAGE(' + strRange + ')');
      },
      setCellFormula: function(formula, strCell){
        // e.g: setCellSumFormula('=B3-C3', 'D3');         
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula(formula);
      } 
  }; 
}

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}

// ---------------------------------------------------------------------


var HELPER = {
  foreach: function (arr, callback) {
    if (!(arr instanceof Array)) return;
    for (var i = 0; i < arr.length; i++)
      callback(arr[i]);
  },
  HTML2PDF: function(strHtml, pdfName){
    var blob = Utilities.newBlob(strHtml, MimeType.HTML);
    var pdf = blob.getAs(MimeType.PDF);  
    pdf.setName(pdfName);
    return pdf
  },
  containsLabel: function (labelName) { // call
    return this.labels()
    .withCondition('Name = "' + labelName + '"')
    .get()
    .hasNext();
  },
  generateRandomId: function(){
    var result = '';
    for(var i=0;i<8;i++)
      result = result.concat(Math.round(Math.random() * 9));
    return result;
  },
  dateSignature: function (date){
    var year = date.getFullYear().toString();
    var month = (date.getMonth()+1).toString();
    
    if(month.length == 1) month = '0' + month; 
    
    return parseInt(year + month); // return yyyyMM as int
  },
  dateDiff: function (date1, date2) {
    var datediff = date1.getTime() - date2.getTime(); 
    return parseInt(datediff / (24*60*60*1000));
  },
  dateFormat: function (date){
    var year = date.getFullYear().toString();
    var month = (date.getMonth() +1).toString();
    var day = date.getDate().toString();
    
    if(month.length == 1) month = '0' + month; // return yyyyMMdd
    if(day.length == 1) day = '0' + day;
    
    return year + month + day;
  }, 
  getTheNextSunday: function(date){
    var newDate = new Date(date.getTime()); 
    
    var numOfweekDays = 7;         
    if(newDate.getDay() > 0)
      newDate.setDate(newDate.getDate() + (numOfweekDays - newDate.getDay()));
    return newDate;  
  },
  getThePreviousSunday: function(date){
    var newDate = new Date(date.getTime());                    
    newDate.setDate(newDate.getDate() - newDate.getDay());
    return newDate;  
  },
  dateAdd: function(date, value, type){      
    type = type || 'dd';
    
    var newDate = new Date(date.getTime());
    
    if(type == 'dd')
      newDate.setDate(newDate.getDate() + value);
    else if(type == 'MM')
      newDate.setMonth(newDate.getMonth() + value);
    
    return newDate;  
  }, 
  generateRange: function(daysFrom, daysTo){
	var to = new Date();
	to.setDate(to.getDate() + daysTo);
  
    var from = new Date();
	from.setDate(from.getDate() + daysFrom);
  
	return this.dateFormat(from) + ',' + this.dateFormat(to);
  },
  getFirstDayOfMonth: function(date){
    var newDate = new Date(date.getTime());
    newDate.setDate(1);
    return newDate;  
  },
  getLastDayOfMonth: function(date){
    var newDate = new Date(date.getYear(), date.getMonth() + 1, 1);
    newDate.setDate(newDate.getDate() - 1); // decrease one day from the first on the following month
    return newDate;  
  }, 
  dateName: function(date){
    // toDateString() -> Mon Feb 29 2016
    var arrDateParts = date.toDateString().split(' '); 
    return arrDateParts[1] + ' ' + arrDateParts[2];  // Feb 29
  },
  monthName: function(date){
    // toDateString() -> Mon Feb 29 2016
    var arrDateParts = date.toDateString().split(' '); 
    return arrDateParts[1] + ', ' + arrDateParts[3];  // Feb, 2016
  },
  parseDate: function(strDate){ 
	// strDate: yyyy-MM-dd
    var arrDateParts = strDate.split('-');
    return new Date(arrDateParts[0], parseInt(arrDateParts[1], 10) - 1, arrDateParts[2]);
  }, 
  toPercentageFormat: function(value){    
    return (value * 100).toFixed(2).toString() + '%';
  }
};