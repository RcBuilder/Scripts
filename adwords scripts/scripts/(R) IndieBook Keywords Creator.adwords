// var CSV_PATH = 'http://delivit.co.il/web/seoReport.csv';
var CSV_PATH = 'https://indiebook.co.il/images/site/seoReport.csv';
var ADGROUP_ID = 48601363422;
var TEST_MODE = true;

function main() {  
  var adManagerService = AdManagerService();
  var adGroup = adManagerService.getAdGroupById(ADGROUP_ID); 
  if(!adGroup){
    Logger.log('adGroup #%s not found', ADGROUP_ID);
    return;
  }
  
  var csvService = CSVService(CSV_PATH);
  var indiebookReaderService = IndiebookReaderService(csvService);   
  
  // Logger.log(indiebookReaderService.countRows());
  
  var titles = indiebookReaderService.getTitles();
  
  if(TEST_MODE)
  {
    Logger.log('TEST_MODE');
    titles.sort(function(a, b){
      return Math.random() < 0.5 ? -1 : 1;
    });
    
    titles = titles.slice(1, 10);
  }
  
  for(var i=0; i< titles.length; i++){
    
    var title = adManagerService.clearKeyword(titles[i]);
    Logger.log('%s', title); 
    
    try{

      if(!adManagerService.checkIfKeywordExistsInAdGroup(adGroup, title))
      {
        var kw = '"' + title + '"';
        Logger.log('Adding MEW keyword: %s', kw);
        adManagerService.createKeywords(adGroup, [kw]);     
      }
    }
    catch(ex){
      Logger.log('Exception: %s', ex.message);
    }
  }
}

/* INDIEBOOK READER SERVICE */
var IndiebookReaderService = function(csvService) { 
  var _csvService = null;  
  var _metrics = null;
  
  function getMetrics(){
    var rows = [];
    
    for(i in _csvService.document){
      var row = _csvService.document[i];
      if(row[0].length == 1) 
        continue;      
      rows.push(row);
    }
    return rows;
  };
  
  (function(){
     _csvService = csvService; 
    _metrics = getMetrics();    
  })();  
  
  return {      
     countRows: function(){       
       return _metrics.length;                
     },      
     getTitles: function(){
       return _metrics.slice(1).map(function(row){ 
         return row[1]; 
       });
     }
   }; 
}

/* CSV SERVICE */
var CSVService = function(uri) { 
  var _document = null;
  var _delimiter = ',';
  var _charset = 'Unicode';
  
  (function(){
    var response = UrlFetchApp.fetch(uri);
    var status_code = response.getResponseCode();
    
    if(status_code != 200) // 200 = OK
    {
      Logger.log('status code %s', status_code);
      return;
    }
    
    Logger.log('%s was loaded', uri);            
    _document = Utilities.parseCsv(response.getContentText(_charset), _delimiter);    
   })();  
  
   return { 
     document: _document,
     count: function(){
       if(!_document) 
         return 0;
       
       if(_document.length)
         return _document.length;         
       return 1;
     }, 
   }; 
}

// AD MANAGER SERVICE
var AdManagerService = function() { 
  return{
    createAdGroup: function(campaign, adGroupName, defaultBid){
      var adGroupBuilder = campaign.newAdGroupBuilder();
      var operation = adGroupBuilder
      .withName(adGroupName)
      .withCpc(defaultBid)
      // .withStatus('ENABLED')
      .build();
      
      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },
    createAd: function(adGroup, header1, header2, description, destinationURL, partURL1, partURL2){
      
      if(header1.length > 30)
        header1 = header1.substr(0, 29);
      if(header2.length > 30)
        header2 = header2.substr(0, 29);
      if(description.length > 80)
        description = description.substr(0, 79);
     
      var builder = adGroup.newAd().expandedTextAdBuilder()
      .withHeadlinePart1(header1) // 30 characters      
      .withHeadlinePart2(header2) // 30 characters
      .withDescription(description) // 80 characters      
      .withFinalUrl(destinationURL) // 255 characters    
      .withMobileFinalUrl(destinationURL);
      
      /* parameters:
      
         syntax:
         {param<num>:<default value>}
         
         e.g: 
         product {param1: 'some product'} for only {param2: 0} $ - buy now!
      */

      if(partURL1)
        builder.withPath1(partURL1); // 15 characters (the first part after the siteURL) e.g: http://mydomain.com/partURL1/partURL2
      
      if(partURL2)
        builder.withPath2(partURL2); // 15 characters (the second part after the siteURL)
      
      var operation = builder.build();
      
      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },        
    createKeywords: function(adGroup, arrKeywods){
      
      // see 'Match Types'
      
      for(i in arrKeywods){
        var keyword = arrKeywods[i];                        
        var operation = adGroup.newKeywordBuilder()        
        .withText(keyword)       
        // .withCpc(1.0)
        .build();        
      }
    },
    createNegativeKeywords: function(adGroup, arrKeywods){
      for(i in arrKeywods){
        var keyword = arrKeywods[i];
        adGroup.createNegativeKeyword(keyword);
      }
    },    
    /*
	   important! 
	   use it before you add your match type signs! (calling the createKeywords method)
	   in order to prevent a deletion of those legitimate chars which add to represent the keyword match type ("keyword", [keyword], +keyword)

       Logger.log(adManagerService.clearKeyword('A!@%,*B'));
       Logger.log(adManagerService.clearKeyword('12%34'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K L M N O P'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K    L M N      O       P', true));
    */
    clearKeyword: function(keyword, clearSpacers){
      var specialCharacters = ['!','@','%',',','*','(',')','.','&quot;','&','`',';','\'','-','"','+','[',']'];
      var maxWordsAllowed = 10;
      
      // non allowed characters
      // [error] Keywords cannot contain non-standard characters like: ! @ % , *
      for(i in specialCharacters)
      {
        var c = specialCharacters[i];
        if(keyword.indexOf(c) == -1) continue;
        keyword = keyword.split(c).join(''); // replace all
      }      
      
      // two many words
      // [error] Keywords cannot contain more than 10 words
      if(keyword.split(' ').length > maxWordsAllowed)
        keyword = keyword.split(' ').slice(0, 9).join(' '); // remove words
        
      if(clearSpacers == true)
        keyword = this.clearKeywordSpacers(keyword);
      
      return keyword;
    },
    clearKeywordSpacers : function (input){
		var arrWords = input.split(' ');
		if(arrWords.length == 1) {
		// Logger.log('single word: /%s/', input);
		return input;
		}

		// clear extra middle spaces ('A B C' -> 'A B C')
		var temp = [];
		for(i in arrWords){ 
		var word = arrWords[i].trim();
		if(word == '' || word.length == 1) continue; 
		// Logger.log('word: /%s/', word);
		temp.push(word); 
		} 

		var output = temp.join(' ');
		// Logger.log('input: /%s/', input);
		// Logger.log('output: /%s/', output);
		return output; 
	},
    setKeywordParams: function(keyword, param1Value, param2Value, param3Value){      
      if(param1Value)
        keyword.setAdParam(1, param1Value);
      
      if(param2Value)
        keyword.setAdParam(2, param2Value);
      
      if(param3Value)
        keyword.setAdParam(3, param3Value);
    },
    getAds: function(campaign){
      var ads = [];
      
      var adsIter = campaign.ads()
      .withCondition('Type = EXPANDED_TEXT_AD')
      .withCondition('Status IN [ENABLED,PAUSED]')
      .get();
      
      while(adsIter.hasNext())      
        ads.push(adsIter.next().asType().expandedTextAd());
      
      return ads;      
    },    
    checkIfAdExistsByTitle: function(campaign, adTitle){
      var ads = this.getAds(campaign);
      for(i in ads)
        if(ads[i].getHeadlinePart1() == adTitle)
          return true;
      return false;
    },
    checkIfAdGroupExistsByName: function(campaign, adGroupName){
      return this.getAdGroupByName(campaign, adGroupName) != null;
    },
    getAdGroupByName: function(campaign, adGroupName){
      adGroupName = adGroupName.toLowerCase();
      
      var adgroups = campaign.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withCondition('Name STARTS_WITH_IGNORE_CASE "' + adGroupName + '"')
      .get()
      
      while(adgroups.hasNext())
      { 
        var adgroup = adgroups.next();
        if(adgroup.getName().toLowerCase() == adGroupName)
          return adgroup;
      }
      return null;
    },
    getAdGroupById: function(adGroupId){            
      var adgroup = AdWordsApp.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([adGroupId])
      .get()
      
      if(adgroup.hasNext())
        return adgroup.next();
      return null;
    },
    getCampaignById: function(campaignId){            
      var campaign = AdWordsApp.campaigns()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([campaignId])
      .get()
      
      if(campaign.hasNext())
        return campaign.next();
      return null;
    },
    checkIfKeywordExists: function(campaign, keywordText){
      return campaign.keywords()
      .withCondition('Text = \'' + keywordText + '\'')
      .get()
      .hasNext();
    },
    checkIfKeywordExistsInAdGroup: function(adgroup, keywordText){
      return adgroup.keywords()
      .withCondition('Text = \'' + keywordText + '\'')
      .get()
      .hasNext();
    },
  };
}