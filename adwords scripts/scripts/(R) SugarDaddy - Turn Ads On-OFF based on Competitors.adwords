/*
  this script enables ALL ads within the specified ad-group if there's a competition of one of the provided phrases
  if no competition found - it pauses all ads! 
  the script uses a proxy server to make google search. (no cookies nor site data, same as in incognito mode!)
  
  [process]
  
  given:
  the ad-group has 2 ads:
  Ad1 and Ad2
  
  the phrases to check for are:
  ['phrase1', 'phrase2']
  
  the campaign has the following KWs:
  kw1
  kw2
  
  --
  
  steps:
  1. load all Ads within the ad group
  2. load all enabled keywords within the ad-group
  3. for each keyword > create a google search using the keyword as the query 
     note! it uses a proxy server
  4. check the result from chapter 3 (google-ads) 
     - filter-out the ad-group ads (using their URL)
     - check each phrase from the provided PHRASES list
     - if exists - stop processing and return the match
  5. based on the result from chapter 4, the script then pauses/ enables all loaded ads fom chapter 1
     - pauses all if a phrase hasn't found (no competition on the provided phrases)
     - enables all if a phrase found (found competitors that advertise on one of the provided phrases)
  6. set keywords bid to the top page
*/

var PROXY_SERVER = 'http://adwordsservices.linkgen.biz/';
var EMAIL = 'rcbuilder@walla.com';
var REPORT_ONLY_MODE = true;
var CAMPAIGN_Id = 8149881011;
var PHRASES = [    
  'שוגר דדי'
];

function main() {      
  /*
  var a = [
    {'Description':'', 'Href':'https://rancom.co.il/web/'}, 
    {'Description':'', 'Href':'https://www.interdeal.co.il/'}, 
    {'Description':'', 'Title':'', 'Href':'https://bareket.site/home20/'}
  ];
  var b = ['http://domain.com', 'https://www.interdeal.co.il'];

  var filtered = a.filter(function(ad) { 
    Logger.log('%s %s', ad.Href, b.indexOf(trimEnd(ad.Href, '/')));
    return b.indexOf(trimEnd(ad.Href, '/')) == -1;
  });
    
  Logger.log('filtered: ' + filtered.map(function(ad){ return ad.Href; }).join());
  return;
  */
  
  var htmlBuilderService = HTMLBuilderService();
  htmlBuilderService.add('<div style="direction:ltr;text-align:left;">');
  
  var campaign = AdsApp.campaigns().withIds([CAMPAIGN_Id]).get().next();  
  htmlBuilderService.add('<h2>{0}</h2>'.replace('{0}', campaign.getName()));   
  
  var campaignAds = getAds(campaign);
  Logger.log('%s ads found', campaignAds.length);  
  htmlBuilderService.add('<p>{0} ads found</p>'.replace('{0}', campaignAds.length));  
  
  var keywords = campaign.keywords()
  .withCondition('Status = ENABLED')
  .get();
  
  htmlBuilderService.add('<p>{0} keywords found</p>'.replace('{0}', campaignAds.length)); 
  
  var organicCount = 0;
  var found = false;
  while(keywords.hasNext()){
    var keyword = keywords.next();
    var keywordText = keyword.getText();
    
    //  { organic, paid }
    var googleResult = scanGoogleAds(keywordText, htmlBuilderService);
    var googleAds = googleResult.paid;
    organicCount += googleResult.organic.length;
    if(!googleAds) continue;
            
    var result = checkGoogleAds(googleAds, campaignAds, htmlBuilderService);
    if(result.foundPhrase){ 
      var msg = 'found google ads with the phrase [{0}] > google-ad-url: [{1}]'.replace('{0}', result.phrase).replace('{1}', result.googleAdUrl);
      Logger.log(msg);
      htmlBuilderService.add('<p>' + msg + '</p>');
      
      found = true;
      break;
    }
  } 
  
  Logger.log('organicCount: %s', organicCount);    
  if(organicCount == 0){
    Logger.log('organicCount is 0, stop processing...');    
  }
  else {        
    var isSuccess = setAds(found, campaign, campaignAds, htmlBuilderService);
    Logger.log('setAds (isSuccess): %s', isSuccess);  
    if(!isSuccess)
      Logger.log('setAdsStatus: some error occured');        
  }
  
  htmlBuilderService.add('</div>');  
  
  try{                 
    Logger.log('send mail to %s', EMAIL);
    MailApp.sendEmail(EMAIL, 'Competitors Ads Monitor ', '', {
      htmlBody: htmlBuilderService.get()
    });
  }
  catch(ex){
    Logger.log('exception occured: %s', ex.message);
  }
}

function setAds(found, campaign, campaignAds, htmlBuilderService){
  var isSuccess = false;
  
  if(found){
    isSuccess = setAdsStatus(campaignAds, 'ENABLED', htmlBuilderService);
    setKWsTopPageBid(campaign, htmlBuilderService);
  }
  else   
    isSuccess = setAdsStatus(campaignAds, 'PAUSED', htmlBuilderService); 
  
  return isSuccess;
}

function setKWsTopPageBid(campaign, htmlBuilderService) {
  var keywords = campaign.keywords()
  .withCondition('Status = ENABLED')
  .get();
  
  while(keywords.hasNext()){
    var keyword = keywords.next();
    var keywordText = keyword.getText();
    
    var topBid = keyword.getTopOfPageCpc();
    htmlBuilderService.add('<p>keyword {0} > set bid to {1}</p>'.replace('{0}', keywordText).replace('{1}', topBid));

    if(!REPORT_ONLY_MODE && topBid){
      Logger.log('keyword: %s > set bid to %s', keywordText, topBid);
      keyword.bidding().setCpc(topBid);    
    }
  }
}

function getAds(campaign){
  var result = [];
  var ads = campaign.ads()
  .withCondition('Status IN[ENABLED, PAUSED]')
  .withCondition('Type = EXPANDED_TEXT_AD')
  .get();
  
  while(ads.hasNext())
    result.push(ads.next().asType().expandedTextAd());    
  return result;
}

// status: 'ENABLED', 'PAUSED'
function setAdsStatus(ads, status, htmlBuilderService){
  Logger.log('ads status > %s', status);
  htmlBuilderService.add('<p>set ads status to {0}</p>'.replace('{0}', status));
  
  if(status != 'ENABLED' && status != 'PAUSED'){
    Logger.log('unknown status');
    return false;
  }
  
  if(!REPORT_ONLY_MODE) {
    for(i in ads){
      var ad = ads[i];

      if(status == 'ENABLED')
        ad.enable();
      else if(status == 'PAUSED')
        ad.pause();
    } 
  }
  
  return true;
}

// result: [{Title, Href, Description}]
function scanGoogleAds(keywordText, htmlBuilderService){
  try{
    var serachQuery = encodeURI(keywordText);  
    Logger.log('scan for [%s] (%s)', keywordText, serachQuery);
    htmlBuilderService.add('<p>google search was made with keyword {0}</p>'.replace('{0}', keywordText)); 
    
    var searchURL = PROXY_SERVER + 'api/adwordsProxy/google-ads/' + serachQuery;      
    
    var options =   { 
      muteHttpExceptions: true 
    };

    var response = UrlFetchApp.fetch(searchURL, options);  
    var status_code = response.getResponseCode();
    Logger.log('status code %s', status_code);  
    if(status_code != 200) return null;
  
    var content = response.getContentText();      
    var searchResults = JSON.parse(content);
    
    var msg = 'searchResults: organic {0}, paid {1}'.replace('{0}', searchResults.organic.length).replace('{1}', searchResults.paid.length);
    Logger.log(msg);
    htmlBuilderService.add('<p>' + msg + '</p>'); 
    
    return searchResults; // organic, paid
  }
  catch(ex){
    Logger.log('ex: %s', ex); 
    return null;
  }
}

// result: { foundPhrase, phrase, googleAdUrl }
function checkGoogleAds(googleAds, campaignAds, htmlBuilderService){
  
  ///Logger.log(googleAds);
  ///Logger.log(campaignAds.map(function(x) { return x.urls().getFinalUrl().trim('/');}));   
  
  var result = { 
    foundPhrase: false, 
    phrase: null, 
    googleAdUrl: null     
  }

  var msg = 'googleAds: ' + googleAds.map(function(ad){ return ad.href; }).join();
  Logger.log(msg);
  htmlBuilderService.add('<p>' + msg + '</p>'); 
  
  var campaignAdsURLs = campaignAds.map(function(ad){
    return trimEnd(ad.urls().getFinalUrl(), '/');
  });    
  
  // remove the ads of this account (based on their url)
  var filtered = googleAds.filter(function(ad) { 
    return campaignAdsURLs.indexOf(trimEnd(ad.href, '/')) == -1;
  });
    
  msg = 'filtered: ' + filtered.map(function(ad){ return ad.Href; }).join();
  Logger.log(msg);
  htmlBuilderService.add('<p>' + msg + '</p>');
    
  for(i in PHRASES){
    var phrase = PHRASES[i];
    
    for(j in googleAds){
      var googleAd = googleAds[j];
      
      msg = 'phrase [{0}] was checked against ad [{1}]'.replace('{0}', phrase).replace('{1}', googleAds[j].title);
      Logger.log(msg);
      htmlBuilderService.add('<p>' + msg + '</p>');
            
      if(googleAds[j].title.indexOf(phrase) > -1 || googleAds[j].description.indexOf(phrase) > -1){   
        Logger.log('found!');
        result.phrase = phrase;
        result.googleAdUrl = googleAd.href; 
        result.foundPhrase = true;
        return result;
      }
    }
  }
  
  return result;
}

function trimEnd(value, char){  
  if(value.slice(-1) == char)
    return value.slice(0, -1);
  return value;
}

// -----------------------------

var HTMLBuilderService = function(){
  var _html = '';
  
  return {
    add: function(content){
      _html += content;
    },
    get: function(){
      return _html;
    }
  };
}