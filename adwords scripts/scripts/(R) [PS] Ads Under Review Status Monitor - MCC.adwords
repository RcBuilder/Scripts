/*

  this script monitors on ads with UNDER_REVIEW status.  
  if an ad hangs on this status for more than the allowed threshold - a notification will be sent to PropertySuite endpoint. 
  if an ad status has changed, it will be automatically removed from monitoring.  
  
  [process]
  1. loads all ads in the account that are UNDER_REVIEW. 
  2. for each such ad:
     - find it in the monitoring-sheet
     - if not found > add it to the sheet (with NOW timestamp) to be monitored from now on
     - if found, extract the timestampt and calculate the difference in hours > if it over the allowed threshold > send notification
  3. remove the ads from the sheet which NOT found in the account UNDER_REVIEW ad-list (meaning: they have a different status now)
  
*/

var SHEET_NAME = 'Ads_UnderReview_Status_Monitor';
var MAX_TIME_ALLOWED_H = 24;

function main() {
  var sheetService = SpreadsheetLoader.loadSheetService(SHEET_NAME); // load   
  var sheetNotExists = !sheetService;
  if(sheetNotExists){
     sheetService = SpreadsheetLoader.createSheetService(SHEET_NAME); // create  
     sheetService.addRow(['#Account', '#Ad', 'Ad Status', 'Date']); // add header 
  }
  
  var adStatusMonitorService = AdStatusMonitorService(sheetService);
  
  
  /*
    var accounts = MccApp.accounts().get();  
    while(accounts.hasNext())
    {
      var account = accounts.next();

      Logger.log('### account: %s ###', account.getName());  

      MccApp.select(account);
      ProcessAccount(account, adStatusDataService);

      Logger.log('--------------------------');
    }
  */
  
  
  var account = AdsApp.currentAccount();    
  ProcessAccount(account, adStatusMonitorService);  
}

function ProcessAccount(account, adStatusMonitorService){
  var accountId = account.getCustomerId();
  var accountName = account.getName();
        
  // all received ads are UNDER_REVIEW so they either exist in the sheet and need to check their period or don't exist and need to be added with NOW timestamp 
  var underReviewAdsState = GetAccountAdsByStatus('UNDER_REVIEW');
  Logger.log('found %s ads with UNDER REVIEW status', underReviewAdsState.length);
    
  for(i in underReviewAdsState){
    var curr = underReviewAdsState[i];
    Logger.log(curr);
    
    var rowIndex = adStatusMonitorService.getAdRowIndex(curr.id);
    
    // ads do NOT exist in sheet but exist in underReviewAdsState array - new ads with UNDER_REVIEW status
    // insert to sheet
    if(rowIndex == -1) {
      Logger.log('add new ad to monitor');
      adStatusMonitorService.insertNewAd(accountId, curr.id, curr.policyStatus);
      continue;
    }
         
    // ads exist in both sheet and underReviewAdsState array - ads still UNDER_REVIEW
    // check existing status time 
        
    var adRow = adStatusMonitorService.getAd(rowIndex);
    var diff = hoursDiff(new Date(), adRow.date);
    
    Logger.log('diff of %s hours', diff);
    if(diff < MAX_TIME_ALLOWED_H) continue;   
    
    Logger.log('notify PropertySuite!');    
    // TODO ->> Notify PS
    // TODO ->> Make a Copy and Remove the old from monitoring ???! 
  }
  
  // ads exist in the sheet but NOT in underReviewAdsState array - ads were UNDER_REVIEW but not anymroe   
  // remove from sheet
    
  var adRowsInSheet = adStatusMonitorService.getAccountAds(accountId);
  Logger.log('found %s monitored ads (sheet)', adRowsInSheet.length);
  
  var adsAlreadyHandledIds = underReviewAdsState.map(function(x){return x.id});
  
  var adsToRemoveFromSheet = adRowsInSheet.filter(function(x){
    return adsAlreadyHandledIds.indexOf(x.adId) == -1;
  });
  
  
  Logger.log('found %s ads to remove from monitoring (exists as UNDER_REVIEW in sheet but NOT in the account)', adsToRemoveFromSheet.length);
  
  for(i in adsToRemoveFromSheet){
    var curr = adsToRemoveFromSheet[i];
    Logger.log(curr);
    
    var rowIndex = adStatusMonitorService.getAdRowIndex(curr.adId);
    adStatusMonitorService.deleteRow(rowIndex);
  }
}

// AdStatus: APPROVED, APPROVED_LIMITED, ELIGIBLE, UNDER_REVIEW, DISAPPROVED, SITE_SUSPENDED
// result: [{ id, status, policyStatus }]
function GetAccountAdsByStatus(AdStatus) {
  var ads = AdsApp.ads()
  .withCondition('CombinedApprovalStatus IN [' + AdStatus + ']')   
  .withCondition('Status = ENABLED')
  .get();
  
  var result = [];
  
  while(ads.hasNext()){
    var ad = ads.next();
    
    result.push({
      id: ad.getId().toString(),
      status: ad.getApprovalStatus(),
      policyStatus: ad.getPolicyApprovalStatus()      
    });        
  }
  
  return result;
}

function hoursDiff(date1, date2) {
  var diff = date1.getTime() - date2.getTime(); 
  return parseInt(diff / (60*60*1000));
};

// --- SERVICES ------------------------------------------------------------

/* AD-STATUS DATA SERVICE */
var AdStatusMonitorService = function(sheetService) {   
  return {           
    // [{ accountId, adId, adStatus, date }]
    getAccountAds: function(accountId){
      var data = sheetService.findRowsByFilter(accountId, 1) || [];                   
      return data.map(function(row){
        return {
          accountId: row[0],	
          adId: row[1].toString(),	
          adStatus: row[2],	
          date: row[3],	          
        }
      });
    },  
    getAd: function(rowIndex){
      var row = sheetService.getRowByIndex(rowIndex);     
      
      return {
        accountId: row[0],	
        adId: row[1].toString(),	
        adStatus: row[2],	
        date: row[3],	          
      };      
    },  
    getAdRowIndex: function(adId){      
      return parseInt(sheetService.getRowIndex(2, adId));
    },
    setAdStatus: function(rowIndex, value){
      // Approved, Removed, Under Review
      return sheetService.setValue(rowIndex, 3, value);
    },  
    setDate: function(rowIndex, value){     
      return sheetService.setValue(rowIndex, 4, value);
    },     
    insertNewAd: function(accountId, adId, adStatus){
      sheetService.addRow([accountId, adId, adStatus, new Date()]);
    },
    deleteRow: function(rowIndex){      
      sheetService.deleteRow(rowIndex);
    },
  }
}

/* SPREADSHEET SERVICE */
var SpreadSheetService = function(spreadSheet) {
  var _spreadSheet = spreadSheet;
  var _sheets = [];

  (function(){
    var sheetServices = [];
    var temp_sheets = spreadSheet.getSheets();
    for(var i= 0; i < temp_sheets.length; i++)
      _sheets.push(new SheetService(temp_sheets[i]));   
  })();   
  
  return {      
    sheets: _sheets,
	  spreadSheet: _spreadSheet, 
    getName: function(){
      return _spreadSheet.getName();
    },
    getActiveSheet: function(){
      return SheetService(_spreadSheet.getActiveSheet());
    },
    getSheetByName: function(sheetName) { 
      for(var i= 0; i < _sheets.length; i++)
        if(_sheets[i].sheetName == sheetName)
          return _sheets[i];
      return '';
    },
    addNewSheet: function(sheetName){
      var new_sheet = SheetService(_spreadSheet.insertSheet(sheetName));
      _sheets.push(new_sheet)
      return new_sheet;         
    },
    isSheetExists: function(sheetName){
        return this.getSheetByName(sheetName) != '';
    }, 
    getURL: function(){
      return _spreadSheet.getUrl();
    },
	  getId: function(){
      return _spreadSheet.getId();
    },
    setName: function(newName){
      _spreadSheet.rename(newName);  
    }, 
	  setActiveSheetByIndex: function(index){
      _spreadSheet.setActiveSheet(_sheets[index].sheet);
    },
    clearALL: function(){
      for(var i= 0; i < _sheets.length; i++)
        _sheets[i].clear(true, true, true);
    }
  }; 
}

// --------------------

/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getURL: function(){
      return this.spreadSheet.getUrl();
    },
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    }, 
    getRowByIndex:function(rowIndex){       
      var values = this.getRowValues(rowIndex);
      return values[0] || [];
    }, 
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
    getColumnValues: function(startRowPosition, columnPosition){
      // getRange(row, column, numRows, numColumns)
      return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
    }, 
    addRow: function(arrValues){ 
      //_sheet.appendRow(arrValues);
      this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
    },
    addRowAtIndex: function(arrValues, rowPosition){               
      rowPosition = rowPosition || _sheet.getLastRow() + 1;
      var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
      range.setValues([arrValues]);
    },
    addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(url, rowPosition, columnPosition, left, top);
    },   
    addImage: function(blob, rowPosition, columnPosition, left, top){ 
      top = top || 0;
      left = left || 0;

      _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
    },   
    deleteRow: function(rowPosition){
      _sheet.deleteRow(rowPosition);
    }, 
	  copyRange: function(fromRange, toRange){
        Logger.log('copy range from %s to %s', fromRange, toRange);
        var valuesToCopy = this.getValuesByRange(fromRange);      
        this.setRangeValues(toRange, valuesToCopy);           
    },   
    sort: function(columnPosition){
      _sheet.sort(columnPosition);
    },
    hasCharts:  _sheet.getCharts().length > 0,
    findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
      /* 
        get column values filtered by other column

        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */

      var result = [];       
      var rows = _sheet.getDataRange().getValues();

      for(row in rows)
        if(rows[row][filterColumnPosition - 1] == filterValue)
          result.push(rows[row][columnPosition]);
      return result;  
    }, 
    findRowsByFilter: function(filterValue, filterColumnPosition){
      /* 
        get rows by filter

        e.g: findRowsByFilter('100', 1)          
        all rows that the value in A column equals to '100'
        */

      var result = [];       
      var rows = _sheet.getDataRange().getValues();

      for(row in rows)
        if(rows[row][filterColumnPosition - 1] == filterValue)
          result.push(rows[row]);
      return result;  
    },
	  freezeHeader: function(){
      _sheet.setFrozenRows(1);
    },
    merge: function(strRange){
      _sheet.getRange(strRange).merge();
    },  
    clear: function(charts, format, contents){
      charts = charts || false;
      format = format || false;
      contents = contents || true;

      _sheet.clear({ formatOnly: format, contentsOnly: contents });    

      // clear all notes
      _sheet.clearNotes();        

      // clear all charts
      var charts = _sheet.getCharts();
      for (var i in charts)
        _sheet.removeChart(charts[i]);
    },          
    setValue: function(rowPosition, columnPosition, value){ 
      _sheet.getRange(rowPosition, columnPosition).setValue(value);
    },     
    setRangeValue: function(strRange, value){ 
      // e.g: setCurrencyFormat('A1'); // set cell
      _sheet.getRange(strRange).setValue(value);
    },
	  setRangeValues: function(strRange, values){         
      _sheet.getRange(strRange).setValues(values);
    },
    setColumnWidth: function(columnPosition, width){
      _sheet.setColumnWidth(columnPosition, width);
    },  
    setRowHeight: function(rowPosition, height){
      _sheet.setRowHeight(rowPosition, height);
    },  
    setName: function(newName){
      _sheet.setName(newName);
    }, 
    setNote: function(strRange, note){
      var range = _sheet.getRange(strRange);
      range.setNote(note);
    },         
    setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
      var range = _sheet.getRange(strRange);
      if(backgroundColor)
        range.setBackground(backgroundColor);
      if(foreColor)
        range.setFontColor(foreColor);
      if(fontSize)
        range.setFontSize(fontSize);
      if(hAlign)
        range.setHorizontalAlignment(hAlign);
      if(vAlign)
        range.setVerticalAlignment(vAlign)
      if(fontWeight)
        range.setFontWeight(fontWeight);
      if(border)
        range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
    }, 
    setNumberFormat: function(strRange){
      setFormat(strRange, '0');       
    },
    setDecimalFormat: function(strRange){
      setFormat(strRange, '0.00');
    },
    setCurrencyFormat: function(strRange){
      setFormat(strRange, '$0.00');
    },
    setPercentageFormat: function(strRange){
      // e.g: setPercentageFormat('A1'); // set cell
      // e.g: setPercentageFormat('A1:A10'); // set range

      setFormat(strRange, '0.00%');
    },
    setWeekFormat: function(strRange){
      setFormat(strRange, 'MMM dd');
    },
    setMonthFormat: function(strRange){
      setFormat(strRange, 'MMM');
    },
    setCellSumFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set SUM value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=SUM(' + strRange + ')');
    },
    setCellAvgFormula: function(strRange, strCell){
      // e.g: setCellSumFormula('A1:A10', 'B1'); 
      // set AVG value of cells A1 to A10 to cell B1

      var cell = _sheet.getRange(strCell);
      cell.setFormula('=AVERAGE(' + strRange + ')');
    },
    setCellFormula: function(formula, strCell){
      // e.g: setCellFormula('=B3-C3', 'D3');         
      // e.g: setCellFormula('=$B3-$C3', 'D3:D9');   

      var cell = _sheet.getRange(strCell);
      cell.setFormula(formula);
    }        
  }; 
}

// --------------------

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSpreadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}