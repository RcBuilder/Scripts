/*
    About
    -----
	this script creates a fully functioning campaign (adgroup, ad, keywords etc.) based on a feed (csv) 
    
    feed Columns
    ------------
    see 'DataReaderService > getProducts'    
            
    process steps
    -------------
	  STEP 1: load campaign by Id
    STEP 2: create adgroup
    STEP 3: create a text ad
    STEP 4: create keywords (positive)
    STEP 5: create siteLinks
*/

var FEED_URI ='https://get.cpexp.de/DkA5_VA2HutKvIGYdClonJgaHW_xuUkwrxSxj4W6Gn8MRDhACUeZEHLbt_KR0B7P/dosenbachworkaroundsch_googleshoppingch.csv';
var TEST_MODE = false;
var CAMPAIGN_ID = '8310371890'; // 1622936850
var BrandsToRemove = [];

///[Obsolete] moved to an auto process using config sheet
///var ProductsRange = '0-13000'; 

var CONFIG_SHEET_NAME = 'MasterFeedShoppingConfig_Dosenbach';
var RANGE_INCREMENT_VALUE = 20;
var RANGE_MIN_VALUE = 1;
var RANGE_MAX_VALUE = 1000;

var counter_success = 0;
var counter_failures = 0;

/*
	  var csvService = CSVService('\t');
    var rows = csvService.getRows().slice(1); 
    Logger.log(rows[0][0]);
    return;
    ---
    Logger.log(CleanUrlPath('abc..d.ef,d,///s,./ww'));
    ---
    Logger.log(adManagerService.countWithoutKeywordInsertion('{KeyWord:Top Preise}'));
    Logger.log(adManagerService.countWithoutKeywordInsertion('Top Preise'));
    Logger.log(adManagerService.countWithoutKeywordInsertion('KeyWord:Top Preise'));
    Logger.log(adManagerService.countWithoutKeywordInsertion('KeyWord:Top Preise}'));
    Logger.log(adManagerService.countWithoutKeywordInsertion('{KeyWord:Top Preise'));
    return;    
*/

function main() {
  if(TEST_MODE)
    Logger.log('[TEST MODE]');

  var adManagerService = AdManagerService();   
  /// Logger.log(adManagerService.countWithoutKeywordInsertion('Für nur CHF {param1:1234 statt CHF 4567}'))
  ///return;
  
  var products = LoadProducts();
  Logger.log('%s products found', products.length); 
  
  for(i in products)     
  {
    counter_success++;
    ///Logger.log('---------------------');
    ProcessProduct(products[i], adManagerService);          
  }
   
  Logger.log('success: [%s], failures: [%s]', counter_success, counter_failures);
}

function LoadProducts(){
  if(TEST_MODE){
  	var dataReaderService = new DataReaderServiceMock();
    return dataReaderService.getProducts();
  }
  
  // read products from feed
  var csvService = CSVService('|');  
  var dataReaderService = DataReaderService(csvService);      
  Logger.log('rowsCount: %s', csvService.count());
    
  var products = dataReaderService.getProducts();
  
  // ---
  
  // get next bulk (config based)
  var configSheet = SpreadsheetLoader.loadSheetService(CONFIG_SHEET_NAME); // load     
  if(!configSheet)
    configSheet = SpreadsheetLoader.createSheetService(CONFIG_SHEET_NAME); // create
  
  var ProductsRange = configSheet.getValueByRange('A1');
  var firstRange = RANGE_MIN_VALUE.toString().concat(' -> ', RANGE_MIN_VALUE + RANGE_INCREMENT_VALUE);
  ProductsRange = ProductsRange || firstRange;
  
  var range = ProductsRange.split(' -> ');
  var from = parseInt(range[0]);
  var to = parseInt(range[1]); 
    
  var isLastRange = to > RANGE_MAX_VALUE; // last range!
  
  if(isLastRange) // to prevent 'out of bounds' exception 
    to = Math.min(products.length, RANGE_MAX_VALUE);  
  
  Logger.log('loading range: %s > %s', from, to);
  products = products.slice(from, to);
  
  var nextProductsRange = to.toString() + ' -> ' + (to + RANGE_INCREMENT_VALUE).toString();
  if(isLastRange) // last range! reset 
    nextProductsRange = firstRange;
  
  configSheet.setRangeValue('A1', nextProductsRange);
  Logger.log('new range: %s', nextProductsRange);

  return products;
}

function ProcessProduct(product, adManagerService){
  try{
    if(!product){
      ///Logger.log('NULL row -> skip');
      return;
    }

    ///Logger.log(product);
    product.existsByURL = function(adDestination){
      for(i in this.ads){        
          if(adDestination == this.ads[i].url.path)
            return true;
      }
      return false;
    }   
    
    Logger.log('campaign: #%s, adGroup: %s, productPrices: %s', product.campaignId, product.adGroupName, product.price);       
	  ///Logger.log(product.description.line2); // TO DELETE
    
    // STEP 1: load campaign by Id
  	var campaign = null;
  	try{
    	campaign = AdWordsApp.campaigns().withIds([product.campaignId]).get().next();
    }
  	catch(ex){ 
    	Logger.log('campaign %s does not exists!', product.campaignId);
    }
  
    if(!campaign){
      ///Logger.log('campaign was NOT found -> skip');
      return;
    }

  	var adGroupExists = adManagerService.checkIfAdGroupExistsByName(campaign, product.adGroupName);
  	if(!adGroupExists)	  
    	CreateProduct(adManagerService, campaign, product);
  	else 
    	UpdateProduct(adManagerService, campaign, product);
  }
  catch(e){    
  	Logger.log('[ERROR] ProcessProduct: %s', e.message);
    counter_failures++;
  }
}

function CreateProduct(adManagerService, campaign, product){
  Logger.log('CREATE PRODUCT');
  
  // STEP 2: create adgroup
  var adGroup = adManagerService.createAdGroup(campaign, product.adGroupName, product.defaultBid);
  if(!adGroup){
    ///Logger.log('exception: create adGroup');
    return;
  }             
  ///Logger.log('adGroup created successfully');

  // STEP 3: create text ads 
  // { adGroup, header1, header2, header3, description1, description2, destinationURL, pathURL1, pathURL2 }
  
  var failures = CreateAds(adManagerService, adGroup, product);  
  if(failures == product.ads.length) // all ads failed
    return;
  
  Logger.log(product.keywords);

  // STEP 4: create keywords (positive)    	  	
  var keywordsClear = product.keywords.map(function(x) { 
    x =  adManagerService.clearKeyword(x);
    for(i in BrandsToRemove)
      x = x.split(BrandsToRemove[i]).join('');
    return x;
  });  	  	      
  
  adManagerService.createKeywords(adGroup, keywordsClear); 
  ///Logger.log('keywords created successfully');

  // STEP 5: create siteLinks
  var sitelinkTitle = product.sitelink.title;
  if(sitelinkTitle.length > 25) sitelinkTitle = '{KeyWord:Top Produkte}'; // default   
  var sitelink = adManagerService.createSiteLink(sitelinkTitle, product.sitelink.url, product.sitelink.text1, product.sitelink.text2);  
  adGroup.addSitelink(sitelink); 
  ///Logger.log('sitelink created successfully');  
}

function UpdateProduct(adManagerService, campaign, product){  
  Logger.log('UPDATE PRODUCT');
  
  var adGroup = adManagerService.getAdGroupByName(campaign, product.adGroupName);
  
  // update price param
  var keywords = adGroup.keywords().get();
  while(keywords.hasNext())
  {        
    var keyword = keywords.next();
    var params = adManagerService.getKeywordParams(keyword);    

    adManagerService.setKeywordParams(keyword, product.price.param1);        
    Logger.log('%s > %s', params.length < 1 ? 'NULL' : params[0].text, product.price.param1);
    
    if(product.price.param2 != null){
      adManagerService.setKeywordParams(keyword, null, product.price.param2);
      Logger.log('%s > %s', params.length < 2 ? 'NULL' : params[1].text, product.price.param2);
    }
  }
  	
  // update ad url (if needed)
  var needTorRecreateAds = false;
  var ads = adManagerService.getAdsByAdgroup(adGroup);  
  for(i in ads){
    var ad = ads[i];
    var adDestination = ad.urls().getFinalUrl();
    
    ///Logger.log(adDestination);
    ///Logger.log(product.url.path);
          
    if(product.existsByURL(adDestination)) continue;           
    needTorRecreateAds = true;
    break;
  }
  
  if(needTorRecreateAds){
    
    Logger.log('re-create ads');      
    
    for(i in ads)
    	ads[i].remove();
    CreateAds(adManagerService, adGroup, product);  
    
  	///var failures = CreateAds(adManagerService, adGroup, product);  
  	///if(failures == product.ads.length) // all ads failed    	
  }
}

function CreateAds(adManagerService, adGroup, product){
  var failures = 0;
  for(i in product.ads){
    var textAd = CreateAd(adManagerService, adGroup, product.ads[i], product.price);

    if(!textAd){
      Logger.log('exception: create ad');
      /// Logger.log(product.ads[i]);
      failures++;
      continue;
    }
    Logger.log('ad created successfully');
  }   
  return failures;
}


function CreateAd(adManagerService, adGroup, adData, price){  	
  	if(adManagerService.countWithoutKeywordInsertion(adData.header.line1) > 30) 
    	adData.header.line1 = '{KeyWord:Top Preise}'; // default  
  
  	if(adManagerService.countWithoutKeywordInsertion(adData.url.segment1) > 15) 
    	adData.url.segment1 = '{KeyWord:Top Preise}'; // default  
  
	return adManagerService.createAd(
    adGroup, 
    adManagerService.clearSpecialCharacters(adData.header.line1), 
    price.priceLine, 
    adManagerService.clearSpecialCharacters(adData.header.line3), 
    adManagerService.clearSpecialCharacters(adData.description.line1), 
    adManagerService.clearSpecialCharacters(adData.description.line2), 
    adData.url.path, 
    CleanUrlPath(adData.url.segment1),
    CleanUrlPath(adData.url.segment2)
  );
}

function CleanUrlPath(value){
  return value
    .split('.').join('')
    .split(',').join('')
    .split('/').join('');  
}

// ----------------------------------------------

function DataReaderServiceMock(){
	this.getProducts = function(){
      	var randId = Math.ceil(Math.random() * 1000);
    	var result = [];
    	result.push({ 
            campaignId: CAMPAIGN_ID, 
            adGroupName: 'demo' + randId, 
            defaultBid: 0.1, 
            ads: [
              {
            	header: {
                  line1: 'Lorem Ipsum 1',
                  line2: 'What is Lorem Ipsum?',
                  line3: 'dummy text'
                },
                description: {
                  line1: 'a simply dummy text', 
                  line2: 'since the 1500s'
                }, 
                url: { 
                  path: 'http://example.com', 
                  segment1: 'page', 
                  segment2: 'sub-page' 
                }
              },
              {
            	header: {
                  line1: 'Lorem Ipsum 2',
                  line2: 'What is Lorem Ipsum?',
                  line3: 'dummy text'
                },
                description: {
                  line1: 'a simply dummy text', 
                  line2: 'since the 1500s'
                }, 
                url: { 
                  path: 'http://example.com', 
                  segment1: 'page', 
                  segment2: 'sub-page' 
                }
              }
            ],             
            sitelink: { 
              title: 'Lorem Ipsum', 
              url: 'http://example.com',
              text1 : 'Top Auswahl - Top Preise.',	
              text2 : 'Top Aktionen - Top Service.'
            },
          	keywords: ['keyword1', 'keyword2', 'keyword3', 'keyword4', 'keyword5 Fust abc'], 
            price: { param1: 300, param2: null, priceLine: 'Für nur CHF ' + '{param1:300}' },
            stock: 30
          });
      
      return result;      
    }
}

// ----------------------------------------------

/* DATA READER SERVICE */
var DataReaderService = function(csvService) { 
  
  (function(){        
    csvService.load(FEED_URI);  
  })();
  
  // { param1, param2, priceLine }
  function getPriceLine(price, salePrice){
    price = (price || '').replace('CHF', '').trim();
    salePrice = (salePrice || '').replace('CHF', '').trim();
    var hasSalePrice = salePrice != '';

    // have both price and sale_price -> 'CHF <sale_price> statt CHF <price>'
    // doesn't have sale_price -> 'CHF <price>'
    // if length of <price> is 8 digits and up (e.g: 45678.90) -> 'CHF <sale_price> statt <price>'
    var priceLine = '';
    if(hasSalePrice)
    {          
      priceLine = 'CHF ' + '{param2:' + salePrice + '}' + ' statt CHF ' + '{param1:' + price + '}';   
      if(priceLine.length > 30) // to long > remove one CHF
        priceLine = priceLine.replace('statt CHF', 'statt'); 
      if(priceLine.length > 30) // still no enough > remove second CHF
        priceLine = priceLine.replace('CHF ', ''); 
    }
    else 
      priceLine = 'Für nur CHF ' + '{param1:' + price + '}'; 
    
    return { 
      param1: price, 
      param2: salePrice, 
      priceLine: priceLine 
    };
  }
  
  return {  
     /*
      { 
          campaignId: string, 
          adGroupName, 
          defaultBid,           
          ads: [
          { 
          	header: {
              line1,
              line2,
              line3
            }
            description: {
              line1, 
              line2
            }, 
            url: { 
              path, 
              segment1, 
              segment2 
            }            
          }],
          sitelink: { 
          	title, 
            url,
            text1,
            text2
          },
          keywords: string[], 
          price,
          stock
      }
    */    
    getProducts: function(){
      var result = [];
      
      /*
      Logger.log(getPriceLine('12.99'));                  // Für nur CHF 12.99
      Logger.log(getPriceLine('12.99', '34.99'));         // CHF 34.99 statt CHF 12.99
      Logger.log(getPriceLine('123.99', '345.99'));       // CHF 345.99 statt CHF 123.99
      Logger.log(getPriceLine('1234.99', '4567.99'));     // CHF 4567.99 statt CHF 1234.99
      Logger.log(getPriceLine('12345.99', '45678.99'));   // CHF 45678.99 statt 12345.99
      Logger.log(getPriceLine('123456.99', '456789.99')); // CHF 456789.99 statt 123456.99
      */
      
      var map = {};
      map['id'] = this.getColumnIndex('id');      
      map['title'] = this.getColumnIndex('title');
      map['sale_price'] = this.getColumnIndex('sale_price');
      map['price'] = this.getColumnIndex('price');
      map['brand'] = this.getColumnIndex('brand');
      map['category'] = this.getColumnIndex('category');            
      map['link'] = this.getColumnIndex('link');      
      map['custom_label_1'] = this.getColumnIndex('custom_label_1');      
      map['gender'] = this.getColumnIndex('gender');           
      map['color'] = this.getColumnIndex('color');      
      map['size'] = this.getColumnIndex('size'); 
      map['mpn'] = this.getColumnIndex('mpn'); 
      
      // slice(1) - remove the header row;
      var rows = csvService.getRows().slice(1);      
      
      ///Logger.log('map %s', rows[1][map['price']]);
      ///return;      
      
      for(i in rows){              
        var priceLine = getPriceLine(rows[i][map['price']], rows[i][map['sale_price']]);      
        
        var gender = rows[i][map['gender']];
        gender = this.capitalize(gender);        
        
        var brand = rows[i][map['brand']];
        brand = this.capitalize(brand);       
        
      	result.push({ 
          campaignId: CAMPAIGN_ID, 
          adGroupName: rows[i][map['id']] + ' – ' + rows[i][map['title']], 
          defaultBid: 0.1, 
          ads: [
          	{ /* AD-1 */
              header: {
                line1: '{KeyWord:Grosse Auswahl – kleine Preise}', 
                line2: '',
                line3: 'Jetzt bei Dosenbach kaufen'
              },
              description: {
                line1: rows[i][map['title']], 
                line2: 'Grosse Auswahl bei Dosenbach.ch - Günstige Preise – Rasche Lieferung!'
              }, 
              url: { 
                path: rows[i][map['link']].replace('http://', 'https://'),  
                segment1: '{KeyWord:Top_Preise}',
                segment2: rows[i][map['color']], 
              }
            },
            { /* AD-2 */
              header: {
                line1: '{KeyWord:Grosse Auswahl – kleine Preise}', 
                line2: '',
                line3: 'Sensationelle Preise'
              },
              description: {
                line1: rows[i][map['title']], 
                line2: 'Günstige Preise – Versandkostenfrei – Schnelle Lieferung!'
              }, 
              url: { 
                path: rows[i][map['link']].replace('http://', 'https://'),  
                segment1: '{KeyWord:Top_Preise}',
                segment2: 'gender', 
              }
            },
            { /* AD-3 */
              header: {
                line1: '{KeyWord:Versandkostenfrei}', 
                line2: '',
                line3: 'Jetzt bei Dosenbach.ch'
              },
              description: {
                line1: rows[i][map['title']], 
                line2: 'Riesen Auswahl bei Dosenbach.ch – Rasche und kostenlose Lieferung – Top Preise!'
              }, 
              url: { 
                path: rows[i][map['link']].replace('http://', 'https://'),  
                segment1: '{KeyWord:Top_Preise}',
                segment2: 'Grösse_' + rows[i][map['size']], 
              }
            }         
          ],           
          sitelink: { 
              title: rows[i][map['title']],  
              url: rows[i][map['link']].replace('http://', 'https://'),  
              text1 : 'Top Auswahl - Top Preise.',	
              text2 : 'Top Aktionen - Top Service.'            
          },
          keywords: [            
            rows[i][map['title']],
          ], 
          price: priceLine, 
          stock: rows[i][map['availability']] 
      	});
      }
      
      // add additional KWs
      var additionalKWs = ['günstig', 'kaufen', 'online', 'von Dosenbach', 'Dosenbach'];
      
      for(k in result)   
      {
        var product = result[k];
        for(i in product.keywords)
        	for(j in additionalKWs)
      			product.keywords.push(product.keywords[i] + ' ' + additionalKWs[j]);
      }
      
      return result;
    },
    getColumnIndex: function(columnName){
      var columns = csvService.getHeader();
      return parseInt(columns.indexOf(columnName));
    },
    capitalize: function(value) {
      if (!value || typeof(value) != 'string') return '';
      return value.charAt(0).toUpperCase() + value.slice(1);
    }
  }
}

// ---------------------------------------------- 

/* CSV SERVICE */
var CSVService = function(delimiter) { 
  var _document = [];
  var _delimiter = delimiter || ',';  
  var _charset = 'UTF-8';

  function sleep(milliseconds) {
    var start = new Date().getTime();
    while (new Date().getTime() < start + milliseconds);
  }
  
  /*
    [sample] using get-parse:
    var content = csvService.get(FEED_URI);
    content = content.replace(/"/g, '');
    csvService.parse(content);
  */
  function _get(uri){
    var response = UrlFetchApp.fetch(uri);
    var status_code = response.getResponseCode();

    if(status_code != 200) // 200 = OK
    {
      Logger.log('status code %s', status_code);
      return;
    }

    Logger.log('%s was loaded', uri);            

    return response.getContentText(_charset);   
  }
  
  function _parse(content){
    _document = Utilities.parseCsv(content, _delimiter);    
  }
  
  function _load(uriToLoad, replaceChars){    
    var content = _get(uriToLoad);    
    _parse(content);        
  }
  
  function _loadUsingBulks(uriToLoad, bulkVolume, fromPH, toPH){      
    bulkVolume = bulkVolume || 1000;   
    fromPH = fromPH || '{from}';
    toPH = toPH || '{to}';
    
    var hasData = false;
    var startIndex = 0;
          
    do{
      var uri = uriToLoad        
      .replace(fromPH, startIndex)
      .replace(toPH, startIndex + bulkVolume)    

      try{
        var content = _get(uri);   
        hasData = content && content.length > 0;
        if(hasData)
          _document = _document.concat(Utilities.parseCsv(content, _delimiter));
      }
      catch(e){ Logger.log(e);}

      startIndex += bulkVolume;
    } while(hasData)       
   }
  
  // delay - sleep time in milliseconds
  // e.g: 1000 * 120 for 2 minutes
  
  // proxyInit for cases of fire-wait-get content! usually to overcome the 1 min timeout of the 'UrlFetchApp' built-in service
  // reference: '(R) MasterFeed Shopping - Campaign Manager (by csv feed) - Ver3 (using proxy)'
  // proxyInitTemplate place-holders  
  // {base64URL} {seperator}
  // null for no initialization
  // e.g: http://lagoja-services.rcb.co.il/api/adwordsProxy/feed/{base64URL}/{seperator}/fire
  
  // proxyTemplate place-holders
  // {base64URL} {seperator} {from} {to}
  // e.g: http://lagoja-services.rcb.co.il/api/adwordsProxy/feed/{base64URL}/{seperator}/{from}/{to}
   
  /* 
  function _loadUsingProxy(uriToLoad, proxyInitTemplate, proxyTemplate, bulkVolume, delay){
      // TODO
      var fileEncoded = 'aHR0cDovL3RyYW5zcG9ydC5wcm9kdWN0c3VwLmlvLzQ3N2VhMGM3NTQwZjM0MGNmNjE0L2NoYW5uZWwvNTI2MS9tYXN0ZXJmZWVkLXNob3BwaW5nLWRlLmNzdg==';  // atob(file)
    
      var bulkVolume = bulkVolume || 1000;   
      var hasData = false;
      var startIndex = 0;
    
      if(proxyInitTemplate){
        var initUri = proxyInitTemplate.replace('{base64URL}', fileEncoded).replace('{seperator}', escape('|'));
        _get(initUri);
        sleep(delay);        
      }
    
      do{
        var uri = proxyTemplate.replace('{base64URL}', fileEncoded)
        .replace('{seperator}', escape('|'))
        .replace('{from}', startIndex)
        .replace('{to}', startIndex + bulkVolume)    

        try{
          var content = _get(uri);   
          hasData = content && content.length > 0;
          if(hasData)
            _document = _document.concat(Utilities.parseCsv(content, delimiter));
        }
        catch(e){ Logger.log(e);}

        startIndex += bulkVolume;
      }
      while(hasData)       
   }
   */
  
   return { 
     get: _get,
     parse: _parse,
     document: _document,
     load: _load,
     ///loadUsingProxy: _loadUsingProxy,
     loadUsingBulks: _loadUsingBulks,
     count: function(){
       if(!_document) 
         return 0;
       
       if(_document.length)
         return _document.length;         
       return 1;
     },
     getRows: function(){
       var rows = [];
       Logger.log(_document[1]);
       for(i in _document){
        var row = _document[i];
        if(row[0].length == 1) 
          continue;      
        rows.push(row);
      }
      return rows;
     },
     getHeader: function(){
       return _document[0];
     }
   }; 
}

// ----------------------------------------------

/* SHEET SERVICE */
var SheetService = function(sheet) { 
  var _sheet = sheet;
  
  // e.g: setFormat('A1'); // set cell
  // e.g: setFormat('A1:A10'); // set range
  var setFormat = function(strRange, format){
    var range = _sheet.getRange(strRange);
    range.setNumberFormat(format);  
  }
  
  var getBorderStyle = function(value){
    value = value.toLowerCase();
    switch(value){
      case 'dotted': return SpreadsheetApp.BorderStyle.DOTTED;
      case 'dashed': return SpreadsheetApp.BorderStyle.DASHED;
      default:
      case 'solid': return SpreadsheetApp.BorderStyle.SOLID;
    }
  }
  
  return {   
    sheet: _sheet,
    hasSheet: _sheet != null,
    sheetName: _sheet ? _sheet.getName() : '',
    spreadSheet: _sheet.getParent(),
    getLastRowIndex: function() { 
      return _sheet.getLastRow();  
    }, 
    getLastColumnIndex: function(){ 
      return _sheet.getLastColumn();
    }, 
    getValue: function(rowPosition, columnPosition){ 
      return _sheet.getRange(rowPosition, columnPosition).getValue();
    }, 
    getValueByRange: function(strRange){ /* A3, B1 etc.*/       
      return _sheet.getRange(strRange).getValue();
    },  
    getValues: function(){
      return _sheet.getDataRange().getValues();
    },
    getValuesByRange: function(strRange){ /* A3:B3, C1:C5 etc.*/       
      return _sheet.getRange(strRange).getValues();
    }, 
    getRowValues:function(rowPosition){       
      return _sheet.getRange(rowPosition, 1, 1, this.getLastColumnIndex()).getValues();
    },      
    getRowIndex: function(columnPosition, key){
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnPosition - 1] == key)
          return parseInt(row) + 1;
      return -1;  
    },
    getRowIndexBy2Columns: function(columnAPosition, keyA, columnBPosition, keyB){ 
      var rows = _sheet.getDataRange().getValues();
      
      // row index is 0 based but range is 1 based
      for(row in rows)
        if(rows[row][columnAPosition - 1] == keyA && rows[row][columnBPosition - 1] == keyB)
          return parseInt(row) + 1;
      return -1;  
    },
      getColumnValues: function(startRowPosition, columnPosition){
        // getRange(row, column, numRows, numColumns)
        return _sheet.getRange(startRowPosition, columnPosition, _sheet.getLastRow() - 1, 1).getValues();
      }, 
      addRow: function(arrValues){ 
        //_sheet.appendRow(arrValues);
        this.addRowAtIndex(arrValues, _sheet.getLastRow() + 1);
      },
      addRowAtIndex: function(arrValues, rowPosition){               
        rowPosition = rowPosition || _sheet.getLastRow() + 1;
        var range = _sheet.getRange(rowPosition, 1, 1, arrValues.length);
        range.setValues([arrValues]);
      },
      addImageFromURL: function(url, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(url, rowPosition, columnPosition, left, top);
      },   
      addImage: function(blob, rowPosition, columnPosition, left, top){ 
        top = top || 0;
        left = left || 0;
        
        _sheet.insertImage(blob, rowPosition, columnPosition, left, top);
      },   
      deleteRow: function(rowPosition){
        _sheet.deleteRow(rowPosition);
      }, 
	  copyRange: function(fromRange, toRange){
        Logger.log('copy range from %s to %s', fromRange, toRange);
        var valuesToCopy = this.getValuesByRange(fromRange);      
        this.setRangeValues(toRange, valuesToCopy);           
      },   
      sort: function(columnPosition){
        _sheet.sort(columnPosition);
      },
      hasCharts:  _sheet.getCharts().length > 0,
      findColumnValuesByFilter: function(columnPosition, filterValue, filterColumnPosition){
        /* 
        get column values filtered by other column
        
        e.g: findColumnValuesByFilter(2, '100', 1)          
        all B column values that the value in A column equals to '100'
        */
        
        var result = [];       
        var rows = _sheet.getDataRange().getValues();
        
        for(row in rows)
          if(rows[row][filterColumnPosition - 1] == filterValue)
            result.push(rows[row][columnPosition]);
        return result;  
      }, 
	  freezeHeader: function(){
          _sheet.setFrozenRows(1);
      },
      merge: function(strRange){
        _sheet.getRange(strRange).merge();
      },  
      clear: function(charts, format, contents){
        charts = charts || false;
        format = format || false;
        contents = contents || true;
        
        _sheet.clear({ formatOnly: format, contentsOnly: contents });    
        
        // clear all notes
        _sheet.clearNotes();        
        
        // clear all charts
        var charts = _sheet.getCharts();
        for (var i in charts)
          _sheet.removeChart(charts[i]);
      },          
      setValue: function(rowPosition, columnPosition, value){ 
        _sheet.getRange(rowPosition, columnPosition).setValue(value);
      },     
      setRangeValue: function(strRange, value){ 
        // e.g: setCurrencyFormat('A1'); // set cell
        _sheet.getRange(strRange).setValue(value);
      },
	  setRangeValues: function(strRange, values){         
        _sheet.getRange(strRange).setValues(values);
      },
      setColumnWidth: function(columnPosition, width){
        _sheet.setColumnWidth(columnPosition, width);
      },  
      setRowHeight: function(rowPosition, height){
        _sheet.setRowHeight(rowPosition, height);
      },  
      setName: function(newName){
        _sheet.setName(newName);
      }, 
      setNote: function(strRange, note){
         var range = _sheet.getRange(strRange);
        range.setNote(note);
      },         
      setDataUI: function(strRange, backgroundColor, foreColor, fontSize, hAlign, fontWeight, border /* { color, style } */, vAlign){
        var range = _sheet.getRange(strRange);
        if(backgroundColor)
          range.setBackground(backgroundColor);
        if(foreColor)
          range.setFontColor(foreColor);
        if(fontSize)
          range.setFontSize(fontSize);
        if(hAlign)
          range.setHorizontalAlignment(hAlign);
        if(vAlign)
          range.setVerticalAlignment(vAlign)
          if(fontWeight)
            range.setFontWeight(fontWeight);
        if(border)
          range.setBorder(true, true, true, true, true, true, border.color, getBorderStyle(border.style))
      }, 
      setNumberFormat: function(strRange){
        setFormat(strRange, '0');       
      },
      setDecimalFormat: function(strRange){
        setFormat(strRange, '0.00');
      },
      setCurrencyFormat: function(strRange){
        setFormat(strRange, '$0.00');
      },
      setPercentageFormat: function(strRange){
        // e.g: setPercentageFormat('A1'); // set cell
        // e.g: setPercentageFormat('A1:A10'); // set range
        
        setFormat(strRange, '0.00%');
      },
      setWeekFormat: function(strRange){
        setFormat(strRange, 'MMM dd');
      },
      setMonthFormat: function(strRange){
        setFormat(strRange, 'MMM');
      },
      setCellSumFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set SUM value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=SUM(' + strRange + ')');
      },
      setCellAvgFormula: function(strRange, strCell){
        // e.g: setCellSumFormula('A1:A10', 'B1'); 
        // set AVG value of cells A1 to A10 to cell B1
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula('=AVERAGE(' + strRange + ')');
      },
      setCellFormula: function(formula, strCell){
        // e.g: setCellFormula('=B3-C3', 'D3');         
		// e.g: setCellFormula('=$B3-$C3', 'D3:D9');   
        
        var cell = _sheet.getRange(strCell);
        cell.setFormula(formula);
      }        
  }; 
}

// ----------------------------------------------

/* SPREADSHEET LOADER */
var SpreadsheetLoader = {
  
  // ---  spreadSheets
  
  createSpreadSheet: function(spreadSheetName, folderName){
    Logger.log('CREATING %s ... ', spreadSheetName);
    var spreadsheet = SpreadsheetApp.create(spreadSheetName); // create new file         
    
    if(!folderName || folderName == '') 
      return spreadsheet; // folder not specified  - return spreadsheet
     
    // save in specific folder 
    
    for(var i=0;i<500000; i++); // delay

    var root_folder = DriveApp.getRootFolder();     
    var folder_iterator = root_folder.getFoldersByName(folderName);
    var folderExists = folder_iterator.hasNext();
    
    if(!folderExists) // no such folder - return the spreadsheet
    {
      Logger.log('%s NOT EXISTS!', folderName);
      return spreadsheet;
    }
    
    var folder = root_folder.getFoldersByName(folderName).next();
    var file = root_folder.getFilesByName(spreadSheetName).next();
    folder.addFile(file);
    root_folder.removeFile(file);

    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheet: function(spreadSheetName, folderName){
	if(spreadSheetName == '') {
      Logger.log('EMPTY NAME!');
      return null;
    }

    var root_folder = DriveApp.getRootFolder();
    var folder = root_folder; // default 
    if(folderName && folderName != '')
    {
      var folder_iterator = root_folder.getFoldersByName(folderName);
      var folderExists = folder_iterator.hasNext();
      
      if(folderExists)
      {
        Logger.log('FOLDER %s', folderName);
        folder = root_folder.getFoldersByName(folderName).next();
      }
    }
    
    var file_iterator = folder.getFilesByName(spreadSheetName);
    var fileExists = file_iterator.hasNext();
    
    if(!fileExists){
      Logger.log('%s NOT EXISTS!', spreadSheetName);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetName);
    var file = file_iterator.next();
    return SpreadsheetApp.openById(file.getId());    
  }, 
  loadSpreadSheetById: function(spreadSheetId){
    if(spreadSheetId == '') {
      Logger.log('EMPTY ID!');
      return null;
    }
    
    var file = DriveApp.getFileById(spreadSheetId);
    if(!file || file.isTrashed()){
      Logger.log('%s NOT EXISTS!', spreadSheetId);
      return null;
    }
    
    // file exists - load it
    Logger.log('LOADING %s ... ', spreadSheetId);
    return SpreadsheetApp.openById(file.getId());    
  },  
  loadSpreadSheetByURL: function(spreadSheetUrl){
    if(spreadSheetUrl == '') {
      Logger.log('EMPTY URL!');
      return null;
    }
    
    Logger.log('LOADING %s ... ', spreadSheetUrl);
    var spreadSheet = SpreadsheetApp.openByUrl(spreadSheetUrl);    
    
    if(!spreadSheet){
      Logger.log('%s NOT EXISTS!', spreadSheetUrl);
      return null;
    }
    
    return spreadSheet;
  }, 
  
  // ---  sheet Services
  
  loadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  }, 
  loadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  loadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },  
  createSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet.getActiveSheet());
  },
  
  // ---  spreadSheet Services
  
  loadSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.loadSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },
  loadSpreadSheetServiceById: function(spreadSheetId){
    var spreadsheet = this.loadSpreadSheetById(spreadSheetId);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  },  
  loadSpreadSheetServiceByURL: function(spreadSheetUrl){
    var spreadsheet = this.loadSpreadSheetByURL(spreadSheetUrl);
    if(!spreadsheet) return null;
    return SheetService(spreadsheet);
  },  
  createSpreadSheetService: function(spreadSheetName, folderName){
    var spreadsheet = this.createSpreadSheet(spreadSheetName, folderName);
    if(!spreadsheet) return null;
    return SpreadSheetService(spreadsheet);
  }
}

// ----------------------------------------------

// AD MANAGER SERVICE
var AdManagerService = function() { 
  return{
    createAdGroup: function(campaign, adGroupName, defaultBid){
      var adGroupBuilder = campaign.newAdGroupBuilder();
      var operation = adGroupBuilder
      .withName(adGroupName)
      .withCpc(defaultBid)
      // .withStatus('ENABLED')
      .build();
      
      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },
    // createAd: function(adGroup, header1, header2, description, destinationURL, pathURL1, pathURL2)
    createAd: function(adGroup, header1, header2, header3, description1, description2, destinationURL, pathURL1, pathURL2){     
      if(this.countWithoutKeywordInsertion(header1) > 30)
        header1 = header1.substr(0, 29);
      if(this.countWithoutKeywordInsertion(header2) > 30)
        header2 = header2.substr(0, 29);
      if(this.countWithoutKeywordInsertion(description1) > 90)
        description1 = description1.substr(0, 89);
     
      var builder = adGroup.newAd().expandedTextAdBuilder()
      .withHeadlinePart1(header1) // 30 characters      
      .withHeadlinePart2(header2) // 30 characters
      .withDescription1(description1) // 90 characters      
      .withFinalUrl(destinationURL) // 255 characters    
      .withMobileFinalUrl(destinationURL);
      
      /* parameters:
      
         syntax:
         {param<num>:<default value>}
         
         e.g: 
         product {param1: 'some product'} for only {param2: 0} $ - buy now!
      */

      if(pathURL1 && this.countWithoutKeywordInsertion(pathURL1) <= 15)     
        builder.withPath1(pathURL1); // 15 characters (the first part after the siteURL) e.g: http://mydomain.com/pathURL1/pathURL2      
      
      if(pathURL2 && this.countWithoutKeywordInsertion(pathURL2) <= 15)
        builder.withPath2(pathURL2); // 15 characters (the second part after the siteURL)

      if(header3){
      	if(header3.length > 30)
        	header3 = header3.substr(0, 29);
        
        builder.withHeadlinePart3(header3) // 30 characters
      }
      
      if(description2){
      	if(description2.length > 90)
        description2 = description2.substr(0, 89);
        
        builder.withDescription2(description2) // 90 characters  
      }
      
      var operation = builder.build();
      
      if(!operation.isSuccessful())
      {
        Logger.log('createAd error: %s', operation.getErrors())
        return null;
      }
      
      return operation.getResult();
    },   
    createKeywords: function(adGroup, arrKeywods){
      // arrKeywods: [string]
      // match type: see 'Match Types'      
      for(i in arrKeywods){        
        var keyword = arrKeywods[i];                                
        
        if(keyword.length > 80)
        	keyword = keyword.substr(0, 79);
        
        var operation = adGroup.newKeywordBuilder()        
        .withText(keyword)       
        // .withCpc(1.0)
        .build();        
      }
    },
    createNegativeKeywords: function(adGroup, arrKeywods){
      for(i in arrKeywods){
        var keyword = arrKeywods[i];
        adGroup.createNegativeKeyword(keyword);
      }
    },   
    
    createSiteLink: function(title, url, text1, text2){   
      if(title.length > 25)
        title = title.substr(0, 24);
      
      var operation = AdWordsApp.extensions().newSitelinkBuilder()
        .withLinkText(title)  // 25 characters  
        .withFinalUrl(url)
      	.withDescription1(text1 || '')
      	.withDescription2(text2 || '')
        .build();

      if(!operation.isSuccessful())
        return null;
      return operation.getResult();
    },
    /*
    	keyword insertion allows us to auto-inject the triggered keyword into the ad content (kind-of a placeholder). 
        structure: '{KeyWord: Value}'         
        the word 'KeyWord' plus the curly brackets are being ignored by the adwords engine so the actual length of such expression equals to the Value length alone
        e.g: the length of '{KeyWord: Chocolate}' is 9! (counting only the Chocolate) 
    */    
	countWithoutKeywordInsertion: function(input){      
      /*
        // the value does not include a keyword insertion - return it as is 
        if(input.indexOf('{') == -1 && input.indexOf('}') == -1) 
          return input;
      */
      
      var keywordInsertionPattern = /{\s*(KeyWord|param[1-3])\s*:(.*?)\s*}/ig;
      return input.replace(keywordInsertionPattern, '$2').length;      	
    },    
    /*
	   important! 
	   use it before you add your match type signs! (calling the createKeywords method)
	   in order to prevent a deletion of those legitimate chars which add to represent the keyword match type ("keyword", [keyword], +keyword)

       Logger.log(adManagerService.clearKeyword('A!@%,*B'));
       Logger.log(adManagerService.clearKeyword('12%34'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K L M N O P'));
       Logger.log(adManagerService.clearKeyword('A B C D E F G H I J K    L M N      O       P', true));
    */
    clearKeyword: function(keyword, clearSpacers){      
      // --- [validation] special characters ------//
      keyword = this.clearSpecialCharacters(keyword);      
      
      // --- [validation] words quantity ----------//
      var maxWordsAllowed = 10;
      
      // two many words
      // [error] Keywords cannot contain more than 10 words
      if(keyword.split(' ').length > maxWordsAllowed)
        keyword = keyword.split(' ').slice(0, 9).join(' '); // remove words
        
      // --- clear spacers -----------------------//
      if(clearSpacers == true)
        keyword = this.clearKeywordSpacers(keyword);
      
      return keyword;
    },
    clearSpecialCharacters: function(input){
      /* OLD VERSION
        var specialCharacters = ['!','@','%',',','*','(',')','.','&quot;','&','`',';','\'','-','"','+','[',']', '|', '>', '/'];

        // non allowed characters
        // [error] Keywords cannot contain non-standard characters like: ! @ % , *
        for(i in specialCharacters)
        {
          var c = specialCharacters[i];
          if(keyword.indexOf(c) == -1) continue;
          keyword = keyword.split(c).join(''); // replace all
        } 
      */   
      
      input = input.split('').join(' ');
      input = input.split('°').join(' ');      
      input = input.split('®').join(' ');
      input = input.split('²').join(' ');
      
      // any letter in the ASCII range 
      // \u0080-\uFFFF
      // remove any character which is NOT in the provided list (^)
      var specialCharactersPattern = /[^!\-%_\.'\?\w\d\s{}:\u0080-\uFFFF]+/g;      
      return input.replace(specialCharactersPattern, ' ');
    },
    clearKeywordSpacers : function (input){
		var arrWords = input.split(' ');
		if(arrWords.length == 1) {
		// Logger.log('single word: /%s/', input);
		return input;
		}

		// clear extra middle spaces ('A B C' -> 'A B C')
		var temp = [];
		for(i in arrWords){ 
		var word = arrWords[i].trim();
		if(word == '' || word.length == 1) continue; 
		// Logger.log('word: /%s/', word);
		temp.push(word); 
		} 

		var output = temp.join(' ');
		// Logger.log('input: /%s/', input);
		// Logger.log('output: /%s/', output);
		return output; 
	},
    setKeywordParams: function(keyword, param1Value, param2Value, param3Value){      
      if(param1Value)
        keyword.setAdParam(1, param1Value);
      
      if(param2Value)
        keyword.setAdParam(2, param2Value);
      
      if(param3Value)
        keyword.setAdParam(3, param3Value);
    },
    getAds: function(campaign){
      var ads = [];
      
      var adsIter = campaign.ads()
      .withCondition('Type = EXPANDED_TEXT_AD')
      .withCondition('Status IN [ENABLED,PAUSED]')
      .get();
      
      while(adsIter.hasNext())      
        ads.push(adsIter.next().asType().expandedTextAd());
      
      return ads;      
    },  
    getAdsByAdgroup: function(adgroup){
      var ads = [];
      
      var adsIter = adgroup.ads()      
      .withCondition('Type = EXPANDED_TEXT_AD')
      .withCondition('Status IN [ENABLED,PAUSED]')
      .get();
      
      while(adsIter.hasNext())      
        ads.push(adsIter.next().asType().expandedTextAd());
      
      return ads;      
    },      
    getAdGroupByName: function(campaign, adGroupName){
      adGroupName = adGroupName.toLowerCase();
      
      var adgroups = campaign.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withCondition('Name STARTS_WITH_IGNORE_CASE "' + adGroupName + '"')
      .get()
      
      while(adgroups.hasNext())
      { 
        var adgroup = adgroups.next();
        if(adgroup.getName().toLowerCase() == adGroupName)
          return adgroup;
      }
      return null;
    },
    getAdGroupById: function(adGroupId){            
      var adgroup = AdWordsApp.adGroups()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([adGroupId])
      .get()
      
      if(adgroup.hasNext())
        return adgroup.next();
      return null;
    },
    getCampaignById: function(campaignId){            
      var campaign = AdWordsApp.campaigns()
      .withCondition('Status IN [ENABLED,PAUSED]')
      .withIds([campaignId])
      .get()
      
      if(campaign.hasNext())
        return campaign.next();
      return null;
    },
    getKeywordParams: function(keyword){
      // [{index, text}]
      var result = [];
      
      var adParams = keyword.adParams().get();
      while (adParams.hasNext()) {
        var adParam = adParams.next();
        result.push({ 
          index: adParam.getIndex(),
          text: adParam.getInsertionText()
      	});
      }
      
      return result;
    },
    checkIfAdExistsByTitle: function(campaign, adTitle){
      var ads = this.getAds(campaign);
      for(i in ads)
        if(ads[i].getHeadlinePart1() == adTitle)
          return true;
      return false;
    },
    checkIfAdGroupExistsByName: function(campaign, adGroupName){
      return this.getAdGroupByName(campaign, adGroupName) != null;
    },
    checkIfKeywordExists: function(campaign, keywordText){
      return campaign.keywords()
      .withCondition('Text = \'' + keywordText + '\'')
      .get()
      .hasNext();
    },
    checkIfKeywordExistsInAdGroup: function(adgroup, keywordText){
      return adgroup.keywords()
      .withCondition('Text = \'' + keywordText + '\'')
      .get()
      .hasNext();
    }      
  };
}