******** Node JS ********
*************************
server-side javascript. based on the V8 engine (by google)
an environment to execute javascript code outside the browser.

=========================
- website
- installation
- code execution
- file execution
- global objects
- export & import
- package.json
- npm
- deploy
- auto-refresh
- using express
- debugging
=========================

website
-------
https://nodejs.org/en/

installation
------------
https://nodejs.org/en/download/
note: it includes the npm 

code execution
--------------
use 'node' command to run the v8 engine in the console!
we can execute any javascript code directly in the console without a browser.
use CTRL + C to abort

syntax:
> node  (enter)

e.g:
> node
> let a = 1;
> console.log(a); // 1

file execution
--------------
use 'node' command to run any javascript file!

syntax:
> node <file>

e.g:
// test.js
console.log('Hello World');

> node test.js

global objects
--------------
- global
  
  note:
  there is NO 'window' object as we have in the browser 
  instead, we have a 'global' object.
	
- process

  note:  
  there is NO 'document' object as we have in the browser 
  instead, we have a 'process' object.

- __dirname
- __filename
- URL     
  { 
	href, 
	origin, 
	protocol, 
	username, 
	password, 
	host, 
	hostname, 
	port, 
	pathname, 
	search, 
	searchParams, 
	hash 
  }  	

  e.g:
  console.log(new URL('http://www.domain.com/pageA?p=1&p=2'));

- setInterval
- setTimeout

export & import
---------------
see 'Export & Import sample'
see 'Export & Import'
see 'Require'

package.json
------------
this is a built-in config file that serves the following purposes:
1. contains a list of all packages the app needs.(aka dependencies) 
2. includes information about the app (name, version, description, author etc.)
3. includes scripts section to define 

properties:
- name				// package name
- author			// package author
- contributors		// package contributors
- bugs				// links to known bugs (usually at github)
- homepage			// package home-page
- version			// package version
- license			// package license
- keywords			// package keywords (array)		
- description		// package description
- repository		// package repository location

- scripts			// executable commands (see 'scripts')
- dependencies		// packages installed as dependencies (see 'dependencies')
- devDependencies	// packages installed as dev dependencies (see 'dependencies')
- main				// entry point of the app
- private			// flag to define whether to publish private repositories or not

scripts:
executable commands.
can be executed using the 'npm run <command>' command. 
tip! can set ANY valid command including 'npm run' to execute other listed script-command
> npm run start
> npm run dev
> npm run test
> npm run print
...

dependencies:
packages installed as dependencies.
there are two types of dependencies - 'dependencies' and 'devDependencies' which should installed only on development machine!

use the '--dev' flag to install a package as dev-dependency. 
> npm install --save --dev somePackage
use the '--save' flag to install a package plus including it in the package.json file. 
> npm install --save somePackage


sample:
{
  "name": "ExpressServer",
  "version": "0.0.0",
  "description": "ExpressServer",
  "author": {
    "name": "RcBuilder"
  },
  "dependencies": {
    "@types/node": "^12.7.5",
    "body-parser": "^1.19.0",
    "ejs": "^3.1.3",
    "express": "^4.17.1",
    "express-react-views": "^0.11.0",
    "pug": "^2.0.4",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "webfiller": "^0.1.4"
  },
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",		// use nodemon for dev
    "test": "node test.js",			
    "start-dev": "npm run dev",		// run other script
    "print": "@echo hello-world"
  }
}

dependencies
------------
use the package.json file to store the packages state so later it can be imported using the 'npm install' command.
when adding a new local package, use the '--save' option to auto store it in the file (in adding to the import process). 
-
use the package.json 'private' property to define whether to publish private repositories or not
-
instead of:
> npm install somePackage1
> npm install somePackage2
> npm install somePackage3

add the packages to the .json and use the 'install' command 
{
    "name": "app name",
    "version": "0.0.1",
    "dependencies": {
      "somePackage1": ">=2.5.0",
      "somePackage2": ">= 0.16.4",
      "somePackage3": ">=2.3.10"
  }
}
> npm install


npm
---
use the npm (node packages manager) to install/ update and remove packages.
the packages will be imported to the node_modules folder. 
use import or require command to import and use them.

global packages:
packages that can be imported in any project within the current machine.
usually located in C:\Users\<user>\AppData\Roaming\npm

install command:
shortcut 'i'
the 'install' command with no packageName imports ALL packages defined in the package.json file.
the 'install' command with packageName imports a specific package.
use the 'save' flag to store the imported package into the package.json file. 
use flag '-g' to install a package globally (see 'global packages')
use '@' sign to provide a specific version (@<version>) 
> npm install  			    	// install all packages defined in package.json
> npm install <packageName>         	// install package locally 
> npm install <packageName> -g      	// install package globally
> npm install <packageName> --save  	// install and save (to json file) a package locally 
> npm install <packageName>@<version>	// install a specific version (e.g: underscore@1.9.1)
> npm install <packageName-1>..... <packageName-N>	// install multiple packages

init command:
create a package.json file from the current state
> npm init 

list command:
shortcut 'ls'
display a tree of installed packages including their dependencies
the flag '-g' display a tree of global packages (see 'global packages')
the flag '--depth=0' avoid dependencies (flat packages view)
> npm list
> npm list -g --depth=0  // global packages
> npm list --depth=0     // local packages(current project)

commands:
> npm list 				// see 'list command'
> npm install  				// see 'install command'  
> npm init  				// see 'init command'
> npm uninstall <packageName>   	// uninstall a package
> npm search <packageName>		// search a package
> npm update -g				// update global packages
> npm update				// update local packages
> node --version			// get the version of the node engine 
> npm --version				// get the version of the installed npm
> npm config list			// show configuration
> npm config get <property> 		// get a value of the specified config property
> npm config get prefix 		// get the path of the global packages folder
> npm config set <property>=<value> 	// set a value of the specified config property
> npm config set prefix=<path> 		// change the path of the global packages folder
> npm cache clear --force		// clear cache
> npm cache verify			// verify cache
> npm publish				// publish a package to npmjs
> npm login				// login to npmjs 
> npm adduser				// add user to npmjs

deploy
------
see 'Deploy NodeJS app'

auto-refresh
------------
see 'nodemon'

using express
-------------
see 'NodeJS express server'

debugging
---------
[VS-Code]

for cases when there's no debugging profiles defined: 
(Right Menu) Run > Run and Debug > Choose Node.js. 

for cases with debugging profiles:
(Right Menu) Run > choose a debugging profile from the list > click the PLAY button. 

once running:
use the 'Run' section to get the debug features (variables, call-stack, watch, breakpoints etc.)

-

launch.json:
we can also create a launch.json file to define debugging profiles! (attach-To-Process profile, Launch-a-program profile and more...)
after creating the profiles, we could choose which one to execute from the drop-down in the 'Run' section (near the PLAY button)
note! we can find the launch.json within the .vscode folder.

// launch.json
{
	"version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "program": "${workspaceFolder}\\server.js"
        },
        {
            "type": "node",
            "request": "attach",
            "name": "Attach",
            "processId": "${command:PickProcess}"
        }
    ]
}

in the sample above we've used a launch.json file to define 2 debugging profiles
the 1st is to 'launch' a 'node' program, and the file to launch is 'server.js' of the current folder.
the 2nd is to 'attach' to a 'node' process, the process-id will be taken from the 'PickProcess' window.

-

[VS]

load the node project to visual studio.

(steps)
1. open Visual Studio > New Project
2. TypeScript/Javascript > NodeJs > From Existing Node.js code
3. Set Name, Location, and Solution > OK
4. [Wizard] choose the project location > Next
5. [Wizard] choose the startup file (when pressing F5) > Next
6. [Wizard] set the .njsproj file name			

once loaded: 
use the known vs-debugger with all its features and capabilities.

[Chrome]
1. go to chrome://inspect/
2. Open dedicated DevTools for Node
3. run your node using the 'inspect' command
   > node inspect server
4. use the dedicated window to debug your app.




