use jqLite library
------------------

angular includes a built-in library called jqLite- it's actually a lite weight library based on the known jquery.
this library includes only the basics of the jquery library core.
the 'element' object is the access point to those libraries.
(see 'jqLite available methods' below)

note! 
to transfer to jquery mode, all you need to do is to add a reference to the jquery.js file 
(see 'how to combine jQuery with angular?' below)

example:

// directive
app.directive('ngH1', function () {
    return {
        restrict: 'E',
        template: '<h1>I AM H1</h1>',
        replace:true,
        scope: {},
        link: function (scope, element, attributes) {

            // notice! 
			// if jquery is included - the 'element' refers to it, otherwise it refers to the built-in jqLite library

            element.addClass('box');
            element.bind('click', function (e) { 
				element.toggleClass('box'); 
			});
            element.prepend('< ');
            element.append(' >');
        }
    }
});

// in the view
<h5>using jqLite</h5>
<ng-H1></ng-H1>

// css 
h1.box{ 
	border:dotted 1px Purple; 
	color:Purple;
	padding:8px; 
	margin:0px; 
	display:inline-block; 
}

how to combine jQuery with angular?
-----------------------------------

in order to combine the known jquery framework with the angular js engine
you need to add a reference to the jquery script before the angular script:

<script src="jquery.min.js" type="text/javascript"></script>
<script src="angular.min.js" type="text/javascript"></script>

---

after both scripts were added you can use jquery via two ways:
1.the regular one - using $(selector)
2.using the angular.element instead of the $ sign.

---

when using link function within a directive - the element argument refers to the directive element in a jQuery mode
e.g:
link: function (scope, element, attributes) {
	element.hide(3000);
}

---

notice! 
by default, the angular.element refer to the jqLite library but if a jQuery detected the angular.element then refer to the jQuery library.
in other words - if no jquery script was added - the angular.element will refer to the angular built-in jqLite library.

---

example:

//$('h4').css({ border: 'solid 1px #000', color: 'blue' });
var selector = angular.element('h4');
selector.css({ 
	border: 'solid 1px #000', color: 'blue' 
});

trick to set the $ sign to use jquery
-------------------------------------
var app = angular.module('my_application', '');
app.value('$', $);

jqLite available methods
------------------------

jqLite is a lite weight library with only the basic methods for DOM manipulation 

reference:
addClass() 
after() 
append()
attr()
bind()
children()
clone()
contents()
css()
data()
empty()
eq()
find()
hasClass()
html()
next()
on()
off()
one()
parent()
prepend()
prop()
ready()
remove()
removeAttr()
removeClass()
removeData()
replaceWith()
text()
toggleClass()
triggerHandler()
unbind()
val()
wrap()


