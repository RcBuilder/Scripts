*** C# Windows Service ***
**************************

Process
-------
(steps)
1. Create a new project > 'Windows Service'
2. Set service name 
   - in Service1.cs 
   - Go to 'InitializeComponent'
   - Set 'ServiceName' property
3. Create a timer-based service layout 
   (see 'Timer-based Service Layout')
4. Add code to execute each timer tick
5. Add an Installer class (see Installer)


Timer-based Service Layout
--------------------------
[RunInstaller(true)]
public partial class Service1 : ServiceBase {        
    private const int MINUTE = (60 * 1000);
    private readonly int IntervalMin = 1;
    private bool IsRunning = false;

    private Processor Processor { get; set; } = new Processor();
    private Timer Timer { get; set; } = null;
        
    public Service1()
    {
        InitializeComponent();
        this.EventLog.Source = "PervasiveEngineMonitorService";
    }

    protected override void OnStart(string[] args)
    {
        this.Timer.Interval = this.IntervalMin * MINUTE;
        this.Timer.Elapsed += (s, e) =>
        {
            if (this.IsRunning) return; // still running previous tick execution

            this.IsRunning = true;			
			// File.AppendAllText("D:\\testLog.txt", $"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}\n");
			// [CODE HERE]   
            this.IsRunning = false;
        };

        this.Timer.Enabled = true;
        this.EventLog.WriteEntry("Service Has Started");
    }

    protected override void OnStop()
    {
        this.Timer.Enabled = false;
        this.EventLog.WriteEntry("Service Has Stopped");
    }
}


Installer
---------
1. Right click on 'Service1.cs' designer > Add Installer
2. On the created 'ProjectInstaller.cs' designer 
   - Click on 'serviceProcessInstaller1' > Properties (F4) > Set 'Account' to 'LocalSystem'
   - Click on 'serviceInstaller1' > Properties (F4) > Set 'ServiceName'
   - Click on 'serviceInstaller1' > Properties (F4) > Set 'StartType' to 'Automatic'
3. Decorate 'Service1.cs' with 'RunInstaller' attribute
   [RunInstaller(true)]
4. Use 'InstallUtil.exe' utility to register the service to 'Windows Services' 
   > InstallUtil.exe -i <service-path>

   // sample
   > cd C:\Windows\Microsoft.NET\Framework64\v4.0.30319
   > InstallUtil -i F:\Projects\MyService.exe   

   note! 
   * utility can be found within the Framework folder (e.g: C:\Windows\Microsoft.NET\Framework64\v4.0.30319\)  
   * can also copy both 'InstallUtil.exe' & 'InstallUtilLib.dll' files and use it anywhere!
   * use '-u' flag (instead of '-i') to uninstall the service. 

5. Use the 'AfterInstall' event to automatically start the Service! 
   should be located within the Installer constructor, after the 'InitializeComponent' method

   // sample
   this.AfterInstall += (s, e) => {
        var serviceInstaller = ((ProjectInstaller)s).serviceInstaller1;
        using (ServiceController sc = new ServiceController(serviceInstaller.ServiceName)) {
            sc.Start();
        }
    };

- 

/// using System.ServiceProcess; 
[RunInstaller(true)]
public partial class ProjectInstaller : Installer
{
    public ProjectInstaller()
    {
        InitializeComponent();

        this.serviceInstaller1.StartType = ServiceStartMode.Automatic;
        this.AfterInstall += (s, e) => {
            var serviceInstaller = ((ProjectInstaller)s).serviceInstaller1;                
            using (var sc = new ServiceController(serviceInstaller.ServiceName)) {
                sc.Start();
            }
        };
    }
}


SAMPLE CODE
-----------
## Program.cs:
static void Main() 
{
    ServiceBase[] ServicesToRun;
    ServicesToRun = new ServiceBase[]
    {
        new Service1()
    };
    ServiceBase.Run(ServicesToRun);
}

-

## ProjectInstaller.cs:
[RunInstaller(true)]
public partial class ProjectInstaller : Installer
{
    public ProjectInstaller()
    {
        InitializeComponent();

        this.serviceInstaller1.StartType = ServiceStartMode.Automatic;
        this.AfterInstall += (s, e) => {
            var serviceInstaller = ((ProjectInstaller)s).serviceInstaller1;                
            using (var sc = new ServiceController(serviceInstaller.ServiceName)) {
                sc.Start();
            }
        };
    }
}

private void InitializeComponent()
{
    this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();
    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();
    // 
    // serviceProcessInstaller1
    // 
    this.serviceProcessInstaller1.Account = System.ServiceProcess.ServiceAccount.LocalSystem;
    this.serviceProcessInstaller1.Password = null;
    this.serviceProcessInstaller1.Username = null;
    // 
    // serviceInstaller1
    // 
    this.serviceInstaller1.ServiceName = "PervasiveEngineMonitorService";
    this.serviceInstaller1.StartType = System.ServiceProcess.ServiceStartMode.Automatic;
    // 
    // ProjectInstaller
    // 
    this.Installers.AddRange(new System.Configuration.Install.Installer[] {
    this.serviceProcessInstaller1,
    this.serviceInstaller1});

}

private System.ServiceProcess.ServiceProcessInstaller serviceProcessInstaller1;
private System.ServiceProcess.ServiceInstaller serviceInstaller1;

-

## Service1.cs:
[RunInstaller(true)]
public partial class Service1 : ServiceBase
{        
    private const int MINUTE = (60 * 1000);
    private readonly int IntervalMin = 1;
    private bool IsRunning = false;

    private Processor Processor { get; set; } = new Processor();
    private Timer Timer { get; set; } = new Timer();
        
    public Service1()
    {
        InitializeComponent();
        this.EventLog.Source = "PervasiveEngineMonitorService";
    }

    protected override void OnStart(string[] args)
    {
        this.Timer.Interval = this.IntervalMin * MINUTE;
        this.Timer.Elapsed += (s, e) =>
        {
            if (this.IsRunning) return; // still running previous tick execution

            this.IsRunning = true;
            File.AppendAllText("D:\\testLog.txt", $"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}\n");
            this.Processor.Run();
            this.IsRunning = false;
        };

        this.Timer.Enabled = true;
        this.EventLog.WriteEntry("Service Has Started");
    }

    protected override void OnStop()
    {
        this.Timer.Enabled = false;
        this.EventLog.WriteEntry("Service Has Stopped");
    }
}

private void InitializeComponent()
{
    components = new System.ComponentModel.Container();
    this.ServiceName = "PervasiveEngineMonitorService";
}