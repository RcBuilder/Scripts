C# Events
---------

[syntax]

public event EventHandler<T> SomeEvent;
protected void OnSomeEvent(T args) {            
     SomeEvent?.Invoke(null, args);
}

---

[using] 

static void Main(string[] args)
{
	var c = new MyClass();
    c.SomethingHappened += (sender, e) => {
        Console.WriteLine("something happened {0}, {1}", e.p1, e.p2);
    };

    Console.WriteLine("executing Fun1...");
    c.Fun1();
}

public class MyEventArgs : EventArgs 
{
    public int p1 { get; set; }
    public string p2 { get; set; }
}

public class MyClass
{
    public event EventHandler<MyEventArgs> SomethingHappened;

    protected void OnSomethingHappened(MyEventArgs args)
    {
        if (SomethingHappened != null)
            SomethingHappened(null, args);
    }

    public void Fun1(){
		...
		...

		OnSomethingHappened(new LoadParamsEventArgs { 
            p1 = 0, p2 = "abcd" 
        });
    }
}


--------------------------------------

public class CrawledPage {
        public Uri Uri { get; set; }
    }

    public class CrawlEventArgs : EventArgs
    {
        public CrawledPage CrawledPage { get; set; }        
    }

    public class WebCrawler
    {
        public event EventHandler<CrawlEventArgs> PageCrawlCompleted;

        protected void OnPageCrawlCompleted(CrawlEventArgs args) {            
            PageCrawlCompleted?.Invoke(null, args);
        }

        public WebCrawler(CrawlConfiguration Config)
        {
            
        }

        public async Task<CrawlResult> CrawlAsync(Uri uri)
        {
            ...
	    ...
        }
    }

--------------------------------------

public class ExexuteCompletedEventArgs {
	public BotScraperResult Result { get; set; }

	public ExexuteCompletedEventArgs(BotScraperResult Result) {
            this.Result = Result;
        }
}

public class BotScraperResult {
        public int Successes { get; set; }
        public int Failures { get; set; }
        public int Skipped { get; set; }

        public HashSet<string> Links { get; set; } = new HashSet<string>();
        public List<string> Errors { get; set; } = new List<string>();

        public override string ToString() {
            return $"{this.Successes} Successes, {this.Failures} Failures, {this.Skipped} Skipped";
        }
}

public abstract class BaseBotScraper : IBotScraper {
	protected const float MINUTE = 60 * 1000;

	protected BotScraperParams Params { get; set; }
        protected Timer Timer { get; set; }

        public bool IsRunning { get; protected set; } = false;	
        public event EventHandler<ExexuteCompletedEventArgs> ExexuteCompleted;

	public BaseBotScraper(BotScraperParams Params) {
            this.Params = Params;

            this.Timer = new Timer();
            this.Timer.Elapsed += TimerTick;
            this.Timer.Interval = (int)(Params.IntervalInMin * MINUTE);
        }

	public virtual void Start() {
            this.Timer.Start();
            this.Timer.Enabled = true;
        }

        public virtual void Stop() {
            this.Timer.Stop();
            this.Timer.Enabled = false;
        }

        protected async void TimerTick(object sender, EventArgs e)
        {
            try
            {
                if (this.IsRunning) return;
                this.IsRunning = true;
                var result = await this.Exexute();
		OnExexuteCompleted(new ExexuteCompletedEventArgs(result));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ERROR] TimerTick. {ex.Message}");
            }
            finally
            {
                this.IsRunning = false;
            }
        }

        protected void OnExexuteCompleted(ExexuteCompletedEventArgs args) {            
            ExexuteCompleted?.Invoke(null, args);
        }

	protected async Task<BotScraperResult> Exexute() {
		....
		....
		....
	}
}