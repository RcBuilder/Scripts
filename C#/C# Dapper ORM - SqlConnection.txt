Dapper
------
Dapper is an open source, fast and lightweight ORM developed by the Stack Overflow team.
supports static and dynamic object binding using transactions, stored procedures, or bulk inserts of data.

-------

nuget:
Install-Package Dapper

-------

extension:
Query<T>
QueryFirst<T>
QueryMultiple<T>
QuerySingle<T>
QueryFirstOrDefault<T>
int Execute		// rows updated
object ExecuteScalar

QueryAsync
...
...
ExecuteAsync
ExecuteScalarAsync

signature:
IEnumerable<T> conn.Query<T>(<query>, <param>, <transaction>, <buffered>, <commandTimeout>, <commandType>);

params:
query: string  // the query/ sp to execute
param: object  // parameters to pass to the SQL (anonymous object)
transaction: IDbTransaction  // transaction to use
buffered: bool  // whether to buffer the results in memory
commandTimeout: int  // timeout in seconds
commandType: commandType  // the type of the query (Text, Stored Procedure etc.) 

note:
all other then 'query' are optional!
use named-parameters syntax to apply only the parameters you need. 

--

extension:
Execute

signature:
int conn.Execute(<query>, <param>, <transaction>, <commandTimeout>, <commandType>);

returns:
number of rows updated. 0 for none.

params:
see above.

-------

[using]

public class TestDapper {
    const string connStr = "Data Source=matestdb;Initial Catalog=MACrawler_;User ID=xxxxx;Password=xxxxxxxx;MultipleActiveResultSets=true;";

	// execute reader and get list 
    public static void TestRun1() {
        using (var conn = new SqlConnection(connStr)) {
            var query = @"select top 10 Id, Title from Artworks where SourceId = @SourceId";
            var res = conn.Query<Artwork>(query, param: new { SourceId = "1030" });
            foreach (var item in res) 
                Console.WriteLine(item.Title);
        }
    }

	// execute non-query update clause
    public static void TestRun2()
    {
        using (var conn = new SqlConnection(connStr))
        {
            var query = @"update Artworks set Title = 'TEST' where Id = @Id";
            var rowsUpdated = conn.Execute(query, param: new { Id = "1234" });
            Console.WriteLine(rowsUpdated);
        }
    }

	// multiple commands
    public static void TestRun3()
    {
        var query = "";
        using (var conn = new SqlConnection(connStr)) {
            query = @"create table t1(Id int); 
                    insert into t1 values(1);";
            conn.Execute(query);

            query = "update t1 set Id = (Id * 10)";
            conn.Execute(query);

            query = "select top 1 Id from t1";
            var res = conn.Query<int>(query).FirstOrDefault();
            Console.WriteLine(res);

            query = "drop table t1";
            conn.Execute(query);
        }
    }

	// using Transaction
    public static void TestRun4()
    {
        var query = "";
        using (var conn = new SqlConnection(connStr)) {
            conn.Open();
            using (var tran = conn.BeginTransaction()) {
                try {
                    query = @"create table t1(Id int); 
                            insert into t1 values(1);";
                    conn.Execute(query, transaction: tran);
                        
                    query = "update t1 set Id = (Id * 10)";
                    conn.Execute(query, transaction: tran);

                    throw new Exception("some error....");

                    query = "select top 1 Id from t1";
                    var res = conn.Query<int>(query, transaction: tran).FirstOrDefault();
                    Console.WriteLine(res);

                    query = "drop table t1";
                    conn.Execute(query, transaction: tran);
                }
                catch(Exception ex) {
                    Console.WriteLine("[ERROR] {0}", ex.Message);
                    tran.Rollback();                        
                }
            }
        }
    }
}


-------

[more samples]

using Dapper;

public class Data {
    public string Id { get; set; }
    public string AuctionId { get; set; }
    public string Medium { get; set; }
    public string Description { get; set; }        
}

private static List<Data> GetRowsToProcess(SqlConnection conn, int SourceId) {
    var query = @"select Id, AuctionId, Medium, [Description] from [Artworks] where SourceId = @SourceId and LEN(Medium) > 100";
    return conn.Query<Data>(query, param: new { SourceId }).ToList();
}

private static int UpdateRow(SqlConnection conn, int SourceId, string AuctionId, string Id, string Medium)
{
    var query = @"update [Artworks] set Medium = @Medium where SourceId = @SourceId and AuctionId = @AuctionId and Id = @Id";
    return conn.Execute(query, param: new { Medium, SourceId, AuctionId, Id });
}

// using
using (var conn = new SqlConnection(ConnectionString)) {
	var result = GetRowsToProcess(conn, SourceId);
	if (result == null) return;
	foreach (var row in result) {
		....
	}
}

--

// return @@Identity
var id = conn.Query<int>(@"
	INSERT INTO tbl([Name]) VALUES(@name) SELECT CAST(SCOPE_IDENTITY() as int)", 
	param: new { name = "Some Name" }, buffered: false
).SingleOrDefault();

--

// void
conn.Execute(@"
	INSERT INTO tbl([Name]) VALUES(@name)",
	param: new { name = "Some Name" }
);

--

// get list
var result = conn.Query<string>(@"
	select [Name] from tbl"	
).ToList();

--

class MyObject(){
	public int Id { get; set; }
    public string Name { get; set; }
	public byte Age { get; set; }
}

var result = conn.Query<MyObject>(@"
	select Id, [Name], Age from tbl"	
).ToList();

--

// using parameters
var result = conn.Query<string>(@"
	select [Name] from tbl where LEN([Name]) > @Length", 
	param: new { Length = 10 }
).ToList();

--

// using stored procedure
var result = conn.Query<string>("sp_Names_ByLength_Get"	 
	param: new { Length = 10 },
	commandType: CommandType.StoredProcedure, 
	buffered: false
).ToList();

-------

public IEnumerable<RawDataItem> GetData(int top = 1000) {
    using (var conn = new SqlConnection(connStr))
    {
        var query = @"SELECT TOP(@top) * FROM VisitorsRawDataArchive WHERE IsDataValid = 1";
        return conn.Query<RawDataItem>(query, param: new { top }, buffered: true);
    }
}

public long GetBrandIdByVisitor(string VisitorId) {
    using (var conn = new SqlConnection(connStr)) {
        var query = @"SELECT TOP 1 BrandId FROM visitors WHERE Id = @VisitorId";
        return conn.Query<long>(query, param: new { VisitorId }).SingleOrDefault();
    }
}

-------

// using Tupple
public (int Id, int? GroupId) SaveWebsiteForm(int rowId, int? groupId, string formName, string formId, bool? isShow, string source, long? brandId, DateTime? createdDate, Dictionary<string, string> fields)
{
    using (var conn = new SqlConnection(this.ConnectionString))
    {
        var result = conn.Query<(int Id, int? GroupId)>("sp_WebsiteForm_Save", param: new {
            Id = rowId,
            GroupId = groupId,
            Name = formName,
            FormId = formId,
            IsShow = isShow,
            Source = source,
            BrandId = brandId,
            CreatedDate = createdDate,
            Fields = fields.JoinKeys(";")
    }, commandType: CommandType.StoredProcedure);
        return result.FirstOrDefault();
    }
}

-------

[multiple result-sets]


// sp_Lecturer_Get
-- 1st result: lecturer details --
select * from Lecturers where Id = @Id

-- 2nd result: categories --
exec sp_Categories_byLecturer_Get @Id

// code
using (var conn = new SqlConnection(connectionString)) {                
    var reader = conn.QueryMultiple("sp_Lecturer_Get", param: new { Id }, commandType: CommandType.StoredProcedure);

    var lecturer = reader.Read<Lecturer>().FirstOrDefault();
    var categories = reader.Read<Category>().ToList();
    lecturer.Categories = categories;
    return lecturer;
}

--

var reader = connection.QueryMultiple("select 1 select 2");
reader.Read<int>().First();
reader.Read<int>().First();

-------

[using stored-Procedure]

private static readonly string connectionString = null;
static Categories() {
    connectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
}

public static List<Category> Get() {
    using (var conn = new SqlConnection(connectionString)) {                
        var result = conn.Query<Category>("sp_Categories_Get", commandType: CommandType.StoredProcedure);
        return result == null ? null : result.ToList();
    }
}

public static Category Get(int Id)
{
    using (var conn = new SqlConnection(connectionString)) {
        return conn.Query<Category>("sp_Category_Get", commandType: CommandType.StoredProcedure, param: new { Id }).FirstOrDefault();                
    }
}

public static bool Delete(int Id)
{
    using (var conn = new SqlConnection(connectionString))
    {
        var rowsAffected = conn.Execute("sp_Category_Delete", param: new { Id }, commandType: CommandType.StoredProcedure);
        return rowsAffected > 0;
    }
}

public static int Save(Category Category)
{
    using (var conn = new SqlConnection(connectionString))
        return conn.QueryFirst<int>("sp_Category_Save", param: new {
            Id = Category.Id,
            NameEN = Category.NameEN,
            NameHE = Category.NameHE,
            Notes = Category.Notes
        } , commandType: CommandType.StoredProcedure);            
}

public static bool MapCategories(int Id, IEnumerable<int> CategoryIds) {
	using (var conn = new SqlConnection(connectionString)) {
		conn.Open();
		using (var tran = conn.BeginTransaction()) {
			try {
				conn.Execute("sp_LecturerCategories_Delete", param: new { LecturerId = Id }, commandType: CommandType.StoredProcedure, transaction: tran);
				foreach (var cId in CategoryIds)
					conn.Execute("sp_LecturerCategory_Map", param: new { LecturerId = Id, CategoryId = cId }, commandType: CommandType.StoredProcedure, transaction: tran);

				tran.Commit();
				return true;
			}
			catch{                        
				tran.Rollback();
				return false;
			}
		}
	}            
}

-------

[Shared Loader]
public BrandSetting GetByUserId(string UserId) {            
    using (var conn = new SqlConnection(this.ConnectionString))
    {
        var reader = conn.QueryMultiple("sp_BrandSettings_ByUserId_Get", param: new { UserId }, commandType: CommandType.StoredProcedure);
        return LoadBrandSetting(reader);
    }
}

public BrandSetting GetByUserName(string UserName) {
    using (var conn = new SqlConnection(this.ConnectionString)) {
        var reader = conn.QueryMultiple("sp_BrandSettings_ByUserName_Get", param: new { UserName }, commandType: CommandType.StoredProcedure);
        return LoadBrandSetting(reader);
    }                
}

protected BrandSetting LoadBrandSetting(SqlMapper.GridReader reader) {
    //-- 1st table: details --                
    var brandSetting = reader.Read<BrandSetting>().FirstOrDefault();
    if (brandSetting == null) return null;

    //-- 2nd table: filters --
    brandSetting.TrafficFilters = reader.Read<TrafficFilter>();

    //-- 3rd table: campaigns --
    brandSetting.Campaigns = reader.Read<Campaign>();

    //-- 4th table: campaign Utms --
    var campaignUtms = reader.Read<CampaignUtm>().ToLookup(x => x.CampaignId);

    //-- 5th table: campaign Widgets --
    var campaignWidgets = reader.Read<WidgetToCampaign>().ToLookup(x => x.CampaignId);

    foreach (var campaign in brandSetting.Campaigns)
    {                
        campaign.WidgetToCampaigns = campaignWidgets[campaign.Id];
        campaign.Utms = campaignUtms[campaign.Id];
    }

    return brandSetting;
}

-------

[Async]

protected string ConnStr { get; set; }
public SubscriptionsDAL(string ConnStr) {
    this.ConnStr = ConnStr;
}

public async Task<bool> Delete(int Id)
{
    using (var conn = new SqlConnection(ConnStr))
    {
        var result = await conn.ExecuteAsync(
            "sp_Subscription_delete",
            commandType: CommandType.StoredProcedure,
            param: new { Id }
        );

        return result > 0;
    }
}

public async Task<Subscription> Get(int Id)
{
    using (var conn = new SqlConnection(ConnStr)){                
        var result = await conn.QueryAsync<Subscription>(
            "sp_Subscription_get", 
            commandType: CommandType.StoredProcedure, 
            param: new { Id }
        );

        return result?.FirstOrDefault();
    }
}

public async Task<List<Subscription>> Get()
{
    using (var conn = new SqlConnection(ConnStr))
    {
        var result = await conn.QueryAsync<Subscription>(
            "sp_Subscriptions_get",
            commandType: CommandType.StoredProcedure
        );

        return result?.ToList();
    }
}

public async Task<int> Save(Subscription Subscription)
{
    using (var conn = new SqlConnection(ConnStr))
    {
        var result = await conn.ExecuteScalarAsync(
            "sp_Subscription_save",
            commandType: CommandType.StoredProcedure,
            param: Subscription
        );

        return Convert.ToInt32(result);
    }
}

public async Task<bool> SetPassword(int Id, string Password)
{
    using (var conn = new SqlConnection(ConnStr))
    {
        var result = await conn.ExecuteAsync(
            "sp_Subscription_Password_save",
            commandType: CommandType.StoredProcedure,
            param: new { Id, Password }
        );

        return result > 0;
    }
}

-------

Dynamic result:
in the following example, the dapper result is a dynamic object which consists of a flat table representing a Subscription row.
the app strong-type class is not flat but a more complex type so we must parse the flat row into this complex object manually. 

// sample using 
public async Task<Subscription> Get(int Id)
{
    using (var conn = new SqlConnection(ConnStr)){                
        var result = await conn.QueryAsync<dynamic>(
            "sp_Subscription_get", 
            commandType: CommandType.StoredProcedure, 
            param: new { Id }
        );

        var dataItem = result?.FirstOrDefault();
        if (dataItem == null) return null;
        return DALHelper.ConvertToSubscription(dataItem);
    }
}

public async Task<List<Subscription>> Get()
{
    using (var conn = new SqlConnection(ConnStr))
    {
        var result = await conn.QueryAsync<dynamic>(
            "sp_Subscriptions_get",
            commandType: CommandType.StoredProcedure
        );

        var data = new List<Subscription>();                
        foreach(var dataItem in result)
            data.Add(DALHelper.ConvertToSubscription(dataItem));
        return data;
    }
}

public class DALHelper
{
    public static Subscription ConvertToSubscription(dynamic dataItem) {
        return new Subscription
        {
            Details = new SubscriptionDetails { 
                Id = dataItem.Id,
                AffiliateId = dataItem.AffiliateId,
                Email = dataItem.Email,
                FirstName = dataItem.FirstName,
                LastName = dataItem.LastName,
                Phone = dataItem.Phone,
                RegistrationStep = dataItem.RegistrationStep,
                ValidUntil = dataItem.ValidUntil
            },
            WakeupSettings = new SubscriptionWakeupSettings { 
                Gender = (eGender)dataItem.Gender,
                VoiceGender = (eGender)dataItem.VoiceGender,
                WakeupTime = TimeSpan.Parse(dataItem.WakeupTime),
                WakeupState = (eWakeupState)dataItem.WakeupState,
                UseAudioMessage = dataItem.UseAudioMessage,
                UseTextMessage = dataItem.UseTextMessage,
                IsServiceActive = dataItem.IsServiceActive
            },
            SystemSettings = new SubscriptionSystemSettings { 
                LastReceivedMessage = dataItem.LastReceivedMessage,
                IndexFemale = dataItem.IndexFemale,
                IndexMale = dataItem.IndexMale
            }
        };
    }
}


----

// Connection overload 
public async Task<int> Save(User User) {
            using (var conn = new SqlConnection(ConnStr))            
                return await this.Save(User, conn);            
}

public async Task<int> Save(User User, SqlConnection Conn) {
            return await Conn.ExecuteScalarAsync<int>(
                "sp_User_Save",
                commandType: CommandType.StoredProcedure,
                param: User
            );
}

----

// load from multiple results
public async Task<Restaurant> Get(int Id)
{
    using (var conn = new SqlConnection(ConnStr))
    {
        var reader = await conn.QueryMultipleAsync(
            "sp_Restaurant_Get",
            commandType: CommandType.StoredProcedure,
            param: new { Id }
        );

        return DALHelper.LoadRestaurant(reader);
    }
}

public class DALHelper
{    
    public static Restaurant LoadRestaurant(SqlMapper.GridReader reader)           
    {        
        //-- 1st table: details --                
        var details = reader.Read<RestaurantDetails>().FirstOrDefault();
        
        //-- 2nd table: gallery --
        var gallery = reader.Read<RestaurantGallery>();

        //-- 3rd table: menu --
        var menu = reader.Read<RestaurantMenu>();

		...
		...
		...

        return new Restaurant(details, gallery, menu);
    }
}