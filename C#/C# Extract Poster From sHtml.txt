C# Extract Poster From sHtml
----------------------------

public static string ExtractPosterFromHtml(string Body, string folder)
        {
            var images = new List<string>();

            // LOCAL METHODS
            string ConvertExtensionToJPG(string path) {
                return Regex.Replace(path, @"(\.\w{3,4})$", ".poster.jpg");
            }

            void LoadPhotos() {
                var pattern = "<img[^>]+src[\\s]*=[\\s]*[\"']([^\"']*?)[\"']";
                var matches = Regex.Matches(Body, pattern, RegexOptions.IgnoreCase | RegexOptions.Multiline);
                if (matches.Count == 0) return;
                
                foreach (Match match in matches) {
                    try
                    {
                        var src = match.Groups[1].Value;
                        if (src.StartsWith("http"))
                            images.Add(src);
                        else
                            images.Add(Path.GetFileName(src));
                    }
                    catch { }
                }                
            }

            void LoadVideoFrames() {
                var pattern = @"<video.*\ssrc=""([^""]+\.\w{3,4})""";
                var matches = Regex.Matches(Body, pattern, RegexOptions.IgnoreCase | RegexOptions.Multiline);
                if (matches.Count == 0) return;

                foreach (Match match in matches)
                {
                    try
                    {
                        var vid_src = match.Groups[1].Value;
                        if (vid_src.ToLower().StartsWith("http"))
                        {
                            // TODO: remote video file is not supported.
                            continue;
                        }
                        var videoPath = AppContext.BaseDirectory + vid_src.Replace("/", "\\");

                        var framePath = ConvertExtensionToJPG(videoPath);
                        var frame_src = ConvertExtensionToJPG(vid_src);

                        ///throw new Exception(framePath);

                        var outputFile = new MediaFile { Filename = framePath };
                        if (!File.Exists(framePath)) {
                            var engine = new Engine(FFMPEG_PATH);
                            var inputFile = new MediaFile { Filename = videoPath };
                            engine.GetMetadata(inputFile);
                            double frameTime = inputFile.Metadata.Duration.TotalSeconds / 3;
                            var options = new ConversionOptions { Seek = TimeSpan.FromSeconds(frameTime) };
                            engine.GetThumbnail(inputFile, outputFile, options);
                        }

                        images.Add(Path.GetFileName(frame_src));
                    }
                    catch { throw; }
                }                                
            }

            // -------------

            LoadPhotos();
            if(images.Count == 0)
                LoadVideoFrames();

            if (images.Count == 0)
                return string.Empty;

            // select random image to serve as a poster
            var selected = images[RND.Next(0, images.Count)];

            try {                
                var posterFile = FileHelper.ExtractPoster($"{folder}{selected}", folder, 500, 500, false);
                return posterFile;
            }
            catch (Exception ex) {
                LoggerSingleton.Instance.Error($"Common.Helper.ExtractPosterFromHtml: failed to create Poster for: {selected}", ex);
                return string.Empty;
            }
        }