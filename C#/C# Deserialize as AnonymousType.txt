C# Deserialize as AnonymousType
-------------------------------

// basic
var ModelSchema = new { 
	Id = 0,
	Name = "" 
};

var requestPayload = @"{ 
	"Id": 100,
	"Name": "John Doe"
}";

var result = JsonConvert.DeserializeAnonymousType(requestPayload, ModelSchema);
Console.WriteLine(result.Name);

--

var schema = new
{
    orderId = 0,
    clientOrderId = "",
    transactTime = 0,
    status = "",
    type = "",
    side = ""
};

var model = JsonConvert.DeserializeAnonymousType(response.Content, schema);
Console.WriteLine(model.orderId);

----

// multiple schemas
var CartItemSchema = new { 		
	Name = "",
	Price = 0.0F,
	Units = 0
};
	
var CartSchema = new { 
	CartId = 0,
	Items = new[]{ CartItemSchema }		
};
	
var cartPayload = @"{ 
	'CartId': 100,
	'Items': [
		{
			'Name': 'Item-A',
			'Price': 35.9,
			'Units': 3
		},
		{
			'Name': 'Item-B',
			'Price': 210,
			'Units': 1
		},
		{
			'Name': 'Item-C',
			'Price': 83,
			'Units': 12
		},
	]
}";
	
var cart = JsonConvert.DeserializeAnonymousType(cartPayload, CartSchema);
Console.WriteLine(cart.CartId);
foreach(var item in cart.Items)
	Console.WriteLine($"{item.Name} -> Units: {item.Units}, Price:{item.Price}");

----

// more samples
var companySchema = new {
    CompanyName = string.Empty
};

var modelSchema = new {
    QueryResponse = new {
        CompanyInfo = new[] { companySchema }
    }
};

var responseData = JsonConvert.DeserializeAnonymousType(response.Content, modelSchema);
return new APICompanyInfo {
    Name = responseData.QueryResponse.CompanyInfo.FirstOrDefault()?.CompanyName
};

-

var modelSchema = new
{
    x_refresh_token_expires_in = 0,
    refresh_token = string.Empty,
    access_token = string.Empty,
    token_type = string.Empty,
    expires_in = 0
};

var responseData = JsonConvert.DeserializeAnonymousType(response.Content, modelSchema);
this.Config.AccessToken = responseData.access_token;
this.Config.RefreshToken = responseData.refresh_token;

-

var accountSchema = new
{
    Id = string.Empty,
    Name = string.Empty
};

var modelSchema = new
{
    QueryResponse = new
    {
        Account = new[] { accountSchema }
    }
};

var responseData = JsonConvert.DeserializeAnonymousType(response.Content, modelSchema);
return responseData?.QueryResponse?.Account?.Select(x => new APIAccount { 
    Id = x.Id,
    Name = x.Name
});

-

var errorSchema = new {
    message = string.Empty,
    detail = string.Empty
};
            
var exSchema = new {
    fault = new { 
        error = new[] { errorSchema }
    },
    type = string.Empty
};

var exData = JsonConvert.DeserializeAnonymousType(errorRawParts[1], exSchema)?.fault?.error?.FirstOrDefault();
return new APIErrorResponse
{
    Message = errorRawParts[0].Trim(),
    InnerMessage = (
        exData?.message?.Trim() ?? string.Empty,
        exData?.detail?.Trim() ?? string.Empty
    )
};            

-

/*
{
    "QueryResponse": {
        "Vendor": [
            {
                "Balance": 0,
                "Vendor1099": false,
                "CurrencyRef": {
                    "value": "USD",
                    "name": "United States Dollar"
                },
                "domain": "QBO",
                "sparse": false,
                "Id": "56",
                "SyncToken": "0",
                "MetaData": {
                    "CreateTime": "2021-08-03T14:28:52-07:00",
                    "LastUpdatedTime": "2021-08-03T14:28:52-07:00"
                },
                "DisplayName": "Bob's Burger Joint",
                "PrintOnCheckName": "Bob's Burger Joint",
                "Active": true
            }
        ]        
    }    
}
*/

var vendorSchema = new
{
    Id = string.Empty,
    DisplayName = string.Empty
};

var modelSchema = new
{
    QueryResponse = new
    {
        Vendor = new[] { vendorSchema }
    }
};

var responseData = JsonConvert.DeserializeAnonymousType(response.Content, modelSchema);
return responseData?.QueryResponse?.Vendor?.Select(x => new APIVendor { 
    Id = x.Id,
    DisplayName = x.DisplayName
});

-

/*
{
  "AttachableResponse": [
    {
      "Attachable": {
        "FileName": "rc_file_20220127.pdf",
        "FileAccessUri": "",
        "TempDownloadUri": "",
        "Size": 357860,
        "ContentType": "application/pdf",
        "domain": "QBO",
        "sparse": false,
        "Id": "3400000000056250060",
        "SyncToken": "0",                
      }
    }
  ],  
}
*/

var attachableSchema = new
{
    Attachable = new {
        Id = string.Empty
    }
};

var modelSchema = new
{
    AttachableResponse = new[] { attachableSchema }
};

var responseData = JsonConvert.DeserializeAnonymousType(response.Content, modelSchema);
return responseData?.AttachableResponse.FirstOrDefault()?.Attachable?.Id;