PDFSharp - Generate PDF using C#
--------------------------------

References:
- REST - Web Api - Export As HTML and PDF
- PdfManager.cs

Nuget:
> Install-Package HtmlRenderer.PdfSharp -Version 1.5.0.6

Sources:
- https://www.nuget.org/packages/HtmlRenderer.PdfSharp/

Save To Stream:
var stream = new MemoryStream();
pdfDoc.Save(stream);
stream.Dispose();

Save To File:
pdfDoc.Save(<path>);

Create a Page:
var page = pdfDoc.AddPage();
var gfx = XGraphics.FromPdfPage(page);

Draw an Image:
var page = pdfDoc.AddPage();
var gfx = XGraphics.FromPdfPage(page);
var image = XImage.FromFile(<path>);
gfx.DrawImage(image, new XRect(0, 0, page2.Width, page2.Height));

Draw a String:
var page = pdfDoc.AddPage();
var gfx = XGraphics.FromPdfPage(page);
var font = new XFont("Arial", 20, XFontStyle.Regular);
gfx.DrawString("Hello World", font, XBrushes.Black, new XRect(0, 0, page.Width, page.Height), XStringFormats.Center);

----

// generate a file using Canvas

using PdfSharp;
using PdfSharp.Drawing;
using PdfSharp.Pdf;

var pdfDoc = new PdfDocument();
pdfDoc.Info.Title = "PDF Title";

var page1 = pdfDoc.AddPage();
var gfx1 = XGraphics.FromPdfPage(page1);
var font = new XFont("Arial", 20, XFontStyle.Regular);
gfx1.DrawString("Hello World", font, XBrushes.Black, new XRect(0, 0, page1.Width, page1.Height), XStringFormats.Center);

var page2 = pdfDoc.AddPage();
var gfx2 = XGraphics.FromPdfPage(page2);
var image = XImage.FromFile("D:\\237-200x200.jpg");
gfx2.DrawImage(image, new XRect(0, 0, page2.Width, page2.Height)); // full page

var page3 = pdfDoc.AddPage();
var gfx3 = XGraphics.FromPdfPage(page3);            
gfx3.DrawImage(image, new XRect(0, 0, image.PixelWidth, image.PixelHeight)); // image size

pdfDoc.Save("D:\\export.pdf");

----

// create a PdfDocument from HTML string

var sDocument = @"
    <h1>Header<h1>
    <p>Content</p>
";

var pdfDoc = PdfGenerator.GeneratePdf(sDocument, PageSize.A4);	

----

// draw image from the web (by image-url)

var pdfDoc = new PdfDocument();
byte[] data;
using (var client = new WebClient())            
    data = await client.DownloadDataTaskAsync(new Uri("https://picsum.photos/id/1011/600/300"));

using (var ms = new MemoryStream(data))
using (var image = Image.FromStream(ms))
{
    var page = pdfDoc.AddPage();
    var gfx = XGraphics.FromPdfPage(page);
    var pdfImage = XImage.FromGdiPlusImage(image);
    gfx.DrawImage(pdfImage, new XRect(0, 0, pdfImage.PixelWidth, pdfImage.PixelHeight));
}

----

// take a website screenshot into a pdf document using Puppeteer#
// > Install-Package PuppeteerSharp -Version 5.0.0

var pdfDoc = new PdfDocument();
var browser = await Puppeteer.LaunchAsync(new LaunchOptions {
    Headless = true,
    Timeout = (10 * 1000),  // 10 sec
    ExecutablePath = $"{AppDomain.CurrentDomain.BaseDirectory}Win64-884014\\chrome-win\\chrome.exe",
    DefaultViewport = null, // max resolution
    Args = new[] { "--no-sandbox" }
});

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync("https://rcb.co.il/Service/WebsiteForYourBusiness");

var screenshotOptions = new ScreenshotOptions { 
    FullPage = true, 
    Quality = 100, 
    Type = ScreenshotType.Jpeg 
};

using (var screenshotStream = await webPage.ScreenshotStreamAsync(screenshotOptions))
using (var image = Image.FromStream(screenshotStream))
{    
    var page = pdfDoc.AddPage();
    var gfx = XGraphics.FromPdfPage(page);                
    var pdfImage = XImage.FromGdiPlusImage(image);                
    gfx.DrawImage(pdfImage, new XRect(0, 0, page.Width, page.Height), new XRect(0, 0, pdfImage.PixelWidth, pdfImage.PixelHeight), XGraphicsUnit.Point);
}

----

// create Pdf using Puppeteer#
// > Install-Package PuppeteerSharp -Version 5.0.0
var downloadChrome = string.IsNullOrEmpty(ChromePath);
if (downloadChrome)
{
    var browserFetcherOptions = new BrowserFetcherOptions
    {
        Path = $"{AppDomain.CurrentDomain.BaseDirectory}",
        Platform = Platform.Win64,
        Product = Product.Chrome
    };
    var browserFetcher = new BrowserFetcher(browserFetcherOptions);
    var revisionInfo = await browserFetcher.DownloadAsync();
    ChromePath = revisionInfo.ExecutablePath;
}

var browser = await Puppeteer.LaunchAsync(new LaunchOptions
{
    Headless = true,
    Timeout = (10 * 1000),  // 10 sec
    ExecutablePath = ChromePath, /// $"{AppDomain.CurrentDomain.BaseDirectory}Win64-884014\\chrome-win\\chrome.exe",
    DefaultViewport = null, // max resolution
    Args = new[] { "--no-sandbox" }  // "--window-size=800,1080"
});

var webPage = await browser.NewPageAsync();
await webPage.GoToAsync(URL);

/* 
	Stream PdfStreamAsync()
	Byte[] PdfDataAsync()
	Void PdfAsync(<file-path>)
*/
var pdfStream = await webPage.PdfStreamAsync();

pdfStream.Position = 0;
using (var fs = new FileStream(FilePath, FileMode.OpenOrCreate, FileAccess.ReadWrite))
    pdfStream.CopyTo(fs);
pdfStream.Dispose();

----

// export as a file using HttpResponse

using (var stream = new MemoryStream()) {
    pdfDoc.Save(stream);

    var response = new HttpResponseMessage();
    response.Content = new ByteArrayContent(stream.ToArray());
    response.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment");
    response.Content.Headers.ContentDisposition.FileName = "export.pdf";
    response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");

    return response;
}

----

-------------------------------------------------------------
TODO ->> Check

// using itext7 library

// itext7 pdf-html
// Install-Package itext7.pdfhtml -Version 3.0.5

var sDocument = @"                
    <style>
        .c1 { color:red; }
    </style>
    <h1 class=""c1"">Header<h1>
    <p>Content</p>
";
            
using (var stream = new MemoryStream())
{
	var converterProperties = new ConverterProperties();   
    HtmlConverter.ConvertToPdf(sDocument, stream, converterProperties);
    
    var response = new HttpResponseMessage();
    response.Content = new ByteArrayContent(stream.ToArray());
    response.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment");
    response.Content.Headers.ContentDisposition.FileName = "export.pdf";
    response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");

    return response;
}

-

var stream = new MemoryStream();
var fs = new FileStream("D:\\1.pdf", FileMode.OpenOrCreate);
var pdfWriter = new PdfWriter(fs);
var converterProperties = new ConverterProperties();
HtmlConverter.ConvertToPdf(sDocument, pdfWriter);

-

var stream = new FileStream("D:\\bbb.pdf", FileMode.OpenOrCreate, FileAccess.Write);               
var converterProperties = new ConverterProperties();
HtmlConverter.ConvertToPdf(sDocument, stream, converterProperties);

-

var stream = new MemoryStream();
HtmlConverter.ConvertToPdf(sDocument, stream);

-

 var stream = new FileStream("D:\\bbb.pdf", FileMode.OpenOrCreate, FileAccess.Write);
PdfWriter writer = new PdfWriter(stream);
var pdfDocument = new iText.Kernel.Pdf.PdfDocument(writer);
pdfDocument.SetDefaultPageSize(new iText.Kernel.Geom.PageSize(1920, 1080));                
ConverterProperties converterProperties = new ConverterProperties();
converterProperties.SetCharset("Windows-1255");
HtmlConverter.ConvertToPdf(sDocument, pdfDocument, converterProperties);

-

var pdfWriter = new PdfWriter("D:\\ddd.pdf");            
var converterProperties = new ConverterProperties();
var pdfDoc = HtmlConverter.ConvertToDocument(sDocument, pdfWriter, converterProperties);            
pdfDoc.Close();