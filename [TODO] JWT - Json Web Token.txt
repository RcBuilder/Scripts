*** JWT - Json Web Token ***
****************************
JWT stands-for Json Web Token.
is used for authorization. 
commonly used in REST services to decide whether the user has access to the requested resource or not.
no server dependency! each request is stateless! any information about the user is encoded within the token (JWT)!

JWT vs Session
--------------
a session is stored as an object in the server memory and a reference (in form of Session-Id) is stored as user-cookie. once a request is made, the server uses the user referece cookie to find the object in the server memory and get the relevant information about the user. 
if our service must be scaled out (more servers to serve the same service and a router to distribute the traffic between them), we'll face session issues. 
lets say a user enters serverA and logs-in, serverA saves a local cookie and a client cookie... then, this user makes another request but now reaches serverB... serverB does NOT have the object in memory so it could NOT identify the user! 

using JWT allows us to scale-out our servers due to the independent mechanism. 
the token contains information about the user and it's being attached to any request so once we decipher it we have all we need in order to identify the user. 
that means, we don't have a server-cookie dependency so we can add more and more servers and they all work the same (note: they will have to share the same secret-key) 

Sources
-------
- JWT Playground
  https://jwt.io/
- hash - HMAC generator
  https://www.freeformatter.com/hmac-generator.html
- Cryptii - Base64 Encode/Decode + Bytes
  https://cryptii.com/pipes/text-to-base64


How To Create A JWT?
--------------------
<header>.<payload>.<signature>

header: 
contains the token type (typ) and the algorithm to use (alg). 
{ alg, typ }

payload:
any data. usually user information.

signature:
- to generate a signature, we need to use the provided algorithm to encode a base64 of the <header> and <payload> (seperated by a dot sign). 
  the algorithm which defines in the <header> section

- formula to create a signature
  HASH(
	base64UrlEncode(<header>) + "." + base64UrlEncode(<payload>), 
	<secret-key>
  )

- toBase64 
  convert as bytes the generated signature as base64. 
  note! use as bytes and NOT as plain text.
  replace "+" with "-" 
  remove suffix "="


sample:

// header
{"alg":"HS256","typ":"JWT"}   // eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9

// payload
{"id":"1234567890","name":"John Doe","timestamp":1516239022}   // eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ

// signature
HMACSHA256($"{base64UrlEncode(header)}.{base64UrlEncode(payload)}", "my-secret-key");  // 311bceddf134a3d0bea597ddde923484c0c35e28497d06b55cf43e5007a5cda2

// signature-toBase64
MRvO3fE0o9C-pZfd3pI0hMDDXihJfQa1XPQ-UAelzaI 

Using Online Tools
------------------
use this tool https://cryptii.com/pipes/text-to-base64 to encode the <header> and <payload> json to base64.
use this tool https://www.freeformatter.com/hmac-generator.html to create a signature using the provided algorithm. 
use this tool https://cryptii.com/pipes/text-to-base64 to encode the <signature> to base64 (note! use as bytes and NOT as plain text)



