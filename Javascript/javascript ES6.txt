*** javascript ES6 ***
**********************
ES6 refers to version 6 of the ECMA Script programming language (aka JavaScript)


-----------------------------------------
- Arrow functions
- Constants
- Default Parameter Values
- HashSet
- Map Data-Structure
- Array find
- Array findIndex
- Object assign
- String Repeating
- String startsWith
- String endsWith
- String includes
- Number isNaN
- Number isFinite
- Number isInteger
- Number isSafeInteger
- Math trunc
- Math sign
- Promise
- Params (rest operator)
- Reflection
- Localization
- Destructuring assignment
- Generators
- Enums
- Template Literals
- Modules
-----------------------------------------


Arrow functions
---------------
syntax:
() => { ... } 
<item> => { ... }

reference:
js arrow functions.txt

e.g:
var nums = [1, 2, 3, 4, 5];
nums.forEach(n => {
   if (n % 2 === 0)
       console.log(n + ' is even');
});

Constants
---------
immutable variable! 
variables which cannot be re-assigned new content.

note that only the variable itself is immutable, not its assigned content. 
in case of an object - the object properties can be altered! 

syntax:
const <name> = <value>

e.g:
const PI = 3.141593;
console.log(PI);
PI = 3.15; // exception! can't be re-assigned

Default Parameter Values
------------------------
default values for parameters. 
must be added last!

syntax:
function <name> (<param>, <param> = <value>) { ... }

e.g:
function fun (p1, p2 = 1, p3 = 5) {
    return p1 + p2 + p3;
}

fun(20, 10, 7); // 37
fun(20, 10); // 35 
fun(20); // 26

HashSet
-------
storing unique items with highly-performed read.

syntax:
var <name> = new Set();

methods:
Set add(<key>);
bool has(<key>);
IEnumerable values();

properties:
size // items count

e.g:
var hashSet = new Set();
hashSet.add('roby');
hashSet.add('avi');
hashSet.add('roby');
hashSet.add('ronen');

console.log(hashSet.size); // 3
console.log(hashSet.has('avi')); // true

var keys = hashSet.values();
for(let key of keys)
    console.log(key);    

Map Data-Structure
------------------
also see 'javascript ES6 Map Data-Structure'

for mapping purposes.

syntax:
var <name> = new Map();

loop:
<map>.forEach((v, k) => {});

methods:
Map set(<key>);
Any get(<key>);
IEnumerable entries();

properties:
size // items count
length

init:
new Map([ 
    [key, value],
    [key, value]
    ...
    ... 
])

e.g:
var mapObject = new Map();
mapObject.set(1, 'A');
mapObject.set(2, 'B');
mapObject.set(3, 'C');
mapObject.set(4, 'D');

console.log(mapObject.size); // 4
console.log(mapObject.get(3)); // C

var entries = mapObject.entries();
for(let entry of entries)
    console.log(entry[0] + ' = ' + entry[1]); 

-

const someMap = new Map([
    ['k1', 'v1'],
    ['k2', 'v2'],
    ['k3', 'v3'],
    ['k4', 'v4']
]);

someMap.forEach((v, k) => { 
	console.log(`${k} = ${v}`); 
}); 

Array find
----------
find an element within an array.
first match.

syntax:
<Array>.find(predicate);

e.g:
var arr = [100, 200, 300, 400, 500];

var prd = x => x > 350; // predicate 
console.log(arr.find(prd)); // 400

Array findIndex
---------------
find an element index within an array. 
first match.

syntax:
<Array>.findIndex(predicate);

e.g:
var arr = [100, 200, 300, 400, 500];

var prd = x => x > 350; // predicate 
console.log(arr.findIndex(prd)); // 3

Object assign
-------------
merge all <src> objects to one <dest> object.
add all non-exists <src> properties, override exists properties.

syntax:
Object.assign(<dest>, <src1>, <src2> ....);

e.g:
var dest = { n1: 1 }
var src1 = { n2: 5, n3: 3 }  // add n2 and n3
var src2 = { n2: 2, n4: 4 }  // override n2 and add n4
var src3 = { n5: 5 }  // add n5

Object.assign(dest, src1, src2, src3);
console.log(dest); // { n1: 1, n2: 2, n3: 3, n4: 4, n5: 5 }

String Repeating
----------------
syntax:
<String>.repeat(<number>);

e.g:
console.log('ABC'.repeat(3));  // ABCABCABC
console.log('#'.repeat(5));  // #####

String startsWith
-----------------
syntax:
<String>.startsWith(<string>, <startIndex>);

e.g:
let names = 'Roby Avi Bonnie Ron Roby Shirly';
console.log(names.startsWith('Roby'));  // true
console.log(names.startsWith('Roby', 0));  // true
console.log(names.startsWith('Avi', 5));  // true

console.log(names.startsWith('Avi', 6));  // false 

String endsWith
---------------
syntax:
<String>.endsWith(<string>, <numOfChars>);

note:
the <numOfChars> represents the number of characters to take from the original <String>
for 'Roby Avi Bonnie Ron Roby Shirly' with <numOfChars> equals to 4  - we'll get the substring 'Roby'

e.g:
let names = 'Roby Avi Bonnie Ron Roby Shirly';
console.log(names.endsWith('Shirly'));  // true
console.log(names.endsWith('Avi', 8));  // true
console.log(names.endsWith('by', 4));  // true

String includes
---------------
syntax:
<String>.includes(<string>, <startIndex>);

e.g:
let names = 'Roby Avi Bonnie Ron Roby Shirly';
console.log(names.includes('Bonnie'));  // true
console.log(names.includes('Bonn'));  // true
console.log(names.includes('Avi', 0));  // true
console.log(names.includes('Avi', 2));  // true
console.log(names.includes('Avi', 10));  // false 

Number isNaN
------------
Number Type Checking.
check if the passing object is of type NaN.
returns true ONLY for the NaN value!

syntax:
Number.isNaN(<any>);

e.g:
console.log(Number.isNaN(NaN));  // true
console.log(Number.isNaN(0/0));  // true

console.log(Number.isNaN(10));  // false
console.log(Number.isNaN('10'));  // false
console.log(Number.isNaN(' '));  // false
console.log(Number.isNaN('ABC'));  // false
console.log(Number.isNaN(null));  // false

Number isFinite
---------------
Number Type Checking.
check if the passing object is a finite number.

syntax:
Number.isFinite(<any>);

e.g:
console.log(Number.isFinite(10));  // true
console.log(Number.isFinite(10.5));  // true

console.log(Number.isFinite('10'));  // false
console.log(Number.isFinite(' '));  // false
console.log(Number.isFinite('ABC'));  // false
console.log(Number.isFinite(null));  // false
console.log(Number.isFinite(Infinity));  // false
console.log(Number.isFinite(NaN));  // false

Number isInteger
---------------
Number Type Checking.
check if the passing object is an integer.

syntax:
Number.isInteger(<any>);

e.g:
console.log(Number.isInteger(10));  // true
console.log(Number.isInteger(-10));  // true
console.log(Number.isInteger(10.5));  // false

console.log(Number.isInteger('10'));  // false
console.log(Number.isInteger(' '));  // false
console.log(Number.isInteger('ABC'));  // false
console.log(Number.isInteger(null));  // false
console.log(Number.isInteger(Infinity));  // false
console.log(Number.isInteger(NaN));  // false

Number isSafeInteger
--------------------
Number Type Checking.
check if the passing object is a safe integer (in the safe numeric range)

syntax:
Number.isSafeInteger(<any>);

e.g:
console.log(Number.isSafeInteger(10));  // true
console.log(Number.isSafeInteger(-10));  // true
console.log(Number.isSafeInteger(10000));  // true

console.log(Number.isSafeInteger(10.5));  // false
console.log(Number.isSafeInteger(10000000000000000000));  // false

console.log(Number.isSafeInteger('10'));  // false
console.log(Number.isSafeInteger(' '));  // false
console.log(Number.isSafeInteger('ABC'));  // false
console.log(Number.isSafeInteger(null));  // false
console.log(Number.isSafeInteger(Infinity));  // false
console.log(Number.isSafeInteger(NaN));  // false

Math trunc
----------
truncate the floating point of a number.
convert to int.

syntax:
Math.trunc(<any>);

e.g:
console.log(Math.trunc(12.3)) // 12
console.log(Math.trunc(-12.3)) // -12
console.log(Math.trunc(0.1)) // 0
console.log(Math.trunc(0.3)) // 0
console.log(Math.trunc(-0.1)) // -0

Math sign
----------
determine the sign of a number.

returns: 
 1  for positive numbers
-1  for negative numbers
 0  for the value 0 
-0  for the value -0 
NaN for non-numbers 

note:
no typed checked, we can use string values

syntax:
Math.sign(<any>);

e.g:
console.log(Math.sign(12)) // 1
console.log(Math.sign(-12)) // -1
console.log(Math.sign(0.1)) // 1
console.log(Math.sign(-0.1)) // -1

console.log(Math.sign('12')) // 1
console.log(Math.sign('-12')) // -1
console.log(Math.sign('ABC')) // NaN

console.log(Math.sign(0)) // 0
console.log(Math.sign(-0)) // -0
console.log(Math.sign(NaN)) // NaN

Promise
-------
used for async actions. releases the thread (js is single-threaded) for other work while waiting.
resolve indicates on completion, 
reject indicates on cancelation or exception. 

syntax:
Promise((resolve, reject);

e.g:
function funAsync(){
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve('response from async'), 1500);
    });
}

console.log('before async call');
funAsync().then(msg => {
    console.log(msg);
});
console.log('after async call');

/*
	before async call
	after async call
	response from async
*/

Binary & Octal 
--------------
use 0b for binary representation (base 2)
use 0o for octal representation (base 8) 

syntax:
console.log(0b00010111);
console.log(0o10);

e.g: 
// using ES6
console.log(0b00000111);  // 7
console.log(0o10);  // 8

// using ES5
console.log(parseInt('00000111', 2));
console.log(parseInt('10', 8));

Params (rest operator)
----------------------
use the 3 dots to set a function params (unknown number of sequential parameters)

syntax:
...<name>

function <name>(...<prms>){ }
function <name>(<p>, <p>, ...<prms>){ }

e.g:
function fun1(prms) {
    console.log(prms);   
}

function fun2(...prms) {
    console.log(prms);   
}

function fun3(p1, p2, ...prms) {     
    console.log(prms);    
}

fun1(1,2,3,4,5,6,7); // 1
fun2(1,2,3,4,5,6,7); // [ 1, 2, 3, 4, 5, 6, 7 ]
fun2('A','B',1,2,true,false,x=> x*2); // [ 'A', 'B', 1, 2, true, false, [Function] ]
fun3('A','B',1,2,3,4,5); // [ 1, 2, 3, 4, 5 ]

Reflection
----------
syntax:
Reflect.ownKeys(<object>);

e.g:
let obj = { p1: 1 };
Object.defineProperty(obj, 'p2', { value: 2 });
obj['p3'] = 3;

console.log(obj);
console.log(Reflect.ownKeys(obj));  // ES6
console.log(Object.getOwnPropertyNames(obj));  // ES5

/*
	{ p1: 1, p3: 3 }
	[ 'p1', 'p2', 'p3' ]
	[ 'p1', 'p2', 'p3' ]
*/

Localization
------------
syntax:
// unicode characters
<collator> Intl.Collator(<locale>); 

// number, currency, date etc.
<formater> Intl.NumberFormat(<locale>);  
<formater> Intl.DateTimeFormat(<locale>); 

methods:
int <collator>.compare(<string>, <string>);
string <formater>.format(<value>, <options>);

-- 

e.g: collator

var collatorDE = new Intl.Collator("de"); // German: a, ä ... z

// +1 - a is bigger than ä
// reminder: compare returns -1 if the right parameter is bigger, +1 if the left is
console.log(collatorDE.compare("ä", "a"));  // -1
console.log([ 'ä', 'a', 'b', 'z'].sort(collatorDE.compare));  // [ 'a', 'ä', 'b', 'z' ]

--

e.g: formater

var formaterDE = new Intl.NumberFormat("de"); 
console.log(formaterDE.format(1234567.89));  // 1,234,567.89

var formaterDE_EUR = new Intl.NumberFormat("de-DE", { style: "currency", currency: "EUR" });
console.log(formaterDE_EUR.format(1234567.89));  // € 1,234,567.89

var formaterEN_Date = new Intl.DateTimeFormat("en-US");
var formaterHE_Date = new Intl.DateTimeFormat("he-IL");

console.log(formaterEN_Date.format(new Date('2019-04-21'))); // 4/21/2019
console.log(formaterHE_Date.format(new Date('2019-04-21'))); // 2019-4-21

Destructuring assignment
------------------------
allows us to 
1. assign multiple values.
2. set an array of values into a distinct variables!

e.g: multiple assignments

let i1, i2, i3;

[ i1, i2, i3 ] = [ 1, 2, 3 ]
console.log(i1 + ', ' + i2 + ', ' + i3); // 1, 2, 3

[ i1, i2, i3 ] =  [ i1 * 2, i2 * 2, i3 * 2 ];
console.log(i1 + ', ' + i2 + ', ' + i3); // 2, 4, 6

[ i2, i3 ] = [ i1 * 10, i1 * 20 ];
console.log(i1 + ', ' + i2 + ', ' + i3); // 2, 20, 40

--

e.g: array 2 variables

let v1, v2, v3;
let arr = [ 10, 'A', true ];

[ v1, v2, v3, v4 ] = arr;
console.log(v1); // 10
console.log(v2); // A
console.log(v3); // true


Generators
----------
* Generator Function
  
syntax:

// standalone function
function* <name>(<params>){ 
	... 
	yield <value>;
	...
}

// within a class 
class <name> {
    * <name>(<params>) {        
		...
        yield item;                                
		...
    }
}


// within a literal
let <name> = {
    * <name>(<params>) {        
		...
        yield item;                                
		...
    }
}

--

// e.g: range
function* range (start, end, step) {
    while (start < end) {
        yield start;
        start += step;
    }
}

for (let item of range(0, 10, 2)) {
    console.log(item); // 0, 2, 4, 6, 8
}


// e.g: fibonacci
function* fibonacci(steps){
    let previos = 0, current = 1, temp = 0;
    for(let i=0;i<steps;i++) {
        yield current;    

        temp = current
        current += previos;    
        previos = temp;        
    }
} 

for (let item of fibonacci(8)) {
    console.log(item) // 1, 1, 2, 3, 5, 8, 13, 21
}


// e.g: within a class
class ClassA {
    * getItems() {
        let arr = [ 'A', 'B', 'C', 'D' ];
        for(let item of arr)
            yield item;                                
    }
}

let c = new ClassA();
for (let item of c.getItems()) {
    console.log(item) // A, B, C, D
}


// e.g: within a literal
let obj = {
    * getItems() {
        let arr = [ 'A', 'B', 'C', 'D' ];
        for(let item of arr)
            yield item;                                
    }
}

Enums
-----
const eColor1 = {
    RED: 10,
    GREEN: 11,
    BLUE: 12
}

const eColor2 = {
    RED: 'RED',
    GREEN: 'GREEN',
    BLUE: 'BLUE'
}

let color1 = eColor1.RED;
let color2 = eColor2.RED;

console.log(color1);  // 10 
console.log(color2);  // RED

Template Literals
-----------------
create dynamin string using placeholders 

syntax:
`...${<variable>}...` 

note: 
the ` sign located to the left of the number '1' key and above the 'Tab' key in your keyboard

multilines:
we can use the \n as before OR we can just use the enter key for each new line! 

---

// regular string 
var s = `A string`;

// multiline string (using 'enter' key)
var sMultiLines = `LineOne
Line Two
Line Three
`

// basic expression
console.log(`my name is ${'Roby'}`); // my name is Roby 

// expression with variables
let name = 'Roby'; // some variable
console.log(`my name is ${name}`); // my name is Roby

let price = 30;
let quantity = 3;
console.log(`total items purchased is ${price*quantity}`); // total items purchased is 90

// within an object
let product = {
	id: 1,
	name: 'some product',
	print(){
		console.log(`product name "${this.name}" with id ${this.id}`);
	}
}

---

// html templates
// with a combination of multiline feature with the template expressions, we can create an html templates easily 

data = {
	id: 1, 
	name: 'Some Product',
	unitsInStock: 400,
	unitPrice: 30.99,
	madeIn: 'Israel'
}

var html = 
`<div>
	<h3>${data.name}</h3>	
	<h5>id #${data.id}</h5>
	<p>this product made in ${data.madeIn}, it cost ${data.unitPrice} nis and has left only ${unitsInStock} in stock. BUY NOW!</p>
</div>`;

---

// tagged templates
first parameter gets list of pure strings till a variable
other parameters represent the literral template variables (${<variable>}) 

syntax:
function <name>(<[string]>, <value>, <value>...) { ... }

using: 
function tag1(strings, value1, value2) {
    console.log(strings);   // [ 'ABC ', ' - ', ' DEF' ]
    console.log(value1);	// V1
    console.log(value2);    // V2
}

tag1`ABC ${'V1'} - ${'V2'} DEF`; 

note:
'strings' gets all pure strings in the template whereas variables send as params correspondingly.
each line in 'strings' array represents the string value till a variable!

so 'ABC' and 'DEF' will populate the 'strings' param.
and ${'V1'} and ${'V2'} will pass as 'value1' and 'value2' parameters

1st item -> 'ABC ' (till it reaches the ${'V1'} variable)
2nd item -> ' - '  (till it reaches the ${'V2'} variable)
3rd item -> ' DEF' (the rest of the string)

tip:
we can use ...keys syntax to get the template variables as dynamic array
function myTaggedLiteral(strings, ...keys) {
    console.log(strings); // [ 'ABC ', ' - ', ' DEF' ]
    console.log(keys);    // [ 'V1', 'V2' ]
}

---

// reusable templates

syntax:
function <tagName>(strings, ...keys) {
    return function(data){
		...
	}
}

const <templateName> = <tagName>`..${'<key>'}.. `;
let <data> = {
	...
	...
}

let result = <templateName>(<data>);

steps:
1. create a tagged template which returns a new function which gets a data object to bind 
2. create a template function which based on the tagged template from chapter 1. 
   it creates the template content. it sends placeholders corresponding the data object properties. 
   note that it sends a constant values (which represent the data object properties) as variables! 
3. execute the template function from chapter 2 and pass on the data object (bind the data into the template!)

sample:
// step 1
function studentTag(strings, ...keys) {
    return function(student){
		let temp = strings.slice();
		keys.forEach((key, i) => {
            temp[i] = temp[i] + student[key];
        });
		return temp.join('');
	}
}

// step 2
const studentTemplate = studentTag`
	<h3>${'name'}</h3>
	<p>a ${'field'} student at ${'collegeName'}</p>`;

// step 3
let student1 = { 
	name: 'roby', 
	field: 'computer science', 
	collegeName: 'ruppin' 
};

let student2 = {
	name: 'avi', 
	field: 'communication', 
	collegeName: 'ort' 
};

console.log(studentTemplate(student1));
console.log(studentTemplate(student2));

Modules
-------
see 'NodeJS/Export & Import'

note: 
NodeJS uses CommonJS Module syntax (module.exports) not ES6 module syntax (export keyword).
