let vs var
==========
let variable is limited in scope to the block, statement, or expression on which it is used. 
let is a block scope.

var variable is globally to an entire enclosing function regardless of block scope. 
var is a function scope.

we can't declare twice the same variable using let. 
the following exception will be thrown:
Uncaught SyntaxError: Identifier 'x' has already been declared
see 'same variable declaration'

we can't use a variable defined using let out of its scope. 
the following exception will be thrown:
Uncaught ReferenceError: x is not defined 
see 'out of scope variable'

let doesn't add a property to the window object 
see 'window object'

let declaration is not hoisted.
see 'hoisted variables'

-------

// same variable declaration

var a = 1;
var a = 2; // ok (a=2)

- vs -

let b = 1;
let b = 2; // exception ('b' has already been declared)

-------

// function and block same-name variables
// inner 'for' block using same local variable name
// with both function level and block level declarations

var i = 20;
for (var i = 0; i < 4; i++);
console.log(i); // 4

- vs -

var i = 20;
for (let i = 0; i < 4; i++);
console.log(i); // 20

-------

// out of scope variable 
// inner 'for' block using new local variable
// without a function level declarations
// note: 'i' has defined in the block and still recognize in the function 

for (var i = 0; i < 4; i++);
console.log(i); // 4

- vs -

for (let i = 0; i < 4; i++);
console.log(i); // i is not defined   

-------

// function and block same-name variables

var x = 1;
if (x === 1) {
  var x = 2;
  console.log(x); // 2
}
console.log(x); // 2

- vs -

let x = 1;
if (x === 1) {
  let x = 2;
  console.log(x); // 2
}
console.log(x); // 1

-------

// window object
// let doesn't add a property to the window object 

var a = 'global';
let b = 'global';

console.log(this.a); // 'global'
console.log(this.b); // undefined

-------

// hoisted variables
// let is not hoisted as opposed to var

function fun() {
  console.log(a); // undefined  
  var a = 1;  
}

/*
	function fun() {
	  var a;
	  console.log(a); 	  
	  a = 1;	  
	}
*/

- vs -

function fun() {  
  console.log(b); // ReferenceError  
  let b = 2;
}

/*
	function fun() {	  	   
	  console.log(b); 	  
	  let b = 2;
	}
*/