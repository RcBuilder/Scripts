constructor
-----------
// also see 'js Object.prototype.txt'


  all types have a constructor property which is part of the inheritance. 
  tip: we can use it to find the variable type
  
  var o1 = {};
  console.log(o1.constructor);  // Object
  
  var o2 = new Object;
  console.log(o2.constructor); // Object 
  
  var a1 = [];
  console.log(a1.constructor); // Array
  
  var a2 = new Array;
  console.log(a2.constructor); // Array
  
  var n1 = new Number(3);
  console.log(n1.constructor); // Number
  
  var n2 = 3;
  console.log(n2.constructor); // Number
  
  var n3 = 3.5;
  console.log(n3.constructor); // Number
  
  var s1 = new String('Hello');
  console.log(s1.constructor); // String
  
  var s2 = 'Hello';
  console.log(s2.constructor); // String
  
  var b = true;
  console.log(b.constructor); // Boolean
  
  var rgx = /\d+/g;
  console.log(rgx.constructor); // RegExp

  -- 

  get the class name using constructor:
  we can use the 'name' function property of the constructor to get the instance's class name

  className = function() {  
	return this.constructor.name;
  }

  example:
  var b = new classB();  
  console.log(b.constructor.name);  // classB

  --

  clone using constructor:
  we can use it for clonning an object

  clone = function() {  
	return new this.constructor(); // create a new instance
  }

  example:
  function classA(){ 
    this.name = 'A';   
    console.log('IN classA');
  }

  var a = new classA();
  var copy = new a.constructor();
  console.log(copy.name);  // A

  --

  constructor with inheritance:
  foreach object, the default constructor is a reference to the prototype object.
  with that in mind, when using sub-class - we'll have to set the constructor manually, 
  if not - it will reference the parent class so ant attempt to call the constructor will perform an instance of the parent and NOT the sub-class!

  function classA(){ 
    this.name = 'A';       
  }
  function classB(){ 
      this.name = 'B';      
  }
  classB.prototype = Object.create(classA.prototype);  // B:A 
  /// classB.prototype.constructor = classB;
    
  var b = new classB();  
  console.log(b.constructor === classA);  // TRUE
  console.log(b.constructor === classB);  // FALSE
  
  var copy = new b.constructor();
  console.log(copy.name); // A!!!


  note!
  to solve the issue above, just set the constructor manually to point classB:
  classB.prototype.constructor = classB;

  -- 

  constructor vs instanceof:  
  the instanceof checks an object against the other object itself and it's prototype chain!
  constructor checks an object only against its constractor (which can only be one!)

  in the example below, classB inherit from classA.
  note that 'instanceof' returns TRUE for both classA and classB whereas 'constructor' is unique and returns TRUE only for classB 
  (assuming we fixed it manually - see 'constructor with inheritance')
  
  function classA(){ }
  function classB(){ }

  classB.prototype = Object.create(classA.prototype);  // B:A 
  classB.prototype.constructor = classB;  // update manually the constructor

  var b = new classB();
  console.log(b instanceof classA);  // TRUE 
  console.log(b instanceof classB);  // TRUE 
  
  console.log(b.constructor === classA);  // FALSE
  console.log(b.constructor === classB);  // TRUE 

  --

  example:

  function classA(){ 
    this.name = 'A';   
    console.log('IN classA');
  }
  function classB(){ 
      this.name = 'B';
      console.log('IN classB');
  }
  classB.prototype = Object.create(classA.prototype);  // B:A 
  classB.prototype.constructor = classB;  // update manually the constructor
  
  var a = new classA();
  var copyA = new a.constructor();  // create new instance of a (clone a)
  console.log(copyA.name);  // A
  
  var b = new classB();
  console.log(b.name);  // B
  console.log(b.constructor.name);  // classB
  
  var copyB = new b.constructor(); // create new instance of b (clone b)
  console.log(copyB.name);  // B
  
  console.log(b instanceof classA);  // TRUE 
  console.log(b instanceof classB);  // TRUE 
  
  console.log(b.constructor === classA);  // FALSE
  console.log(b.constructor === classB);  // TRUE 