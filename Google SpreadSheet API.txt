
GOOGLE DEVELOPERS:
https://console.developers.google.com/
Enable 'Google Sheets API'
                                        
API KEY:
* GOOGLE DEVELOPERS -> Credential -> get the api key
* e.g: AIzaSyApPPyvtRCgszUj4VxccfbrSXtuvUevatM
* Read Only permission!! // use 'Service Account Key' instead for full permissions
        
SERVICE ACCOUNT KEY:
1. GOOGLE DEVELOPERS -> Credential -> Service Account Key -> fill data 
2. download created json file and move it into your project 
3. F4 (properties) -> Copy to output directory -> set to ALWAYS   

note! 
need to add the service account as a permitted user to access the sheet! 
go to the developer console -> find the service account -> take it's 'Service account ID' (alternatively: also appears in the credentials.json file)
open the sheet -> share -> advanced -> refer the 'Service account ID' as a user, add it and set the allowed permissions 
e.g: general@api-project-635489688114.iam.gserviceaccount.com  		
		            
note! 
the best approach for Server 2 Server communication 
(no user authentication popups)
					 
NuGet:
Install-Package Google.Apis.Sheets.v4
                
Docs:
https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets
https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.sheets
https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values
https://developers.google.com/sheets/api/samples/

-----------------------------------------------------------------------------
// CODE SAMPLE 
var scopes = new string[] { SheetsService.Scope.Spreadsheets };
var credentialsFile = string.Concat(AppDomain.CurrentDomain.BaseDirectory, "\\", "credentials.json");

var credential = GoogleCredential.FromStream(
    new FileStream(credentialsFile, FileMode.Open)
).CreateScoped(scopes);

var service = new SheetsService(new BaseClientService.Initializer()
{
    HttpClientInitializer = credential,
    ApplicationName = "test",
});
        
// code here ...

-----------------------------------------------------------------------------
// ACTIONS
service.Spreadsheets.Values.Get(string SpreadsheetId, string Range);
service.Spreadsheets.Values.Update(ValueRange body, string SpreadsheetId, string Range);
service.Spreadsheets.Values.Append(ValueRange body, string SpreadsheetId, string Range);

-----------------------------------------------------------------------------
// SERVICE FACTORY
private static SheetsService service = null;

public static SheetsService Produce()
{
    if (service != null) 
        return service;

    //lazy loading ...

    var scopes = new string[] { SheetsService.Scope.Spreadsheets };
    var credentialsFile = string.Concat(AppDomain.CurrentDomain.BaseDirectory, "\\", "credentials.json");

    var credential = GoogleCredential.FromStream(
        new FileStream(credentialsFile, FileMode.Open)
    ).CreateScoped(scopes);

    service = new SheetsService(new BaseClientService.Initializer()
    {
        HttpClientInitializer = credential,
        ApplicationName = "SpreadSheet Service",
    });

    return service;
}

-----------------------------------------------------------------------------
// GET STRUCTURE
var apiGetRequest = service.Spreadsheets.Values.Get(AppConfig.SpreadSheetId, Range); 
var apiGetResponse = apiGetRequest.Execute();

var apiGetResponseRows = apiGetResponse.Values;

if (apiGetResponseRows == null)
    return;

for (var i = 1 /*skip header*/; i < apiGetResponseRows.Count; i++)
{                
    var row = apiGetResponseRows[i];
	
	// code ...    
	// get column value: row[0], row[1] etc.
}

-----------------------------------------------------------------------------
// UPDATE STRUCTURE
var values = new List<object> { 
    // values ...
};

var apiUpdateRequest = service.Spreadsheets.Values.Update(new ValueRange
{
    MajorDimension = "ROWS", // COLUMNS/ ROWS
    Values = new List<IList<object>> { 
        values 
    }
}, AppConfig.SpreadSheetId, Range);

apiUpdateRequest.ValueInputOption = SpreadsheetsResource.ValuesResource.UpdateRequest.ValueInputOptionEnum.RAW;
var apiUpdateResponse = apiUpdateRequest.Execute();

return apiUpdateResponse.UpdatedColumns.HasValue ? apiUpdateResponse.UpdatedColumns.Value : 0;

-----------------------------------------------------------------------------
// APPEND STRUCTURE
var values =  new List<IList<object>>(); 
Enumerable.Range(0, Count).ToList().ForEach((index) =>{
    values.Add(new List<object> { 
        // values ...
    });
});    

var apiAppendRequest = service.Spreadsheets.Values.Append(new ValueRange
{
    MajorDimension = "ROWS", // COLUMNS/ ROWS
    Values = values
}, AppConfig.SpreadSheetId, Range); // usually "Sheet1"

apiAppendRequest.ValueInputOption = SpreadsheetsResource.ValuesResource.AppendRequest.ValueInputOptionEnum.RAW;
var apiAppendResponse = apiAppendRequest.Execute();

return apiAppendResponse.Updates.UpdatedRows.HasValue ? apiAppendResponse.Updates.UpdatedRows.Value : 0;

-----------------------------------------------------------------------------
// RANGE SAMPLES
Sheet1!L2  // [update] L2 column on sheet1 is the starting point
Sheet1  // [append]
Sheet1!A1:B  // [get] all data in column A
Sheet1!A1:L  // [get] all data from A-K

-----------------------------------------------------------------------------
// IMPLEMENTATION (ATDConference services app)
namespace Services.Controllers
{
    [LogTraffic]
    [EnableCors(
        origins: "http://www.atdconf.com,http://localhost:2072", 
        headers: "*", 
        methods: "*"
    )]
    public class SpreadSheetController : ApiController
    {
        private static Random Rnd = new Random();

        [HttpPost]
        [Route("api/SpreadSheet/author/add")]
        /*
            POST http://localhost:4338/api/SpreadSheet/author/add 
          
            request:            
            { 
                "rowId": 1234, 
                "name": "Roby", 
                "email" : "blabla@gmail.com", 
                "phone":"054-5555555", 
                "ticketA": 2,  
                "ticketB": 1,
                "ticketC": 1
            }
        */
        public int AddAuthorData([FromBody]AuthorDataRequest request)
        {
            var service = SpreadSheetServiceFactory.Produce();
            var values =  new List<IList<object>>();               

            // generate participants rows                
            Enumerable.Range(0, request.TicketA).ToList().ForEach((index) => {
                values.Add(new List<object> { 
                    request.RowId, 
                    request.Name, 
                    request.Phone, 
                    request.Email, 
                    request.TicketA, 
                    request.TicketB, 
                    request.TicketC,                 
                    "", 
                    "",
                    "",
                    Rnd.Next(100000),                     
                    "", 
                    "", 
                    "",
                    "",
                    "",
                    "TicketA"
                });
            });

            Enumerable.Range(0, request.TicketB).ToList().ForEach((index) =>{
                values.Add(new List<object> { 
                    request.RowId, 
                    request.Name, 
                    request.Phone, 
                    request.Email, 
                    request.TicketA, 
                    request.TicketB, 
                    request.TicketC,                 
                    "", 
                    "",
                    "",
                    Rnd.Next(100000),                     
                    "", 
                    "", 
                    "",
                    "",
                    "",
                    "TicketB"
               });
            });

            Enumerable.Range(0, request.TicketC).ToList().ForEach((index) =>{
                values.Add(new List<object> { 
                    request.RowId, 
                    request.Name, 
                    request.Phone, 
                    request.Email, 
                    request.TicketA, 
                    request.TicketB, 
                    request.TicketC,                 
                    "", 
                    "",
                    "",
                    Rnd.Next(100000),                     
                    "", 
                    "", 
                    "",
                    "",
                    "",
                    "TicketC"
               });
            });    

            var apiAppendRequest = service.Spreadsheets.Values.Append(new ValueRange
            {
                MajorDimension = "ROWS", // COLUMNS/ ROWS
                Values = values
            }, AppConfig.SpreadSheetId, "Sheet1");

            apiAppendRequest.ValueInputOption = SpreadsheetsResource.ValuesResource.AppendRequest.ValueInputOptionEnum.RAW;
            var apiAppendResponse = apiAppendRequest.Execute();

            return apiAppendResponse.Updates.UpdatedRows.HasValue ? apiAppendResponse.Updates.UpdatedRows.Value : 0;
        }

        [HttpPost]
        [Route("api/SpreadSheet/participant/update")]
        /*
            POST http://localhost:4338/api/SpreadSheet/participant/update 
          
            request:
            { 
                "rowId": 1234, 
                "pId": 3344,
                "name": "Avi", 
                "email" : "blabla@gmail.com", 
                "phone":"054-5555555", 
                "jobTitle": "Developer",
                "company": "Celcom", 
                "ticket": "TicketA"
            }
        */
        public int UpdateParticipantData([FromBody]ParticipantDataRequest request)
        {
            var service = SpreadSheetServiceFactory.Produce();

            var rowNumber = SpreadSheetServiceHelper.FindParticipantRowNumber(service, request.RowId, request.pId);

            var values = new List<object> { 
                request.Name, request.Phone, request.Email, request.JobTitle, request.Company
            };

            var apiUpdateRequest = service.Spreadsheets.Values.Update(new ValueRange
            {
                MajorDimension = "ROWS", // COLUMNS/ ROWS
                Values = new List<IList<object>> { 
                    values 
                }
            }, AppConfig.SpreadSheetId, string.Format("Sheet1!L{0}", rowNumber)); // J2 = starting point

            apiUpdateRequest.ValueInputOption = SpreadsheetsResource.ValuesResource.UpdateRequest.ValueInputOptionEnum.RAW;
            var apiUpdateResponse = apiUpdateRequest.Execute();

            return apiUpdateResponse.UpdatedColumns.HasValue ? apiUpdateResponse.UpdatedColumns.Value : 0;
        }

        [HttpPost]
        [Route("api/SpreadSheet/payment/update")]
        /*
            POST http://localhost:4338/api/SpreadSheet/payment/update 
          
            request:
            { 
                "rowId": "1234", 
                "invoice": "1234A", 
                "status": "SUCCESS" 
            }
        */
        public int UpdatePaymentData([FromBody]PaymentDataRequest request)
        {
            var service = SpreadSheetServiceFactory.Produce();

            var rowNumber = SpreadSheetServiceHelper.FindRowNumber(service, request.RowId);

            var values = new List<object> { 
                request.Status, request.Invoice, request.Amount
            };

            var apiUpdateRequest = service.Spreadsheets.Values.Update(new ValueRange
            {
                MajorDimension = "ROWS", // COLUMNS/ ROWS
                Values = new List<IList<object>> { 
                    values 
                }
            }, AppConfig.SpreadSheetId, string.Format("Sheet1!H{0}", rowNumber)); // H2 = starting point

            apiUpdateRequest.ValueInputOption = SpreadsheetsResource.ValuesResource.UpdateRequest.ValueInputOptionEnum.RAW;
            var apiUpdateResponse = apiUpdateRequest.Execute();

            return apiUpdateResponse.UpdatedColumns.HasValue ? apiUpdateResponse.UpdatedColumns.Value : 0;
        }

        [HttpGet]
        [Route("api/SpreadSheet/{rowId}/tickets")]
        /*
            GET http://localhost:4338/api/SpreadSheet/34567/tickets 
            
            response:
            {
	            "rowId": 31519,
	            "ticketA": {
		            "count": 1,
		            "participants": [
			            {
				            "rowId": 31519,
				            "pId": 43239,
				            "name": "-",
				            "email": "-",
				            "phone": "-",
				            "jobTitle": "-",
				            "company": "-",
				            "ticket": "TicketA"
			            }
		            ]
	            },
	            "ticketB": {
		            "count": 2,
		            "participants": [
			            {
				            "rowId": 31519,
				            "pId": 24978,
				            "name": "-",
				            "email": "-",
				            "phone": "-",
				            "jobTitle": "-",
				            "company": "-",
				            "ticket": "TicketB"
			            }
		            ]
	            },
	            "ticketC": {
		            "count": 2,
		            "participants": [
			            {
				            "rowId": 31519,
				            "pId": 78304,
				            "name": "-",
				            "email": "-",
				            "phone": "-",
				            "jobTitle": "-",
				            "company": "-",
				            "ticket": "TicketC"
			            }
		            ]
	            }
            }
        */
        public TicketsDataResponse GetTicketsData(int rowId)
        {
            var service = SpreadSheetServiceFactory.Produce();

            var rowsData = SpreadSheetServiceHelper.FindRows(service, rowId);
            if (rowsData == null) 
                return null;

            var response = new TicketsDataResponse{ 
                RowId = rowId,
                TicketA = new TicketData(),
                TicketB = new TicketData(),
                TicketC = new TicketData()
            };

            foreach (var rowData in rowsData) {
                var participant = new ParticipantDataRequest
                {
                    RowId = rowId,
                    pId = Convert.ToInt32(rowData[10]),                    
                    Name = rowData[11].ToString(),
                    Phone = rowData[12].ToString(),
                    Email = rowData[13].ToString(),
                    JobTitle = rowData[14].ToString(),
                    Company = rowData[15].ToString(),
                    TicketName = rowData[16].ToString()
                };

                switch (participant.TicketName.ToLower()) {
                    case "ticketa": 
                        response.TicketA.Participants.Add(participant);
                        break;
                    case "ticketb":
                        response.TicketB.Participants.Add(participant);
                        break;
                    case "ticketc":
                        response.TicketC.Participants.Add(participant);
                        break;
                }
            }

            return response;
        }
    }
}

---

namespace Services.App_Code
{
    public class SpreadSheetServiceFactory
    {
        private static SheetsService service = null;

        public static SheetsService Produce()
        {
            if (service != null) 
                return service;

            //lazy loading ...

            var scopes = new string[] { SheetsService.Scope.Spreadsheets };
            var credentialsFile = string.Concat(AppDomain.CurrentDomain.BaseDirectory, "\\", "credentials.json");

            var credential = GoogleCredential.FromStream(
                new FileStream(credentialsFile, FileMode.Open)
            ).CreateScoped(scopes);

            service = new SheetsService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = "SpreadSheet Service",
            });

            return service;
        }
    }
}

---

namespace Services.App_Code
{
    public class SpreadSheetServiceHelper
    {
        public static int FindRowNumber(SheetsService service, int RowId)
        {
            var apiGetRequest = service.Spreadsheets.Values.Get(AppConfig.SpreadSheetId, "Sheet1!A1:B"); // all data in column A
            var apiGetResponse = apiGetRequest.Execute();

            var apiGetResponseRows = apiGetResponse.Values;

            var rowNumber = -1;
            if (apiGetResponseRows == null)
                return rowNumber;

            // find the row number by value
            for (var i = 1 /*skip header*/; i < apiGetResponseRows.Count; i++)
            {                
                var row = apiGetResponseRows[i];
                if (Convert.ToInt32(row[0]) == RowId)
                {
                    rowNumber = i + 1; // convert index to sheet number
                    break;
                }
            }
            
            return rowNumber;
        }

        public static int FindParticipantRowNumber(SheetsService service, int RowId, int ParticipantId)
        {
            var apiGetRequest = service.Spreadsheets.Values.Get(AppConfig.SpreadSheetId, "Sheet1!A1:L"); // all data from A-K
            var apiGetResponse = apiGetRequest.Execute();

            var apiGetResponseRows = apiGetResponse.Values;

            var rowNumber = -1;
            if (apiGetResponseRows == null)
                return rowNumber;

            // find the row number by value
            for (var i = 1 /*skip header*/; i < apiGetResponseRows.Count; i++)
            {
                var row = apiGetResponseRows[i];
                if (Convert.ToInt32(row[0]) == RowId && Convert.ToInt32(row[10]) == ParticipantId)
                {
                    rowNumber = i + 1; // convert index to sheet number
                    break;
                }
            }

            return rowNumber;
        }

        public static int GetLastRowNumber(SheetsService service)
        {
            var apiGetRequest = service.Spreadsheets.Values.Get(AppConfig.SpreadSheetId, "Sheet1!A2:B"); // all data in column A
            var apiGetResponse = apiGetRequest.Execute();

            var apiGetResponseRows = apiGetResponse.Values;
            return apiGetResponseRows.Count;            
        }

        public static List<object> FindRow(SheetsService service, int RowId)
        {
            var rows = FindRows(service, RowId);
            if (rows == null)
                return null;

            return rows.FirstOrDefault().ToList();            
        }
        
        public static IEnumerable<IList<object>> FindRows(SheetsService service, int RowId)
        {
            var apiGetRequest = service.Spreadsheets.Values.Get(AppConfig.SpreadSheetId, "Sheet1!A2:Z"); // all data in sheet
            var apiGetResponse = apiGetRequest.Execute();

            var apiGetResponseRows = apiGetResponse.Values;
            if (apiGetResponseRows == null)
                return null;

            return apiGetResponseRows.Where(r => Convert.ToInt32(r[0]) == RowId).ToList();
        }
    }
}