******************************
******** Nativescript ********
******************************

==============================
- Reference
- Forum
- Install
- About
- Android Device
- Android Virtual Device (AVD)
- Nativescript CLI
- Create A New Project
- Project Files
- Run The APP
- DEBUG
- LiveSync
- NativeScript & Visual Studio
- UI Layouts
- UI Components
- Dialogs
- Events
- JS Modules
- Plugins
- Working With Nativescript
- systemIcon
- Platform Specific Capabilities
- CSS
- Launch Process
- iOS
- Sidekick APP
- MarketPlace
- Playground
- Issues
- Code Samples
==============================

Reference
---------
https://docs.nativescript.org
https://docs.nativescript.org/api-reference/globals

Forum
-----
https://forum.nativescript.org

Install
-------
install the nativescript CLI:
>npm install -g nativescript

note! 
make sure npm (node package manager) installed on your machine, 
if not, install it (node-v8.11.4-x64.msi)

About
-----
by Telerik.
an open-source framework which uses the Javascript Engine to generate a Native Application! 
it adds a converting layer which translates javascript code into native runtime.
allows us to create a single app which then can be complied as APK package (android), IPA package (iOs) and XAP (windows).
it uses an XML to generate the UI and allows us to use regular CSS which later be translated 
into native stylish rules! (note: not ALL the CSS rules have mapped).

How it works:
the framework uses javascript with Css-like and XML to write uniform code which fits to all mobile operating-systems alike. 
it doing so by mapping each javascript Code, Css rules and XML tags to the corresponding native code of the target app.
meaning, a build for iOS will be translated into a different code than a build which Android is the target. 

Motto:
"Write Once, Run everywhere"
Share 100% code between iOs, Android and Windows.

Structure:
Javascript Engine > Javascript 2 Native runtime > Native UI + APIs

Support:
- Javascript
- TypeScript
- Angular 

Android Device
--------------
we can connect via usb an android device for debugging purposes.
in order to do so, we'll have to turn on the 'Developer options' and enable the 'USB debugging' feature.

Virtual Devices:
see 'Android Virtual Device (AVD)'

Android Virtual Device (AVD)
----------------------------
in order to debug an app on android, we have to configure a AVD on our machine 

Physical Devices:
see 'Android Device'

AVD Manager using Android Studio:
- open Android Studio
- (menu) Tools > AVD Manager

- actions:
  run - use the green 'play' button to run the emulator.
  stop - use the arrow button > stop
  clear - use the arrow button > Wipe Data
  duplicate - use the arrow button > duplicate

- note!
  behind the scene, the android studio interface runs the avd manager tool (see 'AVD Manager Tool')

- default location:
  C:\Users\[User]\.android\avd

AVD Manager Tool:
file avdmanager.bat.
use the avdmanager tool to create and manage android virtual devices (AVDs) from the command line.
this tool is provided in the android SDK. 
located within the %ANDROID_HOME%\tools\bin folder in the SDK.

Create an AVD using Android Studio:
- open Android Studio
- (menu) Tools > AVD Manager
- click on 'Create Virtual Device' button (bottom-left corner)
- choose 'Category' (TV, Phone, Tablet etc.) from the left pane
- choose pre-defined device from the list presented in the right pane > next
- select the system image
- set AVD name and some more settings (if needed) > finish

- tip: custom hardware profiles
  we can generate an AVD based on a custom hardware (instead of using the built-in suggested hardwares) by using 
  the 'New Hardware Profile' button underneath the Category section! 

Create an AVD using the CLI:
- syntax
  // using the avdmanager tool
  > avdmanager create avd -n [AVD Name] -k [options] -p [path]

- sample  
  > avdmanager create avd -n testAVD -k "system-images;android-25;google_apis;x86" -p "D:\\"

Options:
- Hardware Profile  // Profile - Nexus 5, Pixel 2 etc.
- System Image  // OS - Oreo, Lollipop, Marshmallow etc.
- Startup Orientation  // Portrait or Landscape
- Camera  // enable camera - Back-Facing/ Front-Facing Camera 
- Network: Speed  // network protocol to determine the speed of data transfer - GSM, LTE etc. 
- Network: Latency  // network Latency
- Memory and Storage: RAM  // amount of RAM on the device 
- Memory and Storage: VM Heap  // VM heap size
- Memory and Storage: Internal Storage  // amount of nonremovable memory space available on the device
- Memory and Storage: SD Card  // amount of removable memory space available to store data on the device
- Device Frame: Enable Device Frame  // enable a frame around the emulator window
- Custom Skin Definition  // the emulator's skin
- Keyboard: Enable Keyboard Input  // to use your hardware keyboard to interact with the emulator

Nativescript CLI
----------------
tns = Telerik NativeScript

commands:
> tns // help
> tns --help // help
> tns help // help (html view)
> tns /? // help (html view)

> tns create [projectName]
> tns create [projectName] --template [templateName]
> tns run [android|ios]  // run the app
> tns run --device [deviceId] // run the app on specific connected device (note: use tns device command to get the device id)
> tns device  // list of connected devices (physical and virtual)
> tns device [android|ios] 
> tns plugin add [plaginName]  // add plugin

> tns debug [android|ios]  // debug a device
> tns debug [android|ios] --bundle  // debug bundled app

stop tns run command:
> ctrl + c

samples:
// create an HelloWorld project with blank template 
> tns create HelloWorld --template tns-template-blank  

// run the app on an android emulator 
// also see 'Android Virtual Device (AVD)'
> tns run android  

// run the app on an ios emulator 
// only available on MAC!
> tns run ios

// debug android device
> tns debug android  

// TODO 

Create A New Project
--------------------
using NPM: 
> tns create [ProjectName]
> tns create project1  // e.g

Project Files
-------------
Root
  - app
  	- App_Resources  // resources (icons etc.)
	  - Android
	  - iOS

	- app.css  // app global style
	- app.js  // app starting point

	- main-page.css  // page css (style) 
	- main-page.js   // page code (logic)
	- main-page-view-model.js   // page view-model
	- main-page.xml	 // page layout (UI)

	- package.json  // packages
    - node_modules  // npm modules
    - tns_modules  // nativescript modules

  - platforms  // the generated native code
    - android 
	- ios

note!
in NativeScript, a .js file with the same name as an XML file is known as a code-behind file.

sample:
// main-page-view-model.js
var Observable = require("data/observable").Observable;
function createViewModel() { 
    var viewModel = new Observable();	
    ...
	...
    return viewModel;
}
exports.createViewModel = createViewModel;

// main-page.js
var createViewModel = require("./main-page-view-model").createViewModel;
function onNavigatingTo(args) {    
    var page = args.object;
    page.bindingContext = createViewModel();
}
exports.onNavigatingTo = onNavigatingTo;

// main-page.xml
<Page xmlns="http://schemas.nativescript.org/tns.xsd" navigatingTo="onNavigatingTo" class="page">
	...
</Page>

Run The APP
-----------
using NPM: 
> tns run  // all connected devices/emulators
> tns run android  // target specific platform
> tns run ios  // target specific platform
> tns run ios --emulator

to connect to android device or AVD see 'Android Device'

DEBUG
-----
using devTools: 
> tns debug android

the above command generates a URL to copy from the console, 
copy it and paste it into chrome and use the devTools (F12) to start debugging!

--

using ConsoleLog:
use this command write any message to the console, similar to the web version but the messages will be written to the terminal 
console.log([message]);

another great command for debugging is console.dir([object]) which creates a dump of the object. 
very handy when we have an object and we need to log it's content (json serialization).
note that for complex types, the console.log prints [object Object] and NOT the content!

// [object Object]
console.log({ id: 1001, name: 'someName' }); 

/*
	{
        'id': '1001',
        'name': 'someName'
    }
*/
console.dir({ id: 1001, name: 'someName' });

--

notes: 
- to debug an physical device see 'Android Device'
- use the tns device command to see the list of connected devices (physical and virtual)

--

error handling:
exception will be logged to the terminal with the relevant message and the exact location.

// e.g
JS ERROR Error: Building UI from XML. @file:///app/main-page.xml:2:50
     > close tag


LiveSync
--------
note that the command 'tns run' not only starts the app, it also activates the live sync mode which monitor the code for changes! 

NativeScript & Visual Studio
----------------------------

Nativescript Extension For Visual Studio Code:
- find nativescript extension at visual studio's marketplace:
  https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript
- install it

reference: 
also see 'Visual Studio Code'

---

SideKick Extension For Visual Studio:
- open visual studio
- (menu) Tools > Extensions & updates
- (tab) Online 
- search for 'nativescript'
- download 'nativeScript SideKick for VS'
- run the downloaded installation file

a new 'sidekick' menu will be added to the top menu!

UI Layouts
----------
- Absolute  
  - about: 
    x,y coordinates to specify the components position within the layer

  - reference:
    https://docs.nativescript.org/api-reference/modules/_ui_layouts_absolute_layout_

  - define the layout inner components using the following properties:
    left
	top
	height
	width

  - sample:
    <AbsoluteLayout>
        <Label text="Component" class="h3 text-center" backgroundColor="#0099CC" left="10" top="10" height="50" width="100" />
        <Label text="Component" class="h3 text-center" backgroundColor="#C3C3E5" left="10" top="50" height="50" width="100" />
        <Label text="Component" class="h3 text-center" backgroundColor="#8C489F" left="90" top="20" height="50" width="100" />
    </AbsoluteLayout> 

- Dock      
  - about: 
    screen location (top, bottom, right, left, center) to specify the components position within the layer

  - reference:
    https://docs.nativescript.org/api-reference/modules/_ui_layouts_dock_layout_

  - dock property: 
    define the component position using one of the following values
    left
	right
	bottom
	top	

  - stretchLastChild property:     
    determines whether the last component will be stretched or not.	
	value can be true or false 

  - sample:
    <DockLayout stretchLastChild="true">
        <Label text="Component" class="h3 text-center" backgroundColor="#0099CC" dock="left" />
        <Label text="Component" class="h3 text-center" backgroundColor="#C3C3E5" dock="right" />
        <Label text="Component" class="h3 text-center" backgroundColor="#8C489F" dock="bottom" />
        <Label text="Component" class="h3 text-center" backgroundColor="#B3B3D7" dock="top" />
        <Label text="Component" class="h3 text-center" backgroundColor="#CCFFFF" height="50" />
    </DockLayout> 

- Grid
  - about: 
    grid/table based layer 

  - reference:
  - sample:

- Stack     
  - about: 
    one on top of the other

  - reference:
  - sample:

- Wrap
  - about: 
    wraps elements 

  - reference:
  - sample:

- Flexbox
  - about: 
    a single-direction layout concept. 
	either in horizontal rows or vertical columns.

  - reference:
    https://docs.nativescript.org/api-reference/classes/_ui_layouts_flexbox_layout_.flexboxlayout
	https://docs.nativescript.org/api-reference/modules/_ui_layouts_flexbox_layout_

  - flexDirection property:
    define the layout direction/ behaviour using one of the following values		
	row
	row-reverse  
	column
	column-reverse

	note! 
	when using the 'reverese' mode - the last item will be presented first and the first will be at the end.

  - flexGrow property
    determines the remaining space distribution between the items. not their ratio!!!
	e.g: 
	itemA has flexGrow 1 
	itemB has flexGrow 3
	the container size is 500px, each item takes 200px
	-
	the remaining space is 100px (500 - (200 * 2))
	each flex-grow unit is 25px (100 / (1 + 3))
	-
	itemA total size will be 225px (200 + (1 * 25))
	itemB total size will be 275px (200 + (3 * 25))

  - tip:
    in 'row' direction, setting height on a single item will affect ALL the others. 

  - sample:
    <FlexboxLayout flexDirection="column">
        <Label text="Component" class="h3 text-center" backgroundColor="#0099CC" flexGrow="1" />
        <Label text="Component" class="h3 text-center" backgroundColor="#C3C3E5" flexGrow="1" />
        <Label text="Component" class="h3 text-center" backgroundColor="#8C489F" flexGrow="1" />
    </FlexboxLayout>

	<FlexboxLayout flexDirection="row">  
        <Label text="Component" class="h3 text-center" backgroundColor="#0099CC" flexGrow="1" />
        <Label text="Component" class="h3 text-center" backgroundColor="#C3C3E5" flexGrow="1" />
        <Label text="Component" class="h3 text-center" backgroundColor="#8C489F" flexGrow="1" />
    </FlexboxLayout>
  
note! 
the power of layouts is not by the individual layout but with the collaboration of them together. 
a proper way of creating a page is by using a few/ all layouts one inside the other. 

e.g: 
a Stack layout as Root whereas in each layout (in the Stack) there's inner layout of different type (Grid etc.)

- Stack Layout
	- Grid Layout
		- Label Element 
		- TextField Element 
- Stack Layout
	- ListView Element
- Stack Layout
	- Grid Layout
		- More Elements

UI Components
-------------
// see 'UI Layouts'
AbsoluteLayout
DockLayout
GridLayout
StackLayout
WrapLayout
FlexboxLayout

- ScrollView
  - reference:
    https://docs.nativescript.org/api-reference/modules/_ui_scroll_view_

  - about:
    allows us to add scroll to the page or to a specific container. 
	display a scrollable area by wrapping the content with a ScrollView tag.

  - orientation property:    
    horizontal
	vertical

  - scroll event:    
    <ScrollView scroll="onScroll($event)">
		....
	</ScrollView>

  - sample:
    <ScrollView orientation="vertical">
		<StackLayout class="p-20">
		   ...
		   ...
		</StackLayout>
	</ScrollView>


- ActionBar
  - reference:
    https://docs.nativescript.org/api-reference/modules/_ui_action_bar_

  - android.position:
    left 
	right 
	popup // items that will be shown under the 3 dots right menu

  - systemIcon
    see 'systemIcon'

  - ActionBar Title
    title 
	android.icon  // add an icon 
	android.iconVisibility 
	
  - sample:
    <ActionBar title="Title" android.icon="res://icon" android.iconVisibility="always">		
		<ActionItem text="Menu Item" android.position="popup"></ActionItem>        
        <ActionItem text="Menu Item" android.position="popup"></ActionItem>        

        <ActionItem text="Item"></ActionItem>
		<ActionItem ios.systemIcon="12" android.systemIcon="ic_menu_search"></ActionItem>	        				
	</ActionBar>  

- Button  
  - reference:
    https://docs.nativescript.org/api-reference/classes/_ui_button_

  - sample:
    <Button text="Button" class="btn btn-primary btn-active" tap="{{ onTap }}" />

	viewModel.onTap = function () { 
		...
	}

- Label
  - reference:    
	https://docs.nativescript.org/api-reference/classes/_ui_label_

  - sample:
    <Label text="Label" class="h3 text-center" />

- TextField
- Switch
- Progress
- ActivityIndicator
- Animations
- Image
  - reference:
    https://docs.nativescript.org/api-reference/modules/_ui_image_

  - src property:
	use 'http://' prefix to load image from URL 
	use 'res://' prefix to load image from resource
	use '~/' prefix to load image from local file system
	
  - stretch property:
    use 'none' for orignal size
	use 'fill' for streching the image based on it's container
	use 'aspectFit' for stretching with aspect ratio preservation (clip image to fit destination)
	use 'aspectFill' for stretching with aspect ratio preservation 

  - resources location:
    App_Resources\Android\src\main\res
	should be added to the corresponding drawable-XXX folders

  - css:
    background-image: url("~/images/logo.png");
    background-repeat: no-repeat;
    height: 120;
    margin: 15;


  - javascript:
    let image = new imageModule.Image();
    image.src = "~/logo.png";
    dockLayout.addChild(image);

  - sample:
	<Image src="~/logo.png" /> 
	<Image src="http://my-domain.com/logo.png" />
	<Image src="res://logo" stretch="none" />
	<Image src="{{ base64ImageSource }}" />

- SegmentedBar
- DatePicker
  - reference:
    https://docs.nativescript.org/api-reference/classes/_ui_date_picker_

  - events:
    loaded 
	dateChange
	dayChange
	monthChange
	yearChange

  - sample:
    <DatePicker maxDate="2020-01-01" minDate="2015-01-01" verticalAlignment="center"></DatePicker>

- FormattedString
  - reference:
    https://docs.nativescript.org/api-reference/classes/_text_formatted_string_.formattedstring

  - support:
    TextField 
	Label 

  - sample:
    <Label class="h3 text-center">
        <FormattedString>
        <Span text="bla " color="#006600" ></Span>
        <Span text="bla " color="#990000" fontAttributes="Bold"></Span>
        <Span text="bla " color="#ffcc00"></Span>
        <Span text="bla"></Span>
        </FormattedString>
    </Label>

- TimePicker
- ListPicker
- Dialogs
  see 'Dialogs'
  
- SearchBar
- Slider

- HtmlView
  - reference:
    https://docs.nativescript.org/api-reference/modules/_ui_html_view_

  - about:
    use this component to show a static HTML content. 
	for dynamic HTML content or web page use the WebView Component (see 'WebView')

  - sample:
    <HtmlView html="<p>Paragraph</p><p>Static HTML Content</p>"></HtmlView>   

- WebView
  - reference:
    https://docs.nativescript.org/api-reference/classes/_ui_web_view_

  - about:
  //TODO 

  - sample:
    <WebView src="~/Pages/HtmlViews/1.html"></WebView>
    <WebView src="http://example.com"></WebView>

- ListView
- TabView 

Dialogs
-------
- Types:
  Action
  Alert
  Confirm
  Login
  Prompt

- Action Dialog
    
  sample:
	let options = {
	  	title: "Age Range",
	  	message: "Choose your age",
	  	cancelButtonText: "Cancel",
	  	actions: ["0-18", "19-30", "31-55", "Above 56"]
	};
	  
	action(options).then((result) => {
	  	console.log('action result:' + result);
	});

- Alert Dialog

  sample:
	let options = {
	  	title: "Alert",
	  	message: "Some message ..",
	  	okButtonText: "OK"		
	};
	  
	alert(options).then(() => {
	  	console.log('alert');
	});

- Confirm Dialog

  sample:
	let options = {
	  	title: "Confirm",
	  	message: "Are you sure?",
        okButtonText: "YES",
        cancelButtonText: "NO",
        neutralButtonText: "Cancel"		
	};
	  
	confirm(options).then((result) => {
	  	console.log('confirm result:' + result);
	});  


- Login Dialog

  sample:
	let options = {
	  	title: "Login",
	  	message: "Login",        
        okButtonText: "Ok",
        cancelButtonText: "Cancel"
	};
	  
	login(options).then((loginResult) => {
	  	console.log('login result:' + loginResult.result);
	});

- Prompt Dialog

  sample:
	let options = {
	  	title: "Prompt",
        message: "Enter your name",
        defaultText: "",               
        okButtonText: "Ok",
        cancelButtonText: "Cancel",
        cancelable: true
	};
	  
	prompt(options).then((result) => {
	  	console.log('prompt result:' + result.text);
	});


Events
------
// TODO
// TODO Gestures https://docs.nativescript.org/angular/ui/ng-ui-widgets/gestures

- tap
- navigatingTo

JS Modules
----------
// TODO

- Observable
  path: 'data/observable'

  about:
  // TODO

  e.g:
  var Observable = require("data/observable").Observable;

  function createViewModel(){
	var viewModel = new Observable();
	viewModel.param1 = 'A';  
	viewModel.param2 = 'B';
	
	return viewModel;
  }
  exports.createViewModel = createViewModel;

- frame
  path: 'ui/frame'

  about:
  allows us to navigate between pages

  navigate:
  frameModule.topmost().navigate([options]);
  frameModule.topmost().navigate([modulePath]);

  e.g: // redirect to about-page
  var frameModule = require("ui/frame");
  var options={
    moduleName:'Pages/About/about-page',
    context:{param1: 'value1', param2: 'value2' }
  }
  frameModule.topmost().navigate(options); 

- dialogs
  path: 'ui/dialogs'
  // TODO


note!
use the 'require' to import modules (see 'require' chapter in 'Working With Nativescript')

Plugins
-------
// TODO 
- nativescript-social-share
  share capabilities.

note!
find more plugins in the market (see 'MarketPlace')

Working With Nativescript
-------------------------
- exports:  
  - the 'exports' object allows us to expose ANY js function so it'll be accessible from the project files.   
  - syntax:
    exports.[Name] = [Function];

  - e.g: 
    <Button text="tapMe" tap="fun1" class="btn btn-primary" />
    exports.fun1 = function() { 
	  ... 
    } 

- require
  - import modules.
  - syntax:
    var [variableName] = require("[modulePath]");
  - use the npm to import the module from the web to the node_modules local folder! (see 'npm install')
  
  - e.g:
    // import the observable module (in node_modules folder)
    var Observable = require("data/observable").Observable;	

	// import the myModule function in my-view-model.js file (in the same folder)
	var myModule = require("./my-view-model").myModule;

	// import the my-shared-view-model.js file
	var myView = require("../shared/my-shared-view-model"); 

- npm install 
  - syntax:
    > npm install [packageName] --save

- page context
  - page.bindingContext = [context];
  - e.g: 
    var createViewModel = require("./view-model").createViewModel; // view-model.js
	function onNavigatingTo(args) { 
		var page = args.object;
		page.bindingContext = createViewModel();
	}
	exports.onNavigatingTo = onNavigatingTo;

systemIcon
----------
- android.systemIcon 
  https://developer.android.com/reference/android/R.drawable

- iOs.systemIcon
  0: Done
  1: Cancel
  2: Edit
  3: Save
  4: Add
  5: FlexibleSpace
  6: FixedSpace
  7: Compose
  8: Reply
  9: Action
  10: Organize
  11: Bookmarks
  12: Search
  13: Refresh
  14: Stop
  15: Camera
  16: Trash
  17: Play
  18: Pause
  19: Rewind
  20: FastForward
  21: Undo
  22: Redo
  23: PageCurl

Platform Specific Capabilities
------------------------------
- File level:
  [view].android
  [view].ios

- Tag level:
  <android></android>
  <ios></ios>

- Attribute level:
  android: [attribute]
  ios: [attribute] 

  e.g: 
  <label android:class="A" ios:class="B" />

CSS
---
nativescript map the known css rules into native style.

- supported selectors:
  - Element Type
  - Class (.)
  - Id (#)

- supported properties:
  - https://docs.nativescript.org/ui/styling#supported-css-properties

- themes:
  - https://docs.nativescript.org/ui/theme
    https://docs.nativescript.org/ui/theme#color-schemes
  
  - the selected theme located in the app.css file 
    @import '~nativescript-theme-core/css/sky.css';

- convention:
  - app.css  // global styles
  - [view].css  // view/ page styles
  - [view].[platform].css  // platform specific styles

- Less/ Saas:
  > tns install less
  > tns install sass

- Units:
  - DO NOT specify px!
  - e.g
  button{
  	border-radius: 3;
  	border-width: 1;
  	border-color: #d3d3d3;
  	width: 100;	
  }

- @keyframes:
  - we can use css keyframes
  - e.g
    @keyframes spin {
        from {
            transform: rotate(0);
        }
    
        to {
            transform: rotate(360);
        }
    }
    
    Image {
        animation-name: spin;
        animation-duration: 3s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
    }


Launch Process
--------------
[OPTION 1]

1. the file app/package.json should define the name of the starting js file 

   e.g:
   {
       "main": "app.js"
   	   "name": "my-app"
   }

2. in the app.js we need to execute the application 

   var application = require("application");
   application.run({ moduleName: "app-root" });

3. need to create the app-root.xml file defined in chapter 2
 
   <Frame defaultPage="main-page"></Frame>

4. create the main-page view
   - main-page.js
   - main-page.xml
   - main-page.css
   
---

[OPTION 2]

1. same as in [OPTION 1]
2. app.js 
   
   var application = require("application");
   application.mainModule = "main-page";
   application.start();

3. create the main-page view

iOS 
---
IPA file:
iOS app store package.

IOS on Windows:
we can't build for iOS using windows due to a requirement of Xcode which is only available on MAC machines! 
there's a cloud build option using nativescript Sidekick (see 'Sidekick APP')

requirements:
- Certificate 
- App Id
- Provisioning Profile

to get those, we need to enroll in the Apple iOS Developer Program and then, to use the dev Center platform.

tip! 
we can use the nativescript Sidekick app to generate those requirements
see 'establish environment for iOS' chapter under 'Sidekick APP' section 

certificate types:
- Certificate for Development
- Certificate for Distribution   

developer Program:
https://developer.apple.com/programs/

dev Center:
https://developer.apple.com/account/

Sidekick APP
------------
install:
NativeScriptSidekickSetup.exe

a desktop application which built on top of the nativeScript CLI.
it was built using Electron to provide us a cross-platform desktop app for Windows, macOS, and Linux. 
with sidekick we can access templates and verified plugins, we can use a cloud builds service and a debugging service.

cloud build:
sidekick allows us to build an app in the cloud! 
no configuration required nor extra local packages.
this allows windows users to build for iOS without needing a Mac!
the build server uses a super fast Mac processor so the cloud build process will be really fast! 
it also provides us a way to submit apps to the app stores and generate certificates for app signing.

debugging: 
sidelick provides us a few great debugging options such as liveSync and the chrome devTools.

Create a Build:
- Run > Build 
- choose the 'Cloud Build' option and the target package (iOS or Android)
- click on 'Build'

create an iOS Certificate Signing Request (CSR):
- (menu) Tools > Certificate Signing Request
- specify name, email and country 
- click on 'Create CSR' button
- save the generated CSR to the local disk (.csr file)
- use the certificate request to create a Certificate (see 'create an iOS Certificate')

create an iOS Certificate (CER):
// TODO

create a P12 file from iOS Certificate:
- (menu) Tools > Certificate Signing Request
- click on 'Import CER' button
- load the certificate file (.cer file)
- provide a password > save

establish environment for iOS:
[steps]
1. create an apple account 
2. see 'create an iOS Certificate Signing Request (CSR)'
3. see 'create an iOS Certificate (CER)'
4. see 'create a P12 file from iOS Certificate'


MarketPlace
-----------
in the nativescript MarketPlace we can find Plugins, Templates and Samples!
https://market.nativescript.org/

Playground
----------
https://play.nativescript.org/

app: 
"NativeScript Playground app"

this app allows us to get a REAL-TIME review of the changes we do in the web Playground site! 
download the app, scan the QR code and get a liveSync view on the mobile.


Issues
------
issue:
Unable to apply changes on device: xxxx. Error is: Command gradlew.bat failed with exit code 1.

solution:
change the jvmargs value to -Xmx256M

file "platforms/android/gradle.properties"
org.gradle.jvmargs=-Xmx256M

--

issue:
can't find the AVD Manager menu in Android Studio after update 

solution:
open android studio > (tab) messages/ event log (located in the bottom)
click "Install missing platforms(s)..."
then after the download/install, click "Intall Build Tools..."

--


Code Samples
------------
// page navigation
<Button tap="goToAboutPage" text="About" />

var frameModule = require("tns-core-modules/ui/frame");
exports.goToAboutPage = function(){                  
    var options={
        moduleName: 'Pages/About/about-page',
        context: { param1: 'value1', param2: 'value2'}
    }
    frameModule.topmost().navigate(options);       
}

note: // redirect with no context
frameModule.topmost().navigate('Pages/About/about-page');

---

// navigatingTo event + bind content from view-model

// view-model.js
var Observable = require("data/observable").Observable;
function createViewModel() { 
    var viewModel = new Observable();    
    viewModel.text = 'bla bla bla...';
    return viewModel;
}
exports.createViewModel = createViewModel;

// page.js
var createViewModel = require("./view-model").createViewModel;
function onNavigatingTo(args) { 
    var page = args.object;
    page.bindingContext = createViewModel();
}
exports.onNavigatingTo = onNavigatingTo;

// page.xml
<Page xmlns="http://schemas.nativescript.org/tns.xsd" navigatingTo="onNavigatingTo" class="page">  
    <Label text="{{ text }}" />
</Page>

---

